// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package poolv1beta1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Protocol              protoreflect.MessageDescriptor
	fd_Protocol_version      protoreflect.FieldDescriptor
	fd_Protocol_binaries     protoreflect.FieldDescriptor
	fd_Protocol_last_upgrade protoreflect.FieldDescriptor
)

func init() {
	file_kyve_pool_v1beta1_pool_proto_init()
	md_Protocol = File_kyve_pool_v1beta1_pool_proto.Messages().ByName("Protocol")
	fd_Protocol_version = md_Protocol.Fields().ByName("version")
	fd_Protocol_binaries = md_Protocol.Fields().ByName("binaries")
	fd_Protocol_last_upgrade = md_Protocol.Fields().ByName("last_upgrade")
}

var _ protoreflect.Message = (*fastReflection_Protocol)(nil)

type fastReflection_Protocol Protocol

func (x *Protocol) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Protocol)(x)
}

func (x *Protocol) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Protocol_messageType fastReflection_Protocol_messageType
var _ protoreflect.MessageType = fastReflection_Protocol_messageType{}

type fastReflection_Protocol_messageType struct{}

func (x fastReflection_Protocol_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Protocol)(nil)
}
func (x fastReflection_Protocol_messageType) New() protoreflect.Message {
	return new(fastReflection_Protocol)
}
func (x fastReflection_Protocol_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Protocol
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Protocol) Descriptor() protoreflect.MessageDescriptor {
	return md_Protocol
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Protocol) Type() protoreflect.MessageType {
	return _fastReflection_Protocol_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Protocol) New() protoreflect.Message {
	return new(fastReflection_Protocol)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Protocol) Interface() protoreflect.ProtoMessage {
	return (*Protocol)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Protocol) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Version != "" {
		value := protoreflect.ValueOfString(x.Version)
		if !f(fd_Protocol_version, value) {
			return
		}
	}
	if x.Binaries != "" {
		value := protoreflect.ValueOfString(x.Binaries)
		if !f(fd_Protocol_binaries, value) {
			return
		}
	}
	if x.LastUpgrade != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastUpgrade)
		if !f(fd_Protocol_last_upgrade, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Protocol) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Protocol.version":
		return x.Version != ""
	case "kyve.pool.v1beta1.Protocol.binaries":
		return x.Binaries != ""
	case "kyve.pool.v1beta1.Protocol.last_upgrade":
		return x.LastUpgrade != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Protocol"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Protocol does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Protocol) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Protocol.version":
		x.Version = ""
	case "kyve.pool.v1beta1.Protocol.binaries":
		x.Binaries = ""
	case "kyve.pool.v1beta1.Protocol.last_upgrade":
		x.LastUpgrade = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Protocol"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Protocol does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Protocol) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.pool.v1beta1.Protocol.version":
		value := x.Version
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Protocol.binaries":
		value := x.Binaries
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Protocol.last_upgrade":
		value := x.LastUpgrade
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Protocol"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Protocol does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Protocol) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Protocol.version":
		x.Version = value.Interface().(string)
	case "kyve.pool.v1beta1.Protocol.binaries":
		x.Binaries = value.Interface().(string)
	case "kyve.pool.v1beta1.Protocol.last_upgrade":
		x.LastUpgrade = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Protocol"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Protocol does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Protocol) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Protocol.version":
		panic(fmt.Errorf("field version of message kyve.pool.v1beta1.Protocol is not mutable"))
	case "kyve.pool.v1beta1.Protocol.binaries":
		panic(fmt.Errorf("field binaries of message kyve.pool.v1beta1.Protocol is not mutable"))
	case "kyve.pool.v1beta1.Protocol.last_upgrade":
		panic(fmt.Errorf("field last_upgrade of message kyve.pool.v1beta1.Protocol is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Protocol"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Protocol does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Protocol) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Protocol.version":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Protocol.binaries":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Protocol.last_upgrade":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Protocol"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Protocol does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Protocol) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.pool.v1beta1.Protocol", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Protocol) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Protocol) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Protocol) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Protocol) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Protocol)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Version)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Binaries)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastUpgrade != 0 {
			n += 1 + runtime.Sov(uint64(x.LastUpgrade))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Protocol)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastUpgrade != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastUpgrade))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Binaries) > 0 {
			i -= len(x.Binaries)
			copy(dAtA[i:], x.Binaries)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Binaries)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Version) > 0 {
			i -= len(x.Version)
			copy(dAtA[i:], x.Version)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Version)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Protocol)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Protocol: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Version = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Binaries = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastUpgrade", wireType)
				}
				x.LastUpgrade = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastUpgrade |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_UpgradePlan              protoreflect.MessageDescriptor
	fd_UpgradePlan_version      protoreflect.FieldDescriptor
	fd_UpgradePlan_binaries     protoreflect.FieldDescriptor
	fd_UpgradePlan_scheduled_at protoreflect.FieldDescriptor
	fd_UpgradePlan_duration     protoreflect.FieldDescriptor
)

func init() {
	file_kyve_pool_v1beta1_pool_proto_init()
	md_UpgradePlan = File_kyve_pool_v1beta1_pool_proto.Messages().ByName("UpgradePlan")
	fd_UpgradePlan_version = md_UpgradePlan.Fields().ByName("version")
	fd_UpgradePlan_binaries = md_UpgradePlan.Fields().ByName("binaries")
	fd_UpgradePlan_scheduled_at = md_UpgradePlan.Fields().ByName("scheduled_at")
	fd_UpgradePlan_duration = md_UpgradePlan.Fields().ByName("duration")
}

var _ protoreflect.Message = (*fastReflection_UpgradePlan)(nil)

type fastReflection_UpgradePlan UpgradePlan

func (x *UpgradePlan) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UpgradePlan)(x)
}

func (x *UpgradePlan) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UpgradePlan_messageType fastReflection_UpgradePlan_messageType
var _ protoreflect.MessageType = fastReflection_UpgradePlan_messageType{}

type fastReflection_UpgradePlan_messageType struct{}

func (x fastReflection_UpgradePlan_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UpgradePlan)(nil)
}
func (x fastReflection_UpgradePlan_messageType) New() protoreflect.Message {
	return new(fastReflection_UpgradePlan)
}
func (x fastReflection_UpgradePlan_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UpgradePlan
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UpgradePlan) Descriptor() protoreflect.MessageDescriptor {
	return md_UpgradePlan
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UpgradePlan) Type() protoreflect.MessageType {
	return _fastReflection_UpgradePlan_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UpgradePlan) New() protoreflect.Message {
	return new(fastReflection_UpgradePlan)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UpgradePlan) Interface() protoreflect.ProtoMessage {
	return (*UpgradePlan)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UpgradePlan) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Version != "" {
		value := protoreflect.ValueOfString(x.Version)
		if !f(fd_UpgradePlan_version, value) {
			return
		}
	}
	if x.Binaries != "" {
		value := protoreflect.ValueOfString(x.Binaries)
		if !f(fd_UpgradePlan_binaries, value) {
			return
		}
	}
	if x.ScheduledAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ScheduledAt)
		if !f(fd_UpgradePlan_scheduled_at, value) {
			return
		}
	}
	if x.Duration != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Duration)
		if !f(fd_UpgradePlan_duration, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UpgradePlan) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.UpgradePlan.version":
		return x.Version != ""
	case "kyve.pool.v1beta1.UpgradePlan.binaries":
		return x.Binaries != ""
	case "kyve.pool.v1beta1.UpgradePlan.scheduled_at":
		return x.ScheduledAt != uint64(0)
	case "kyve.pool.v1beta1.UpgradePlan.duration":
		return x.Duration != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.UpgradePlan"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.UpgradePlan does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UpgradePlan) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.UpgradePlan.version":
		x.Version = ""
	case "kyve.pool.v1beta1.UpgradePlan.binaries":
		x.Binaries = ""
	case "kyve.pool.v1beta1.UpgradePlan.scheduled_at":
		x.ScheduledAt = uint64(0)
	case "kyve.pool.v1beta1.UpgradePlan.duration":
		x.Duration = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.UpgradePlan"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.UpgradePlan does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UpgradePlan) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.pool.v1beta1.UpgradePlan.version":
		value := x.Version
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.UpgradePlan.binaries":
		value := x.Binaries
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.UpgradePlan.scheduled_at":
		value := x.ScheduledAt
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.UpgradePlan.duration":
		value := x.Duration
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.UpgradePlan"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.UpgradePlan does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UpgradePlan) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.UpgradePlan.version":
		x.Version = value.Interface().(string)
	case "kyve.pool.v1beta1.UpgradePlan.binaries":
		x.Binaries = value.Interface().(string)
	case "kyve.pool.v1beta1.UpgradePlan.scheduled_at":
		x.ScheduledAt = value.Uint()
	case "kyve.pool.v1beta1.UpgradePlan.duration":
		x.Duration = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.UpgradePlan"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.UpgradePlan does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UpgradePlan) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.UpgradePlan.version":
		panic(fmt.Errorf("field version of message kyve.pool.v1beta1.UpgradePlan is not mutable"))
	case "kyve.pool.v1beta1.UpgradePlan.binaries":
		panic(fmt.Errorf("field binaries of message kyve.pool.v1beta1.UpgradePlan is not mutable"))
	case "kyve.pool.v1beta1.UpgradePlan.scheduled_at":
		panic(fmt.Errorf("field scheduled_at of message kyve.pool.v1beta1.UpgradePlan is not mutable"))
	case "kyve.pool.v1beta1.UpgradePlan.duration":
		panic(fmt.Errorf("field duration of message kyve.pool.v1beta1.UpgradePlan is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.UpgradePlan"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.UpgradePlan does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UpgradePlan) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.UpgradePlan.version":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.UpgradePlan.binaries":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.UpgradePlan.scheduled_at":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.UpgradePlan.duration":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.UpgradePlan"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.UpgradePlan does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UpgradePlan) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.pool.v1beta1.UpgradePlan", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UpgradePlan) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UpgradePlan) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UpgradePlan) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UpgradePlan) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UpgradePlan)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Version)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Binaries)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ScheduledAt != 0 {
			n += 1 + runtime.Sov(uint64(x.ScheduledAt))
		}
		if x.Duration != 0 {
			n += 1 + runtime.Sov(uint64(x.Duration))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UpgradePlan)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Duration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Duration))
			i--
			dAtA[i] = 0x20
		}
		if x.ScheduledAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ScheduledAt))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Binaries) > 0 {
			i -= len(x.Binaries)
			copy(dAtA[i:], x.Binaries)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Binaries)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Version) > 0 {
			i -= len(x.Version)
			copy(dAtA[i:], x.Version)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Version)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UpgradePlan)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UpgradePlan: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UpgradePlan: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Version = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Binaries = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ScheduledAt", wireType)
				}
				x.ScheduledAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ScheduledAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
				}
				x.Duration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Duration |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Funder         protoreflect.MessageDescriptor
	fd_Funder_address protoreflect.FieldDescriptor
	fd_Funder_amount  protoreflect.FieldDescriptor
)

func init() {
	file_kyve_pool_v1beta1_pool_proto_init()
	md_Funder = File_kyve_pool_v1beta1_pool_proto.Messages().ByName("Funder")
	fd_Funder_address = md_Funder.Fields().ByName("address")
	fd_Funder_amount = md_Funder.Fields().ByName("amount")
}

var _ protoreflect.Message = (*fastReflection_Funder)(nil)

type fastReflection_Funder Funder

func (x *Funder) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Funder)(x)
}

func (x *Funder) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Funder_messageType fastReflection_Funder_messageType
var _ protoreflect.MessageType = fastReflection_Funder_messageType{}

type fastReflection_Funder_messageType struct{}

func (x fastReflection_Funder_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Funder)(nil)
}
func (x fastReflection_Funder_messageType) New() protoreflect.Message {
	return new(fastReflection_Funder)
}
func (x fastReflection_Funder_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Funder
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Funder) Descriptor() protoreflect.MessageDescriptor {
	return md_Funder
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Funder) Type() protoreflect.MessageType {
	return _fastReflection_Funder_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Funder) New() protoreflect.Message {
	return new(fastReflection_Funder)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Funder) Interface() protoreflect.ProtoMessage {
	return (*Funder)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Funder) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Funder_address, value) {
			return
		}
	}
	if x.Amount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Amount)
		if !f(fd_Funder_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Funder) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Funder.address":
		return x.Address != ""
	case "kyve.pool.v1beta1.Funder.amount":
		return x.Amount != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Funder"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Funder does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Funder) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Funder.address":
		x.Address = ""
	case "kyve.pool.v1beta1.Funder.amount":
		x.Amount = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Funder"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Funder does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Funder) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.pool.v1beta1.Funder.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Funder.amount":
		value := x.Amount
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Funder"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Funder does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Funder) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Funder.address":
		x.Address = value.Interface().(string)
	case "kyve.pool.v1beta1.Funder.amount":
		x.Amount = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Funder"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Funder does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Funder) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Funder.address":
		panic(fmt.Errorf("field address of message kyve.pool.v1beta1.Funder is not mutable"))
	case "kyve.pool.v1beta1.Funder.amount":
		panic(fmt.Errorf("field amount of message kyve.pool.v1beta1.Funder is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Funder"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Funder does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Funder) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Funder.address":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Funder.amount":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Funder"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Funder does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Funder) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.pool.v1beta1.Funder", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Funder) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Funder) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Funder) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Funder) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Funder)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Funder)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Funder)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Funder: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Funder: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Pool_16_list)(nil)

type _Pool_16_list struct {
	list *[]*Funder
}

func (x *_Pool_16_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Pool_16_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Pool_16_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Funder)
	(*x.list)[i] = concreteValue
}

func (x *_Pool_16_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Funder)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Pool_16_list) AppendMutable() protoreflect.Value {
	v := new(Funder)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Pool_16_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Pool_16_list) NewElement() protoreflect.Value {
	v := new(Funder)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Pool_16_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Pool                             protoreflect.MessageDescriptor
	fd_Pool_id                          protoreflect.FieldDescriptor
	fd_Pool_name                        protoreflect.FieldDescriptor
	fd_Pool_runtime                     protoreflect.FieldDescriptor
	fd_Pool_logo                        protoreflect.FieldDescriptor
	fd_Pool_config                      protoreflect.FieldDescriptor
	fd_Pool_start_key                   protoreflect.FieldDescriptor
	fd_Pool_current_key                 protoreflect.FieldDescriptor
	fd_Pool_current_summary             protoreflect.FieldDescriptor
	fd_Pool_current_index               protoreflect.FieldDescriptor
	fd_Pool_total_bundles               protoreflect.FieldDescriptor
	fd_Pool_upload_interval             protoreflect.FieldDescriptor
	fd_Pool_operating_cost              protoreflect.FieldDescriptor
	fd_Pool_min_delegation              protoreflect.FieldDescriptor
	fd_Pool_max_bundle_size             protoreflect.FieldDescriptor
	fd_Pool_disabled                    protoreflect.FieldDescriptor
	fd_Pool_funders                     protoreflect.FieldDescriptor
	fd_Pool_total_funds                 protoreflect.FieldDescriptor
	fd_Pool_protocol                    protoreflect.FieldDescriptor
	fd_Pool_upgrade_plan                protoreflect.FieldDescriptor
	fd_Pool_current_storage_provider_id protoreflect.FieldDescriptor
	fd_Pool_current_compression_id      protoreflect.FieldDescriptor
)

func init() {
	file_kyve_pool_v1beta1_pool_proto_init()
	md_Pool = File_kyve_pool_v1beta1_pool_proto.Messages().ByName("Pool")
	fd_Pool_id = md_Pool.Fields().ByName("id")
	fd_Pool_name = md_Pool.Fields().ByName("name")
	fd_Pool_runtime = md_Pool.Fields().ByName("runtime")
	fd_Pool_logo = md_Pool.Fields().ByName("logo")
	fd_Pool_config = md_Pool.Fields().ByName("config")
	fd_Pool_start_key = md_Pool.Fields().ByName("start_key")
	fd_Pool_current_key = md_Pool.Fields().ByName("current_key")
	fd_Pool_current_summary = md_Pool.Fields().ByName("current_summary")
	fd_Pool_current_index = md_Pool.Fields().ByName("current_index")
	fd_Pool_total_bundles = md_Pool.Fields().ByName("total_bundles")
	fd_Pool_upload_interval = md_Pool.Fields().ByName("upload_interval")
	fd_Pool_operating_cost = md_Pool.Fields().ByName("operating_cost")
	fd_Pool_min_delegation = md_Pool.Fields().ByName("min_delegation")
	fd_Pool_max_bundle_size = md_Pool.Fields().ByName("max_bundle_size")
	fd_Pool_disabled = md_Pool.Fields().ByName("disabled")
	fd_Pool_funders = md_Pool.Fields().ByName("funders")
	fd_Pool_total_funds = md_Pool.Fields().ByName("total_funds")
	fd_Pool_protocol = md_Pool.Fields().ByName("protocol")
	fd_Pool_upgrade_plan = md_Pool.Fields().ByName("upgrade_plan")
	fd_Pool_current_storage_provider_id = md_Pool.Fields().ByName("current_storage_provider_id")
	fd_Pool_current_compression_id = md_Pool.Fields().ByName("current_compression_id")
}

var _ protoreflect.Message = (*fastReflection_Pool)(nil)

type fastReflection_Pool Pool

func (x *Pool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Pool)(x)
}

func (x *Pool) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Pool_messageType fastReflection_Pool_messageType
var _ protoreflect.MessageType = fastReflection_Pool_messageType{}

type fastReflection_Pool_messageType struct{}

func (x fastReflection_Pool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Pool)(nil)
}
func (x fastReflection_Pool_messageType) New() protoreflect.Message {
	return new(fastReflection_Pool)
}
func (x fastReflection_Pool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Pool) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Pool) Type() protoreflect.MessageType {
	return _fastReflection_Pool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Pool) New() protoreflect.Message {
	return new(fastReflection_Pool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Pool) Interface() protoreflect.ProtoMessage {
	return (*Pool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Pool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Pool_id, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_Pool_name, value) {
			return
		}
	}
	if x.Runtime != "" {
		value := protoreflect.ValueOfString(x.Runtime)
		if !f(fd_Pool_runtime, value) {
			return
		}
	}
	if x.Logo != "" {
		value := protoreflect.ValueOfString(x.Logo)
		if !f(fd_Pool_logo, value) {
			return
		}
	}
	if x.Config != "" {
		value := protoreflect.ValueOfString(x.Config)
		if !f(fd_Pool_config, value) {
			return
		}
	}
	if x.StartKey != "" {
		value := protoreflect.ValueOfString(x.StartKey)
		if !f(fd_Pool_start_key, value) {
			return
		}
	}
	if x.CurrentKey != "" {
		value := protoreflect.ValueOfString(x.CurrentKey)
		if !f(fd_Pool_current_key, value) {
			return
		}
	}
	if x.CurrentSummary != "" {
		value := protoreflect.ValueOfString(x.CurrentSummary)
		if !f(fd_Pool_current_summary, value) {
			return
		}
	}
	if x.CurrentIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CurrentIndex)
		if !f(fd_Pool_current_index, value) {
			return
		}
	}
	if x.TotalBundles != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalBundles)
		if !f(fd_Pool_total_bundles, value) {
			return
		}
	}
	if x.UploadInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UploadInterval)
		if !f(fd_Pool_upload_interval, value) {
			return
		}
	}
	if x.OperatingCost != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OperatingCost)
		if !f(fd_Pool_operating_cost, value) {
			return
		}
	}
	if x.MinDelegation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinDelegation)
		if !f(fd_Pool_min_delegation, value) {
			return
		}
	}
	if x.MaxBundleSize != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxBundleSize)
		if !f(fd_Pool_max_bundle_size, value) {
			return
		}
	}
	if x.Disabled != false {
		value := protoreflect.ValueOfBool(x.Disabled)
		if !f(fd_Pool_disabled, value) {
			return
		}
	}
	if len(x.Funders) != 0 {
		value := protoreflect.ValueOfList(&_Pool_16_list{list: &x.Funders})
		if !f(fd_Pool_funders, value) {
			return
		}
	}
	if x.TotalFunds != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalFunds)
		if !f(fd_Pool_total_funds, value) {
			return
		}
	}
	if x.Protocol != nil {
		value := protoreflect.ValueOfMessage(x.Protocol.ProtoReflect())
		if !f(fd_Pool_protocol, value) {
			return
		}
	}
	if x.UpgradePlan != nil {
		value := protoreflect.ValueOfMessage(x.UpgradePlan.ProtoReflect())
		if !f(fd_Pool_upgrade_plan, value) {
			return
		}
	}
	if x.CurrentStorageProviderId != uint32(0) {
		value := protoreflect.ValueOfUint32(x.CurrentStorageProviderId)
		if !f(fd_Pool_current_storage_provider_id, value) {
			return
		}
	}
	if x.CurrentCompressionId != uint32(0) {
		value := protoreflect.ValueOfUint32(x.CurrentCompressionId)
		if !f(fd_Pool_current_compression_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Pool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Pool.id":
		return x.Id != uint64(0)
	case "kyve.pool.v1beta1.Pool.name":
		return x.Name != ""
	case "kyve.pool.v1beta1.Pool.runtime":
		return x.Runtime != ""
	case "kyve.pool.v1beta1.Pool.logo":
		return x.Logo != ""
	case "kyve.pool.v1beta1.Pool.config":
		return x.Config != ""
	case "kyve.pool.v1beta1.Pool.start_key":
		return x.StartKey != ""
	case "kyve.pool.v1beta1.Pool.current_key":
		return x.CurrentKey != ""
	case "kyve.pool.v1beta1.Pool.current_summary":
		return x.CurrentSummary != ""
	case "kyve.pool.v1beta1.Pool.current_index":
		return x.CurrentIndex != uint64(0)
	case "kyve.pool.v1beta1.Pool.total_bundles":
		return x.TotalBundles != uint64(0)
	case "kyve.pool.v1beta1.Pool.upload_interval":
		return x.UploadInterval != uint64(0)
	case "kyve.pool.v1beta1.Pool.operating_cost":
		return x.OperatingCost != uint64(0)
	case "kyve.pool.v1beta1.Pool.min_delegation":
		return x.MinDelegation != uint64(0)
	case "kyve.pool.v1beta1.Pool.max_bundle_size":
		return x.MaxBundleSize != uint64(0)
	case "kyve.pool.v1beta1.Pool.disabled":
		return x.Disabled != false
	case "kyve.pool.v1beta1.Pool.funders":
		return len(x.Funders) != 0
	case "kyve.pool.v1beta1.Pool.total_funds":
		return x.TotalFunds != uint64(0)
	case "kyve.pool.v1beta1.Pool.protocol":
		return x.Protocol != nil
	case "kyve.pool.v1beta1.Pool.upgrade_plan":
		return x.UpgradePlan != nil
	case "kyve.pool.v1beta1.Pool.current_storage_provider_id":
		return x.CurrentStorageProviderId != uint32(0)
	case "kyve.pool.v1beta1.Pool.current_compression_id":
		return x.CurrentCompressionId != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Pool.id":
		x.Id = uint64(0)
	case "kyve.pool.v1beta1.Pool.name":
		x.Name = ""
	case "kyve.pool.v1beta1.Pool.runtime":
		x.Runtime = ""
	case "kyve.pool.v1beta1.Pool.logo":
		x.Logo = ""
	case "kyve.pool.v1beta1.Pool.config":
		x.Config = ""
	case "kyve.pool.v1beta1.Pool.start_key":
		x.StartKey = ""
	case "kyve.pool.v1beta1.Pool.current_key":
		x.CurrentKey = ""
	case "kyve.pool.v1beta1.Pool.current_summary":
		x.CurrentSummary = ""
	case "kyve.pool.v1beta1.Pool.current_index":
		x.CurrentIndex = uint64(0)
	case "kyve.pool.v1beta1.Pool.total_bundles":
		x.TotalBundles = uint64(0)
	case "kyve.pool.v1beta1.Pool.upload_interval":
		x.UploadInterval = uint64(0)
	case "kyve.pool.v1beta1.Pool.operating_cost":
		x.OperatingCost = uint64(0)
	case "kyve.pool.v1beta1.Pool.min_delegation":
		x.MinDelegation = uint64(0)
	case "kyve.pool.v1beta1.Pool.max_bundle_size":
		x.MaxBundleSize = uint64(0)
	case "kyve.pool.v1beta1.Pool.disabled":
		x.Disabled = false
	case "kyve.pool.v1beta1.Pool.funders":
		x.Funders = nil
	case "kyve.pool.v1beta1.Pool.total_funds":
		x.TotalFunds = uint64(0)
	case "kyve.pool.v1beta1.Pool.protocol":
		x.Protocol = nil
	case "kyve.pool.v1beta1.Pool.upgrade_plan":
		x.UpgradePlan = nil
	case "kyve.pool.v1beta1.Pool.current_storage_provider_id":
		x.CurrentStorageProviderId = uint32(0)
	case "kyve.pool.v1beta1.Pool.current_compression_id":
		x.CurrentCompressionId = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Pool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.pool.v1beta1.Pool.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Pool.runtime":
		value := x.Runtime
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Pool.logo":
		value := x.Logo
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Pool.config":
		value := x.Config
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Pool.start_key":
		value := x.StartKey
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Pool.current_key":
		value := x.CurrentKey
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Pool.current_summary":
		value := x.CurrentSummary
		return protoreflect.ValueOfString(value)
	case "kyve.pool.v1beta1.Pool.current_index":
		value := x.CurrentIndex
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.total_bundles":
		value := x.TotalBundles
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.upload_interval":
		value := x.UploadInterval
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.operating_cost":
		value := x.OperatingCost
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.min_delegation":
		value := x.MinDelegation
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.max_bundle_size":
		value := x.MaxBundleSize
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.disabled":
		value := x.Disabled
		return protoreflect.ValueOfBool(value)
	case "kyve.pool.v1beta1.Pool.funders":
		if len(x.Funders) == 0 {
			return protoreflect.ValueOfList(&_Pool_16_list{})
		}
		listValue := &_Pool_16_list{list: &x.Funders}
		return protoreflect.ValueOfList(listValue)
	case "kyve.pool.v1beta1.Pool.total_funds":
		value := x.TotalFunds
		return protoreflect.ValueOfUint64(value)
	case "kyve.pool.v1beta1.Pool.protocol":
		value := x.Protocol
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.pool.v1beta1.Pool.upgrade_plan":
		value := x.UpgradePlan
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.pool.v1beta1.Pool.current_storage_provider_id":
		value := x.CurrentStorageProviderId
		return protoreflect.ValueOfUint32(value)
	case "kyve.pool.v1beta1.Pool.current_compression_id":
		value := x.CurrentCompressionId
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Pool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Pool.id":
		x.Id = value.Uint()
	case "kyve.pool.v1beta1.Pool.name":
		x.Name = value.Interface().(string)
	case "kyve.pool.v1beta1.Pool.runtime":
		x.Runtime = value.Interface().(string)
	case "kyve.pool.v1beta1.Pool.logo":
		x.Logo = value.Interface().(string)
	case "kyve.pool.v1beta1.Pool.config":
		x.Config = value.Interface().(string)
	case "kyve.pool.v1beta1.Pool.start_key":
		x.StartKey = value.Interface().(string)
	case "kyve.pool.v1beta1.Pool.current_key":
		x.CurrentKey = value.Interface().(string)
	case "kyve.pool.v1beta1.Pool.current_summary":
		x.CurrentSummary = value.Interface().(string)
	case "kyve.pool.v1beta1.Pool.current_index":
		x.CurrentIndex = value.Uint()
	case "kyve.pool.v1beta1.Pool.total_bundles":
		x.TotalBundles = value.Uint()
	case "kyve.pool.v1beta1.Pool.upload_interval":
		x.UploadInterval = value.Uint()
	case "kyve.pool.v1beta1.Pool.operating_cost":
		x.OperatingCost = value.Uint()
	case "kyve.pool.v1beta1.Pool.min_delegation":
		x.MinDelegation = value.Uint()
	case "kyve.pool.v1beta1.Pool.max_bundle_size":
		x.MaxBundleSize = value.Uint()
	case "kyve.pool.v1beta1.Pool.disabled":
		x.Disabled = value.Bool()
	case "kyve.pool.v1beta1.Pool.funders":
		lv := value.List()
		clv := lv.(*_Pool_16_list)
		x.Funders = *clv.list
	case "kyve.pool.v1beta1.Pool.total_funds":
		x.TotalFunds = value.Uint()
	case "kyve.pool.v1beta1.Pool.protocol":
		x.Protocol = value.Message().Interface().(*Protocol)
	case "kyve.pool.v1beta1.Pool.upgrade_plan":
		x.UpgradePlan = value.Message().Interface().(*UpgradePlan)
	case "kyve.pool.v1beta1.Pool.current_storage_provider_id":
		x.CurrentStorageProviderId = uint32(value.Uint())
	case "kyve.pool.v1beta1.Pool.current_compression_id":
		x.CurrentCompressionId = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Pool.funders":
		if x.Funders == nil {
			x.Funders = []*Funder{}
		}
		value := &_Pool_16_list{list: &x.Funders}
		return protoreflect.ValueOfList(value)
	case "kyve.pool.v1beta1.Pool.protocol":
		if x.Protocol == nil {
			x.Protocol = new(Protocol)
		}
		return protoreflect.ValueOfMessage(x.Protocol.ProtoReflect())
	case "kyve.pool.v1beta1.Pool.upgrade_plan":
		if x.UpgradePlan == nil {
			x.UpgradePlan = new(UpgradePlan)
		}
		return protoreflect.ValueOfMessage(x.UpgradePlan.ProtoReflect())
	case "kyve.pool.v1beta1.Pool.id":
		panic(fmt.Errorf("field id of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.name":
		panic(fmt.Errorf("field name of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.runtime":
		panic(fmt.Errorf("field runtime of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.logo":
		panic(fmt.Errorf("field logo of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.config":
		panic(fmt.Errorf("field config of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.start_key":
		panic(fmt.Errorf("field start_key of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.current_key":
		panic(fmt.Errorf("field current_key of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.current_summary":
		panic(fmt.Errorf("field current_summary of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.current_index":
		panic(fmt.Errorf("field current_index of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.total_bundles":
		panic(fmt.Errorf("field total_bundles of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.upload_interval":
		panic(fmt.Errorf("field upload_interval of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.operating_cost":
		panic(fmt.Errorf("field operating_cost of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.min_delegation":
		panic(fmt.Errorf("field min_delegation of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.max_bundle_size":
		panic(fmt.Errorf("field max_bundle_size of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.disabled":
		panic(fmt.Errorf("field disabled of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.total_funds":
		panic(fmt.Errorf("field total_funds of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.current_storage_provider_id":
		panic(fmt.Errorf("field current_storage_provider_id of message kyve.pool.v1beta1.Pool is not mutable"))
	case "kyve.pool.v1beta1.Pool.current_compression_id":
		panic(fmt.Errorf("field current_compression_id of message kyve.pool.v1beta1.Pool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Pool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.pool.v1beta1.Pool.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.name":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Pool.runtime":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Pool.logo":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Pool.config":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Pool.start_key":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Pool.current_key":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Pool.current_summary":
		return protoreflect.ValueOfString("")
	case "kyve.pool.v1beta1.Pool.current_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.total_bundles":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.upload_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.operating_cost":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.min_delegation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.max_bundle_size":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.disabled":
		return protoreflect.ValueOfBool(false)
	case "kyve.pool.v1beta1.Pool.funders":
		list := []*Funder{}
		return protoreflect.ValueOfList(&_Pool_16_list{list: &list})
	case "kyve.pool.v1beta1.Pool.total_funds":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.pool.v1beta1.Pool.protocol":
		m := new(Protocol)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.pool.v1beta1.Pool.upgrade_plan":
		m := new(UpgradePlan)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.pool.v1beta1.Pool.current_storage_provider_id":
		return protoreflect.ValueOfUint32(uint32(0))
	case "kyve.pool.v1beta1.Pool.current_compression_id":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.pool.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message kyve.pool.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Pool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.pool.v1beta1.Pool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Pool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Pool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Pool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Runtime)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Logo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Config)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StartKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CurrentKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CurrentSummary)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentIndex))
		}
		if x.TotalBundles != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalBundles))
		}
		if x.UploadInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.UploadInterval))
		}
		if x.OperatingCost != 0 {
			n += 1 + runtime.Sov(uint64(x.OperatingCost))
		}
		if x.MinDelegation != 0 {
			n += 1 + runtime.Sov(uint64(x.MinDelegation))
		}
		if x.MaxBundleSize != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxBundleSize))
		}
		if x.Disabled {
			n += 2
		}
		if len(x.Funders) > 0 {
			for _, e := range x.Funders {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.TotalFunds != 0 {
			n += 2 + runtime.Sov(uint64(x.TotalFunds))
		}
		if x.Protocol != nil {
			l = options.Size(x.Protocol)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.UpgradePlan != nil {
			l = options.Size(x.UpgradePlan)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentStorageProviderId != 0 {
			n += 2 + runtime.Sov(uint64(x.CurrentStorageProviderId))
		}
		if x.CurrentCompressionId != 0 {
			n += 2 + runtime.Sov(uint64(x.CurrentCompressionId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CurrentCompressionId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentCompressionId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
		if x.CurrentStorageProviderId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentStorageProviderId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.UpgradePlan != nil {
			encoded, err := options.Marshal(x.UpgradePlan)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
		if x.Protocol != nil {
			encoded, err := options.Marshal(x.Protocol)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if x.TotalFunds != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalFunds))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if len(x.Funders) > 0 {
			for iNdEx := len(x.Funders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Funders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x82
			}
		}
		if x.Disabled {
			i--
			if x.Disabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x78
		}
		if x.MaxBundleSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxBundleSize))
			i--
			dAtA[i] = 0x70
		}
		if x.MinDelegation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinDelegation))
			i--
			dAtA[i] = 0x68
		}
		if x.OperatingCost != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OperatingCost))
			i--
			dAtA[i] = 0x60
		}
		if x.UploadInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UploadInterval))
			i--
			dAtA[i] = 0x58
		}
		if x.TotalBundles != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalBundles))
			i--
			dAtA[i] = 0x50
		}
		if x.CurrentIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentIndex))
			i--
			dAtA[i] = 0x48
		}
		if len(x.CurrentSummary) > 0 {
			i -= len(x.CurrentSummary)
			copy(dAtA[i:], x.CurrentSummary)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentSummary)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.CurrentKey) > 0 {
			i -= len(x.CurrentKey)
			copy(dAtA[i:], x.CurrentKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentKey)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.StartKey) > 0 {
			i -= len(x.StartKey)
			copy(dAtA[i:], x.StartKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StartKey)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Config) > 0 {
			i -= len(x.Config)
			copy(dAtA[i:], x.Config)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Config)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Logo) > 0 {
			i -= len(x.Logo)
			copy(dAtA[i:], x.Logo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Logo)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Runtime) > 0 {
			i -= len(x.Runtime)
			copy(dAtA[i:], x.Runtime)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Runtime)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Runtime = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Logo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Config = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StartKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentSummary", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentSummary = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentIndex", wireType)
				}
				x.CurrentIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalBundles", wireType)
				}
				x.TotalBundles = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalBundles |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
				}
				x.UploadInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UploadInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperatingCost", wireType)
				}
				x.OperatingCost = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OperatingCost |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinDelegation", wireType)
				}
				x.MinDelegation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinDelegation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxBundleSize", wireType)
				}
				x.MaxBundleSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxBundleSize |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Disabled = bool(v != 0)
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Funders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Funders = append(x.Funders, &Funder{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Funders[len(x.Funders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
				}
				x.TotalFunds = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalFunds |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Protocol == nil {
					x.Protocol = &Protocol{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Protocol); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpgradePlan", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UpgradePlan == nil {
					x.UpgradePlan = &UpgradePlan{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UpgradePlan); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentStorageProviderId", wireType)
				}
				x.CurrentStorageProviderId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentStorageProviderId |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentCompressionId", wireType)
				}
				x.CurrentCompressionId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentCompressionId |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kyve/pool/v1beta1/pool.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PoolStatus ...
type PoolStatus int32

const (
	// POOL_STATUS_UNSPECIFIED ...
	PoolStatus_POOL_STATUS_UNSPECIFIED PoolStatus = 0
	// POOL_STATUS_ACTIVE ...
	PoolStatus_POOL_STATUS_ACTIVE PoolStatus = 1
	// POOL_STATUS_DISABLED ...
	PoolStatus_POOL_STATUS_DISABLED PoolStatus = 2
	// POOL_STATUS_NO_FUNDS ...
	PoolStatus_POOL_STATUS_NO_FUNDS PoolStatus = 3
	// POOL_STATUS_NOT_ENOUGH_DELEGATION ...
	PoolStatus_POOL_STATUS_NOT_ENOUGH_DELEGATION PoolStatus = 4
	// POOL_STATUS_UPGRADING ...
	PoolStatus_POOL_STATUS_UPGRADING PoolStatus = 5
)

// Enum value maps for PoolStatus.
var (
	PoolStatus_name = map[int32]string{
		0: "POOL_STATUS_UNSPECIFIED",
		1: "POOL_STATUS_ACTIVE",
		2: "POOL_STATUS_DISABLED",
		3: "POOL_STATUS_NO_FUNDS",
		4: "POOL_STATUS_NOT_ENOUGH_DELEGATION",
		5: "POOL_STATUS_UPGRADING",
	}
	PoolStatus_value = map[string]int32{
		"POOL_STATUS_UNSPECIFIED":           0,
		"POOL_STATUS_ACTIVE":                1,
		"POOL_STATUS_DISABLED":              2,
		"POOL_STATUS_NO_FUNDS":              3,
		"POOL_STATUS_NOT_ENOUGH_DELEGATION": 4,
		"POOL_STATUS_UPGRADING":             5,
	}
)

func (x PoolStatus) Enum() *PoolStatus {
	p := new(PoolStatus)
	*p = x
	return p
}

func (x PoolStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kyve_pool_v1beta1_pool_proto_enumTypes[0].Descriptor()
}

func (PoolStatus) Type() protoreflect.EnumType {
	return &file_kyve_pool_v1beta1_pool_proto_enumTypes[0]
}

func (x PoolStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolStatus.Descriptor instead.
func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return file_kyve_pool_v1beta1_pool_proto_rawDescGZIP(), []int{0}
}

// Protocol holds all info about the current pool version and the
// available binaries for participating as a validator in a pool
type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version holds the current software version tag of the pool binaries
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// binaries is a stringified json object which holds binaries in the
	// current version for multiple platforms and architectures
	Binaries string `protobuf:"bytes,2,opt,name=binaries,proto3" json:"binaries,omitempty"`
	// last_upgrade is the unix time the pool was upgraded the last time
	LastUpgrade uint64 `protobuf:"varint,3,opt,name=last_upgrade,json=lastUpgrade,proto3" json:"last_upgrade,omitempty"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_kyve_pool_v1beta1_pool_proto_rawDescGZIP(), []int{0}
}

func (x *Protocol) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Protocol) GetBinaries() string {
	if x != nil {
		return x.Binaries
	}
	return ""
}

func (x *Protocol) GetLastUpgrade() uint64 {
	if x != nil {
		return x.LastUpgrade
	}
	return 0
}

// Upgrade holds all info when a pool has a scheduled upgrade
type UpgradePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version is the new software version tag of the upgrade
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// binaries is the new stringified json object which holds binaries in the
	// upgrade version for multiple platforms and architectures
	Binaries string `protobuf:"bytes,2,opt,name=binaries,proto3" json:"binaries,omitempty"`
	// scheduled_at is the unix time the upgrade is supposed to be done
	ScheduledAt uint64 `protobuf:"varint,3,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// duration is the time in seconds how long the pool should halt
	// during the upgrade to give all validators a chance of switching
	// to the new binaries
	Duration uint64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *UpgradePlan) Reset() {
	*x = UpgradePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePlan) ProtoMessage() {}

// Deprecated: Use UpgradePlan.ProtoReflect.Descriptor instead.
func (*UpgradePlan) Descriptor() ([]byte, []int) {
	return file_kyve_pool_v1beta1_pool_proto_rawDescGZIP(), []int{1}
}

func (x *UpgradePlan) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpgradePlan) GetBinaries() string {
	if x != nil {
		return x.Binaries
	}
	return ""
}

func (x *UpgradePlan) GetScheduledAt() uint64 {
	if x != nil {
		return x.ScheduledAt
	}
	return 0
}

func (x *UpgradePlan) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Funder is the object which holds info about a single pool funder
type Funder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the funder
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// amount is the current amount of funds in ukyve the funder has
	// still funded the pool with
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Funder) Reset() {
	*x = Funder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Funder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Funder) ProtoMessage() {}

// Deprecated: Use Funder.ProtoReflect.Descriptor instead.
func (*Funder) Descriptor() ([]byte, []int) {
	return file_kyve_pool_v1beta1_pool_proto_rawDescGZIP(), []int{2}
}

func (x *Funder) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Funder) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Pool ...
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id - unique identifier of the pool, can not be changed
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is a human readable name for the pool
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// runtime specified which protocol and which version needs is required
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo is a link to an image file
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// config is either a JSON encoded string or a link to an external storage provider.
	// This is up to the implementation of the protocol node.
	Config string `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// start_key ...
	StartKey string `protobuf:"bytes,6,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// current_key ...
	CurrentKey string `protobuf:"bytes,7,opt,name=current_key,json=currentKey,proto3" json:"current_key,omitempty"`
	// current_summary ...
	CurrentSummary string `protobuf:"bytes,8,opt,name=current_summary,json=currentSummary,proto3" json:"current_summary,omitempty"`
	// current_index ...
	CurrentIndex uint64 `protobuf:"varint,9,opt,name=current_index,json=currentIndex,proto3" json:"current_index,omitempty"`
	// total_bundles is the number of total finalized bundles
	TotalBundles uint64 `protobuf:"varint,10,opt,name=total_bundles,json=totalBundles,proto3" json:"total_bundles,omitempty"`
	// upload_interval ...
	UploadInterval uint64 `protobuf:"varint,11,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// operating_cost ...
	OperatingCost uint64 `protobuf:"varint,12,opt,name=operating_cost,json=operatingCost,proto3" json:"operating_cost,omitempty"`
	// min_delegation ...
	MinDelegation uint64 `protobuf:"varint,13,opt,name=min_delegation,json=minDelegation,proto3" json:"min_delegation,omitempty"`
	// max_bundle_size ...
	MaxBundleSize uint64 `protobuf:"varint,14,opt,name=max_bundle_size,json=maxBundleSize,proto3" json:"max_bundle_size,omitempty"`
	// disabled is true when the pool is disabled.
	// Can only be done via governance.
	Disabled bool `protobuf:"varint,15,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// funders ...
	Funders []*Funder `protobuf:"bytes,16,rep,name=funders,proto3" json:"funders,omitempty"`
	// total_funds ...
	TotalFunds uint64 `protobuf:"varint,17,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	// protocol ...
	Protocol *Protocol `protobuf:"bytes,18,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// upgrade_plan ...
	UpgradePlan *UpgradePlan `protobuf:"bytes,19,opt,name=upgrade_plan,json=upgradePlan,proto3" json:"upgrade_plan,omitempty"`
	// storage_provider_id ...
	CurrentStorageProviderId uint32 `protobuf:"varint,20,opt,name=current_storage_provider_id,json=currentStorageProviderId,proto3" json:"current_storage_provider_id,omitempty"`
	// compression_id ...
	CurrentCompressionId uint32 `protobuf:"varint,21,opt,name=current_compression_id,json=currentCompressionId,proto3" json:"current_compression_id,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_pool_v1beta1_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_kyve_pool_v1beta1_pool_proto_rawDescGZIP(), []int{3}
}

func (x *Pool) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pool) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Pool) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Pool) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Pool) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

func (x *Pool) GetCurrentKey() string {
	if x != nil {
		return x.CurrentKey
	}
	return ""
}

func (x *Pool) GetCurrentSummary() string {
	if x != nil {
		return x.CurrentSummary
	}
	return ""
}

func (x *Pool) GetCurrentIndex() uint64 {
	if x != nil {
		return x.CurrentIndex
	}
	return 0
}

func (x *Pool) GetTotalBundles() uint64 {
	if x != nil {
		return x.TotalBundles
	}
	return 0
}

func (x *Pool) GetUploadInterval() uint64 {
	if x != nil {
		return x.UploadInterval
	}
	return 0
}

func (x *Pool) GetOperatingCost() uint64 {
	if x != nil {
		return x.OperatingCost
	}
	return 0
}

func (x *Pool) GetMinDelegation() uint64 {
	if x != nil {
		return x.MinDelegation
	}
	return 0
}

func (x *Pool) GetMaxBundleSize() uint64 {
	if x != nil {
		return x.MaxBundleSize
	}
	return 0
}

func (x *Pool) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Pool) GetFunders() []*Funder {
	if x != nil {
		return x.Funders
	}
	return nil
}

func (x *Pool) GetTotalFunds() uint64 {
	if x != nil {
		return x.TotalFunds
	}
	return 0
}

func (x *Pool) GetProtocol() *Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Pool) GetUpgradePlan() *UpgradePlan {
	if x != nil {
		return x.UpgradePlan
	}
	return nil
}

func (x *Pool) GetCurrentStorageProviderId() uint32 {
	if x != nil {
		return x.CurrentStorageProviderId
	}
	return 0
}

func (x *Pool) GetCurrentCompressionId() uint32 {
	if x != nil {
		return x.CurrentCompressionId
	}
	return 0
}

var File_kyve_pool_v1beta1_pool_proto protoreflect.FileDescriptor

var file_kyve_pool_v1beta1_pool_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6b, 0x79, 0x76, 0x65, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3a, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x06,
	0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x79, 0x76, 0x65, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x0c, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3d,
	0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x2a, 0xbd, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0x04, 0x88,
	0xa3, 0x1e, 0x00, 0x42, 0xcb, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x79, 0x76, 0x65,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x09, 0x50,
	0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x59, 0x56, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2f,
	0x6b, 0x79, 0x76, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x3b, 0x70, 0x6f, 0x6f, 0x6c, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x4b, 0x50, 0x58, 0xaa, 0x02, 0x11, 0x4b, 0x79, 0x76, 0x65, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x11, 0x4b, 0x79, 0x76, 0x65, 0x5c, 0x50,
	0x6f, 0x6f, 0x6c, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1d, 0x4b, 0x79,
	0x76, 0x65, 0x5c, 0x50, 0x6f, 0x6f, 0x6c, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x4b, 0x79,
	0x76, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6f, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kyve_pool_v1beta1_pool_proto_rawDescOnce sync.Once
	file_kyve_pool_v1beta1_pool_proto_rawDescData = file_kyve_pool_v1beta1_pool_proto_rawDesc
)

func file_kyve_pool_v1beta1_pool_proto_rawDescGZIP() []byte {
	file_kyve_pool_v1beta1_pool_proto_rawDescOnce.Do(func() {
		file_kyve_pool_v1beta1_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_kyve_pool_v1beta1_pool_proto_rawDescData)
	})
	return file_kyve_pool_v1beta1_pool_proto_rawDescData
}

var file_kyve_pool_v1beta1_pool_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kyve_pool_v1beta1_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kyve_pool_v1beta1_pool_proto_goTypes = []interface{}{
	(PoolStatus)(0),     // 0: kyve.pool.v1beta1.PoolStatus
	(*Protocol)(nil),    // 1: kyve.pool.v1beta1.Protocol
	(*UpgradePlan)(nil), // 2: kyve.pool.v1beta1.UpgradePlan
	(*Funder)(nil),      // 3: kyve.pool.v1beta1.Funder
	(*Pool)(nil),        // 4: kyve.pool.v1beta1.Pool
}
var file_kyve_pool_v1beta1_pool_proto_depIdxs = []int32{
	3, // 0: kyve.pool.v1beta1.Pool.funders:type_name -> kyve.pool.v1beta1.Funder
	1, // 1: kyve.pool.v1beta1.Pool.protocol:type_name -> kyve.pool.v1beta1.Protocol
	2, // 2: kyve.pool.v1beta1.Pool.upgrade_plan:type_name -> kyve.pool.v1beta1.UpgradePlan
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_kyve_pool_v1beta1_pool_proto_init() }
func file_kyve_pool_v1beta1_pool_proto_init() {
	if File_kyve_pool_v1beta1_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kyve_pool_v1beta1_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_pool_v1beta1_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_pool_v1beta1_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Funder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_pool_v1beta1_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kyve_pool_v1beta1_pool_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kyve_pool_v1beta1_pool_proto_goTypes,
		DependencyIndexes: file_kyve_pool_v1beta1_pool_proto_depIdxs,
		EnumInfos:         file_kyve_pool_v1beta1_pool_proto_enumTypes,
		MessageInfos:      file_kyve_pool_v1beta1_pool_proto_msgTypes,
	}.Build()
	File_kyve_pool_v1beta1_pool_proto = out.File
	file_kyve_pool_v1beta1_pool_proto_rawDesc = nil
	file_kyve_pool_v1beta1_pool_proto_goTypes = nil
	file_kyve_pool_v1beta1_pool_proto_depIdxs = nil
}
