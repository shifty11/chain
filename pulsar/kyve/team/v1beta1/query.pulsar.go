// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package teamv1beta1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_QueryTeamInfoRequest protoreflect.MessageDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamInfoRequest = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamInfoRequest")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamInfoRequest)(nil)

type fastReflection_QueryTeamInfoRequest QueryTeamInfoRequest

func (x *QueryTeamInfoRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamInfoRequest)(x)
}

func (x *QueryTeamInfoRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamInfoRequest_messageType fastReflection_QueryTeamInfoRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamInfoRequest_messageType{}

type fastReflection_QueryTeamInfoRequest_messageType struct{}

func (x fastReflection_QueryTeamInfoRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamInfoRequest)(nil)
}
func (x fastReflection_QueryTeamInfoRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamInfoRequest)
}
func (x fastReflection_QueryTeamInfoRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamInfoRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamInfoRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamInfoRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamInfoRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamInfoRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamInfoRequest) New() protoreflect.Message {
	return new(fastReflection_QueryTeamInfoRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamInfoRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamInfoRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamInfoRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamInfoRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamInfoRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamInfoRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamInfoRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamInfoRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamInfoRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamInfoRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamInfoRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamInfoRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamInfoRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamInfoRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamInfoRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamInfoResponse                             protoreflect.MessageDescriptor
	fd_QueryTeamInfoResponse_foundation_authority        protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_bcp_authority               protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_total_team_allocation       protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_issued_team_allocation      protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_available_team_allocation   protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_total_authority_rewards     protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_claimed_authority_rewards   protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_available_authority_rewards protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_total_account_rewards       protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_claimed_account_rewards     protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_available_account_rewards   protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_required_module_balance     protoreflect.FieldDescriptor
	fd_QueryTeamInfoResponse_team_module_balance         protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamInfoResponse = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamInfoResponse")
	fd_QueryTeamInfoResponse_foundation_authority = md_QueryTeamInfoResponse.Fields().ByName("foundation_authority")
	fd_QueryTeamInfoResponse_bcp_authority = md_QueryTeamInfoResponse.Fields().ByName("bcp_authority")
	fd_QueryTeamInfoResponse_total_team_allocation = md_QueryTeamInfoResponse.Fields().ByName("total_team_allocation")
	fd_QueryTeamInfoResponse_issued_team_allocation = md_QueryTeamInfoResponse.Fields().ByName("issued_team_allocation")
	fd_QueryTeamInfoResponse_available_team_allocation = md_QueryTeamInfoResponse.Fields().ByName("available_team_allocation")
	fd_QueryTeamInfoResponse_total_authority_rewards = md_QueryTeamInfoResponse.Fields().ByName("total_authority_rewards")
	fd_QueryTeamInfoResponse_claimed_authority_rewards = md_QueryTeamInfoResponse.Fields().ByName("claimed_authority_rewards")
	fd_QueryTeamInfoResponse_available_authority_rewards = md_QueryTeamInfoResponse.Fields().ByName("available_authority_rewards")
	fd_QueryTeamInfoResponse_total_account_rewards = md_QueryTeamInfoResponse.Fields().ByName("total_account_rewards")
	fd_QueryTeamInfoResponse_claimed_account_rewards = md_QueryTeamInfoResponse.Fields().ByName("claimed_account_rewards")
	fd_QueryTeamInfoResponse_available_account_rewards = md_QueryTeamInfoResponse.Fields().ByName("available_account_rewards")
	fd_QueryTeamInfoResponse_required_module_balance = md_QueryTeamInfoResponse.Fields().ByName("required_module_balance")
	fd_QueryTeamInfoResponse_team_module_balance = md_QueryTeamInfoResponse.Fields().ByName("team_module_balance")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamInfoResponse)(nil)

type fastReflection_QueryTeamInfoResponse QueryTeamInfoResponse

func (x *QueryTeamInfoResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamInfoResponse)(x)
}

func (x *QueryTeamInfoResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamInfoResponse_messageType fastReflection_QueryTeamInfoResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamInfoResponse_messageType{}

type fastReflection_QueryTeamInfoResponse_messageType struct{}

func (x fastReflection_QueryTeamInfoResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamInfoResponse)(nil)
}
func (x fastReflection_QueryTeamInfoResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamInfoResponse)
}
func (x fastReflection_QueryTeamInfoResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamInfoResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamInfoResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamInfoResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamInfoResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamInfoResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamInfoResponse) New() protoreflect.Message {
	return new(fastReflection_QueryTeamInfoResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamInfoResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamInfoResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamInfoResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FoundationAuthority != "" {
		value := protoreflect.ValueOfString(x.FoundationAuthority)
		if !f(fd_QueryTeamInfoResponse_foundation_authority, value) {
			return
		}
	}
	if x.BcpAuthority != "" {
		value := protoreflect.ValueOfString(x.BcpAuthority)
		if !f(fd_QueryTeamInfoResponse_bcp_authority, value) {
			return
		}
	}
	if x.TotalTeamAllocation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalTeamAllocation)
		if !f(fd_QueryTeamInfoResponse_total_team_allocation, value) {
			return
		}
	}
	if x.IssuedTeamAllocation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IssuedTeamAllocation)
		if !f(fd_QueryTeamInfoResponse_issued_team_allocation, value) {
			return
		}
	}
	if x.AvailableTeamAllocation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AvailableTeamAllocation)
		if !f(fd_QueryTeamInfoResponse_available_team_allocation, value) {
			return
		}
	}
	if x.TotalAuthorityRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalAuthorityRewards)
		if !f(fd_QueryTeamInfoResponse_total_authority_rewards, value) {
			return
		}
	}
	if x.ClaimedAuthorityRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ClaimedAuthorityRewards)
		if !f(fd_QueryTeamInfoResponse_claimed_authority_rewards, value) {
			return
		}
	}
	if x.AvailableAuthorityRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AvailableAuthorityRewards)
		if !f(fd_QueryTeamInfoResponse_available_authority_rewards, value) {
			return
		}
	}
	if x.TotalAccountRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalAccountRewards)
		if !f(fd_QueryTeamInfoResponse_total_account_rewards, value) {
			return
		}
	}
	if x.ClaimedAccountRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ClaimedAccountRewards)
		if !f(fd_QueryTeamInfoResponse_claimed_account_rewards, value) {
			return
		}
	}
	if x.AvailableAccountRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AvailableAccountRewards)
		if !f(fd_QueryTeamInfoResponse_available_account_rewards, value) {
			return
		}
	}
	if x.RequiredModuleBalance != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequiredModuleBalance)
		if !f(fd_QueryTeamInfoResponse_required_module_balance, value) {
			return
		}
	}
	if x.TeamModuleBalance != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TeamModuleBalance)
		if !f(fd_QueryTeamInfoResponse_team_module_balance, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamInfoResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamInfoResponse.foundation_authority":
		return x.FoundationAuthority != ""
	case "kyve.team.v1beta1.QueryTeamInfoResponse.bcp_authority":
		return x.BcpAuthority != ""
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_team_allocation":
		return x.TotalTeamAllocation != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.issued_team_allocation":
		return x.IssuedTeamAllocation != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_team_allocation":
		return x.AvailableTeamAllocation != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_authority_rewards":
		return x.TotalAuthorityRewards != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_authority_rewards":
		return x.ClaimedAuthorityRewards != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_authority_rewards":
		return x.AvailableAuthorityRewards != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_account_rewards":
		return x.TotalAccountRewards != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_account_rewards":
		return x.ClaimedAccountRewards != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_account_rewards":
		return x.AvailableAccountRewards != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.required_module_balance":
		return x.RequiredModuleBalance != uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.team_module_balance":
		return x.TeamModuleBalance != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamInfoResponse.foundation_authority":
		x.FoundationAuthority = ""
	case "kyve.team.v1beta1.QueryTeamInfoResponse.bcp_authority":
		x.BcpAuthority = ""
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_team_allocation":
		x.TotalTeamAllocation = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.issued_team_allocation":
		x.IssuedTeamAllocation = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_team_allocation":
		x.AvailableTeamAllocation = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_authority_rewards":
		x.TotalAuthorityRewards = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_authority_rewards":
		x.ClaimedAuthorityRewards = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_authority_rewards":
		x.AvailableAuthorityRewards = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_account_rewards":
		x.TotalAccountRewards = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_account_rewards":
		x.ClaimedAccountRewards = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_account_rewards":
		x.AvailableAccountRewards = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.required_module_balance":
		x.RequiredModuleBalance = uint64(0)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.team_module_balance":
		x.TeamModuleBalance = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamInfoResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamInfoResponse.foundation_authority":
		value := x.FoundationAuthority
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.bcp_authority":
		value := x.BcpAuthority
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_team_allocation":
		value := x.TotalTeamAllocation
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.issued_team_allocation":
		value := x.IssuedTeamAllocation
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_team_allocation":
		value := x.AvailableTeamAllocation
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_authority_rewards":
		value := x.TotalAuthorityRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_authority_rewards":
		value := x.ClaimedAuthorityRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_authority_rewards":
		value := x.AvailableAuthorityRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_account_rewards":
		value := x.TotalAccountRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_account_rewards":
		value := x.ClaimedAccountRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_account_rewards":
		value := x.AvailableAccountRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.required_module_balance":
		value := x.RequiredModuleBalance
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.team_module_balance":
		value := x.TeamModuleBalance
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamInfoResponse.foundation_authority":
		x.FoundationAuthority = value.Interface().(string)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.bcp_authority":
		x.BcpAuthority = value.Interface().(string)
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_team_allocation":
		x.TotalTeamAllocation = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.issued_team_allocation":
		x.IssuedTeamAllocation = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_team_allocation":
		x.AvailableTeamAllocation = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_authority_rewards":
		x.TotalAuthorityRewards = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_authority_rewards":
		x.ClaimedAuthorityRewards = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_authority_rewards":
		x.AvailableAuthorityRewards = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_account_rewards":
		x.TotalAccountRewards = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_account_rewards":
		x.ClaimedAccountRewards = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_account_rewards":
		x.AvailableAccountRewards = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.required_module_balance":
		x.RequiredModuleBalance = value.Uint()
	case "kyve.team.v1beta1.QueryTeamInfoResponse.team_module_balance":
		x.TeamModuleBalance = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamInfoResponse.foundation_authority":
		panic(fmt.Errorf("field foundation_authority of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.bcp_authority":
		panic(fmt.Errorf("field bcp_authority of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_team_allocation":
		panic(fmt.Errorf("field total_team_allocation of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.issued_team_allocation":
		panic(fmt.Errorf("field issued_team_allocation of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_team_allocation":
		panic(fmt.Errorf("field available_team_allocation of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_authority_rewards":
		panic(fmt.Errorf("field total_authority_rewards of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_authority_rewards":
		panic(fmt.Errorf("field claimed_authority_rewards of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_authority_rewards":
		panic(fmt.Errorf("field available_authority_rewards of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_account_rewards":
		panic(fmt.Errorf("field total_account_rewards of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_account_rewards":
		panic(fmt.Errorf("field claimed_account_rewards of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_account_rewards":
		panic(fmt.Errorf("field available_account_rewards of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.required_module_balance":
		panic(fmt.Errorf("field required_module_balance of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.team_module_balance":
		panic(fmt.Errorf("field team_module_balance of message kyve.team.v1beta1.QueryTeamInfoResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamInfoResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamInfoResponse.foundation_authority":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryTeamInfoResponse.bcp_authority":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_team_allocation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.issued_team_allocation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_team_allocation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_authority_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_authority_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_authority_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.total_account_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.claimed_account_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.available_account_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.required_module_balance":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamInfoResponse.team_module_balance":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamInfoResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamInfoResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamInfoResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamInfoResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamInfoResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamInfoResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamInfoResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamInfoResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamInfoResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.FoundationAuthority)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BcpAuthority)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TotalTeamAllocation != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalTeamAllocation))
		}
		if x.IssuedTeamAllocation != 0 {
			n += 1 + runtime.Sov(uint64(x.IssuedTeamAllocation))
		}
		if x.AvailableTeamAllocation != 0 {
			n += 1 + runtime.Sov(uint64(x.AvailableTeamAllocation))
		}
		if x.TotalAuthorityRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalAuthorityRewards))
		}
		if x.ClaimedAuthorityRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.ClaimedAuthorityRewards))
		}
		if x.AvailableAuthorityRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.AvailableAuthorityRewards))
		}
		if x.TotalAccountRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalAccountRewards))
		}
		if x.ClaimedAccountRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.ClaimedAccountRewards))
		}
		if x.AvailableAccountRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.AvailableAccountRewards))
		}
		if x.RequiredModuleBalance != 0 {
			n += 1 + runtime.Sov(uint64(x.RequiredModuleBalance))
		}
		if x.TeamModuleBalance != 0 {
			n += 1 + runtime.Sov(uint64(x.TeamModuleBalance))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamInfoResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TeamModuleBalance != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TeamModuleBalance))
			i--
			dAtA[i] = 0x68
		}
		if x.RequiredModuleBalance != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequiredModuleBalance))
			i--
			dAtA[i] = 0x60
		}
		if x.AvailableAccountRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AvailableAccountRewards))
			i--
			dAtA[i] = 0x58
		}
		if x.ClaimedAccountRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClaimedAccountRewards))
			i--
			dAtA[i] = 0x50
		}
		if x.TotalAccountRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalAccountRewards))
			i--
			dAtA[i] = 0x48
		}
		if x.AvailableAuthorityRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AvailableAuthorityRewards))
			i--
			dAtA[i] = 0x40
		}
		if x.ClaimedAuthorityRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClaimedAuthorityRewards))
			i--
			dAtA[i] = 0x38
		}
		if x.TotalAuthorityRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalAuthorityRewards))
			i--
			dAtA[i] = 0x30
		}
		if x.AvailableTeamAllocation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AvailableTeamAllocation))
			i--
			dAtA[i] = 0x28
		}
		if x.IssuedTeamAllocation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IssuedTeamAllocation))
			i--
			dAtA[i] = 0x20
		}
		if x.TotalTeamAllocation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalTeamAllocation))
			i--
			dAtA[i] = 0x18
		}
		if len(x.BcpAuthority) > 0 {
			i -= len(x.BcpAuthority)
			copy(dAtA[i:], x.BcpAuthority)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BcpAuthority)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.FoundationAuthority) > 0 {
			i -= len(x.FoundationAuthority)
			copy(dAtA[i:], x.FoundationAuthority)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FoundationAuthority)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamInfoResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamInfoResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FoundationAuthority", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FoundationAuthority = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BcpAuthority", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BcpAuthority = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalTeamAllocation", wireType)
				}
				x.TotalTeamAllocation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalTeamAllocation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IssuedTeamAllocation", wireType)
				}
				x.IssuedTeamAllocation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IssuedTeamAllocation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvailableTeamAllocation", wireType)
				}
				x.AvailableTeamAllocation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AvailableTeamAllocation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalAuthorityRewards", wireType)
				}
				x.TotalAuthorityRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalAuthorityRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedAuthorityRewards", wireType)
				}
				x.ClaimedAuthorityRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClaimedAuthorityRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvailableAuthorityRewards", wireType)
				}
				x.AvailableAuthorityRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AvailableAuthorityRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalAccountRewards", wireType)
				}
				x.TotalAccountRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalAccountRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedAccountRewards", wireType)
				}
				x.ClaimedAccountRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClaimedAccountRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvailableAccountRewards", wireType)
				}
				x.AvailableAccountRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AvailableAccountRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequiredModuleBalance", wireType)
				}
				x.RequiredModuleBalance = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequiredModuleBalance |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TeamModuleBalance", wireType)
				}
				x.TeamModuleBalance = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TeamModuleBalance |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamVestingAccountsRequest protoreflect.MessageDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingAccountsRequest = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingAccountsRequest")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingAccountsRequest)(nil)

type fastReflection_QueryTeamVestingAccountsRequest QueryTeamVestingAccountsRequest

func (x *QueryTeamVestingAccountsRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountsRequest)(x)
}

func (x *QueryTeamVestingAccountsRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingAccountsRequest_messageType fastReflection_QueryTeamVestingAccountsRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingAccountsRequest_messageType{}

type fastReflection_QueryTeamVestingAccountsRequest_messageType struct{}

func (x fastReflection_QueryTeamVestingAccountsRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountsRequest)(nil)
}
func (x fastReflection_QueryTeamVestingAccountsRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountsRequest)
}
func (x fastReflection_QueryTeamVestingAccountsRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountsRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountsRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingAccountsRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingAccountsRequest) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountsRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingAccountsRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingAccountsRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingAccountsRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingAccountsRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingAccountsRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingAccountsRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingAccountsRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingAccountsRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountsRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountsRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountsRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryTeamVestingAccountsResponse_1_list)(nil)

type _QueryTeamVestingAccountsResponse_1_list struct {
	list *[]*TeamVestingAccount
}

func (x *_QueryTeamVestingAccountsResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryTeamVestingAccountsResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryTeamVestingAccountsResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TeamVestingAccount)
	(*x.list)[i] = concreteValue
}

func (x *_QueryTeamVestingAccountsResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TeamVestingAccount)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryTeamVestingAccountsResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(TeamVestingAccount)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryTeamVestingAccountsResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryTeamVestingAccountsResponse_1_list) NewElement() protoreflect.Value {
	v := new(TeamVestingAccount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryTeamVestingAccountsResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryTeamVestingAccountsResponse          protoreflect.MessageDescriptor
	fd_QueryTeamVestingAccountsResponse_accounts protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingAccountsResponse = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingAccountsResponse")
	fd_QueryTeamVestingAccountsResponse_accounts = md_QueryTeamVestingAccountsResponse.Fields().ByName("accounts")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingAccountsResponse)(nil)

type fastReflection_QueryTeamVestingAccountsResponse QueryTeamVestingAccountsResponse

func (x *QueryTeamVestingAccountsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountsResponse)(x)
}

func (x *QueryTeamVestingAccountsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingAccountsResponse_messageType fastReflection_QueryTeamVestingAccountsResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingAccountsResponse_messageType{}

type fastReflection_QueryTeamVestingAccountsResponse_messageType struct{}

func (x fastReflection_QueryTeamVestingAccountsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountsResponse)(nil)
}
func (x fastReflection_QueryTeamVestingAccountsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountsResponse)
}
func (x fastReflection_QueryTeamVestingAccountsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingAccountsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingAccountsResponse) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingAccountsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Accounts) != 0 {
		value := protoreflect.ValueOfList(&_QueryTeamVestingAccountsResponse_1_list{list: &x.Accounts})
		if !f(fd_QueryTeamVestingAccountsResponse_accounts, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountsResponse.accounts":
		return len(x.Accounts) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountsResponse.accounts":
		x.Accounts = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountsResponse.accounts":
		if len(x.Accounts) == 0 {
			return protoreflect.ValueOfList(&_QueryTeamVestingAccountsResponse_1_list{})
		}
		listValue := &_QueryTeamVestingAccountsResponse_1_list{list: &x.Accounts}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountsResponse.accounts":
		lv := value.List()
		clv := lv.(*_QueryTeamVestingAccountsResponse_1_list)
		x.Accounts = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountsResponse.accounts":
		if x.Accounts == nil {
			x.Accounts = []*TeamVestingAccount{}
		}
		value := &_QueryTeamVestingAccountsResponse_1_list{list: &x.Accounts}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingAccountsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountsResponse.accounts":
		list := []*TeamVestingAccount{}
		return protoreflect.ValueOfList(&_QueryTeamVestingAccountsResponse_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountsResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingAccountsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingAccountsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingAccountsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingAccountsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingAccountsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingAccountsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Accounts) > 0 {
			for _, e := range x.Accounts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Accounts) > 0 {
			for iNdEx := len(x.Accounts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Accounts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Accounts = append(x.Accounts, &TeamVestingAccount{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Accounts[len(x.Accounts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamVestingAccountRequest    protoreflect.MessageDescriptor
	fd_QueryTeamVestingAccountRequest_id protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingAccountRequest = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingAccountRequest")
	fd_QueryTeamVestingAccountRequest_id = md_QueryTeamVestingAccountRequest.Fields().ByName("id")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingAccountRequest)(nil)

type fastReflection_QueryTeamVestingAccountRequest QueryTeamVestingAccountRequest

func (x *QueryTeamVestingAccountRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountRequest)(x)
}

func (x *QueryTeamVestingAccountRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingAccountRequest_messageType fastReflection_QueryTeamVestingAccountRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingAccountRequest_messageType{}

type fastReflection_QueryTeamVestingAccountRequest_messageType struct{}

func (x fastReflection_QueryTeamVestingAccountRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountRequest)(nil)
}
func (x fastReflection_QueryTeamVestingAccountRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountRequest)
}
func (x fastReflection_QueryTeamVestingAccountRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingAccountRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingAccountRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingAccountRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingAccountRequest) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingAccountRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingAccountRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingAccountRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_QueryTeamVestingAccountRequest_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingAccountRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountRequest.id":
		return x.Id != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountRequest.id":
		x.Id = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingAccountRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountRequest.id":
		x.Id = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountRequest.id":
		panic(fmt.Errorf("field id of message kyve.team.v1beta1.QueryTeamVestingAccountRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingAccountRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingAccountRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingAccountRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingAccountRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingAccountRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingAccountRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingAccountRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamVestingAccountResponse         protoreflect.MessageDescriptor
	fd_QueryTeamVestingAccountResponse_account protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingAccountResponse = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingAccountResponse")
	fd_QueryTeamVestingAccountResponse_account = md_QueryTeamVestingAccountResponse.Fields().ByName("account")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingAccountResponse)(nil)

type fastReflection_QueryTeamVestingAccountResponse QueryTeamVestingAccountResponse

func (x *QueryTeamVestingAccountResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountResponse)(x)
}

func (x *QueryTeamVestingAccountResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingAccountResponse_messageType fastReflection_QueryTeamVestingAccountResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingAccountResponse_messageType{}

type fastReflection_QueryTeamVestingAccountResponse_messageType struct{}

func (x fastReflection_QueryTeamVestingAccountResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingAccountResponse)(nil)
}
func (x fastReflection_QueryTeamVestingAccountResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountResponse)
}
func (x fastReflection_QueryTeamVestingAccountResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingAccountResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingAccountResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingAccountResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingAccountResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingAccountResponse) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingAccountResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingAccountResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingAccountResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingAccountResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Account != nil {
		value := protoreflect.ValueOfMessage(x.Account.ProtoReflect())
		if !f(fd_QueryTeamVestingAccountResponse_account, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingAccountResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountResponse.account":
		return x.Account != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountResponse.account":
		x.Account = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingAccountResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountResponse.account":
		value := x.Account
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountResponse.account":
		x.Account = value.Message().Interface().(*TeamVestingAccount)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountResponse.account":
		if x.Account == nil {
			x.Account = new(TeamVestingAccount)
		}
		return protoreflect.ValueOfMessage(x.Account.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingAccountResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingAccountResponse.account":
		m := new(TeamVestingAccount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingAccountResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingAccountResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingAccountResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingAccountResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingAccountResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingAccountResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingAccountResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingAccountResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingAccountResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Account != nil {
			l = options.Size(x.Account)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Account != nil {
			encoded, err := options.Marshal(x.Account)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingAccountResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Account == nil {
					x.Account = &TeamVestingAccount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Account); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamVestingStatusRequest    protoreflect.MessageDescriptor
	fd_QueryTeamVestingStatusRequest_id protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingStatusRequest = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingStatusRequest")
	fd_QueryTeamVestingStatusRequest_id = md_QueryTeamVestingStatusRequest.Fields().ByName("id")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingStatusRequest)(nil)

type fastReflection_QueryTeamVestingStatusRequest QueryTeamVestingStatusRequest

func (x *QueryTeamVestingStatusRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusRequest)(x)
}

func (x *QueryTeamVestingStatusRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingStatusRequest_messageType fastReflection_QueryTeamVestingStatusRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingStatusRequest_messageType{}

type fastReflection_QueryTeamVestingStatusRequest_messageType struct{}

func (x fastReflection_QueryTeamVestingStatusRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusRequest)(nil)
}
func (x fastReflection_QueryTeamVestingStatusRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusRequest)
}
func (x fastReflection_QueryTeamVestingStatusRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingStatusRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingStatusRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingStatusRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingStatusRequest) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingStatusRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingStatusRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingStatusRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_QueryTeamVestingStatusRequest_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingStatusRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusRequest.id":
		return x.Id != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusRequest.id":
		x.Id = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingStatusRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusRequest.id":
		x.Id = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusRequest.id":
		panic(fmt.Errorf("field id of message kyve.team.v1beta1.QueryTeamVestingStatusRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingStatusRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingStatusRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingStatusRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingStatusRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingStatusRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingStatusRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingStatusRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamVestingStatusResponse              protoreflect.MessageDescriptor
	fd_QueryTeamVestingStatusResponse_request_date protoreflect.FieldDescriptor
	fd_QueryTeamVestingStatusResponse_plan         protoreflect.FieldDescriptor
	fd_QueryTeamVestingStatusResponse_status       protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingStatusResponse = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingStatusResponse")
	fd_QueryTeamVestingStatusResponse_request_date = md_QueryTeamVestingStatusResponse.Fields().ByName("request_date")
	fd_QueryTeamVestingStatusResponse_plan = md_QueryTeamVestingStatusResponse.Fields().ByName("plan")
	fd_QueryTeamVestingStatusResponse_status = md_QueryTeamVestingStatusResponse.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingStatusResponse)(nil)

type fastReflection_QueryTeamVestingStatusResponse QueryTeamVestingStatusResponse

func (x *QueryTeamVestingStatusResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusResponse)(x)
}

func (x *QueryTeamVestingStatusResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingStatusResponse_messageType fastReflection_QueryTeamVestingStatusResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingStatusResponse_messageType{}

type fastReflection_QueryTeamVestingStatusResponse_messageType struct{}

func (x fastReflection_QueryTeamVestingStatusResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusResponse)(nil)
}
func (x fastReflection_QueryTeamVestingStatusResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusResponse)
}
func (x fastReflection_QueryTeamVestingStatusResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingStatusResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingStatusResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingStatusResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingStatusResponse) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingStatusResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingStatusResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingStatusResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestDate != "" {
		value := protoreflect.ValueOfString(x.RequestDate)
		if !f(fd_QueryTeamVestingStatusResponse_request_date, value) {
			return
		}
	}
	if x.Plan != nil {
		value := protoreflect.ValueOfMessage(x.Plan.ProtoReflect())
		if !f(fd_QueryTeamVestingStatusResponse_plan, value) {
			return
		}
	}
	if x.Status != nil {
		value := protoreflect.ValueOfMessage(x.Status.ProtoReflect())
		if !f(fd_QueryTeamVestingStatusResponse_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingStatusResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.request_date":
		return x.RequestDate != ""
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.plan":
		return x.Plan != nil
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.status":
		return x.Status != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.request_date":
		x.RequestDate = ""
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.plan":
		x.Plan = nil
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.status":
		x.Status = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingStatusResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.request_date":
		value := x.RequestDate
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.plan":
		value := x.Plan
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.status":
		value := x.Status
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.request_date":
		x.RequestDate = value.Interface().(string)
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.plan":
		x.Plan = value.Message().Interface().(*QueryVestingPlan)
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.status":
		x.Status = value.Message().Interface().(*QueryVestingStatus)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.plan":
		if x.Plan == nil {
			x.Plan = new(QueryVestingPlan)
		}
		return protoreflect.ValueOfMessage(x.Plan.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.status":
		if x.Status == nil {
			x.Status = new(QueryVestingStatus)
		}
		return protoreflect.ValueOfMessage(x.Status.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.request_date":
		panic(fmt.Errorf("field request_date of message kyve.team.v1beta1.QueryTeamVestingStatusResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingStatusResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.request_date":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.plan":
		m := new(QueryVestingPlan)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusResponse.status":
		m := new(QueryVestingStatus)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingStatusResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingStatusResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingStatusResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingStatusResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingStatusResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingStatusResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RequestDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Plan != nil {
			l = options.Size(x.Plan)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != nil {
			l = options.Size(x.Status)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != nil {
			encoded, err := options.Marshal(x.Status)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Plan != nil {
			encoded, err := options.Marshal(x.Plan)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RequestDate) > 0 {
			i -= len(x.RequestDate)
			copy(dAtA[i:], x.RequestDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestDate)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Plan == nil {
					x.Plan = &QueryVestingPlan{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Plan); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Status == nil {
					x.Status = &QueryVestingStatus{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Status); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamVestingStatusByTimeRequest      protoreflect.MessageDescriptor
	fd_QueryTeamVestingStatusByTimeRequest_id   protoreflect.FieldDescriptor
	fd_QueryTeamVestingStatusByTimeRequest_time protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingStatusByTimeRequest = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingStatusByTimeRequest")
	fd_QueryTeamVestingStatusByTimeRequest_id = md_QueryTeamVestingStatusByTimeRequest.Fields().ByName("id")
	fd_QueryTeamVestingStatusByTimeRequest_time = md_QueryTeamVestingStatusByTimeRequest.Fields().ByName("time")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingStatusByTimeRequest)(nil)

type fastReflection_QueryTeamVestingStatusByTimeRequest QueryTeamVestingStatusByTimeRequest

func (x *QueryTeamVestingStatusByTimeRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusByTimeRequest)(x)
}

func (x *QueryTeamVestingStatusByTimeRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingStatusByTimeRequest_messageType fastReflection_QueryTeamVestingStatusByTimeRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingStatusByTimeRequest_messageType{}

type fastReflection_QueryTeamVestingStatusByTimeRequest_messageType struct{}

func (x fastReflection_QueryTeamVestingStatusByTimeRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusByTimeRequest)(nil)
}
func (x fastReflection_QueryTeamVestingStatusByTimeRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusByTimeRequest)
}
func (x fastReflection_QueryTeamVestingStatusByTimeRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusByTimeRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusByTimeRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingStatusByTimeRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusByTimeRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingStatusByTimeRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_QueryTeamVestingStatusByTimeRequest_id, value) {
			return
		}
	}
	if x.Time != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Time)
		if !f(fd_QueryTeamVestingStatusByTimeRequest_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.id":
		return x.Id != uint64(0)
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.time":
		return x.Time != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.id":
		x.Id = uint64(0)
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.time":
		x.Time = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.time":
		value := x.Time
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.id":
		x.Id = value.Uint()
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.time":
		x.Time = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.id":
		panic(fmt.Errorf("field id of message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest is not mutable"))
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.time":
		panic(fmt.Errorf("field time of message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest.time":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingStatusByTimeRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingStatusByTimeRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Time != 0 {
			n += 1 + runtime.Sov(uint64(x.Time))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusByTimeRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Time != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Time))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusByTimeRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusByTimeRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusByTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
				}
				x.Time = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Time |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryTeamVestingStatusByTimeResponse              protoreflect.MessageDescriptor
	fd_QueryTeamVestingStatusByTimeResponse_request_date protoreflect.FieldDescriptor
	fd_QueryTeamVestingStatusByTimeResponse_plan         protoreflect.FieldDescriptor
	fd_QueryTeamVestingStatusByTimeResponse_status       protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryTeamVestingStatusByTimeResponse = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryTeamVestingStatusByTimeResponse")
	fd_QueryTeamVestingStatusByTimeResponse_request_date = md_QueryTeamVestingStatusByTimeResponse.Fields().ByName("request_date")
	fd_QueryTeamVestingStatusByTimeResponse_plan = md_QueryTeamVestingStatusByTimeResponse.Fields().ByName("plan")
	fd_QueryTeamVestingStatusByTimeResponse_status = md_QueryTeamVestingStatusByTimeResponse.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_QueryTeamVestingStatusByTimeResponse)(nil)

type fastReflection_QueryTeamVestingStatusByTimeResponse QueryTeamVestingStatusByTimeResponse

func (x *QueryTeamVestingStatusByTimeResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusByTimeResponse)(x)
}

func (x *QueryTeamVestingStatusByTimeResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryTeamVestingStatusByTimeResponse_messageType fastReflection_QueryTeamVestingStatusByTimeResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryTeamVestingStatusByTimeResponse_messageType{}

type fastReflection_QueryTeamVestingStatusByTimeResponse_messageType struct{}

func (x fastReflection_QueryTeamVestingStatusByTimeResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryTeamVestingStatusByTimeResponse)(nil)
}
func (x fastReflection_QueryTeamVestingStatusByTimeResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusByTimeResponse)
}
func (x fastReflection_QueryTeamVestingStatusByTimeResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusByTimeResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryTeamVestingStatusByTimeResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryTeamVestingStatusByTimeResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) New() protoreflect.Message {
	return new(fastReflection_QueryTeamVestingStatusByTimeResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryTeamVestingStatusByTimeResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestDate != "" {
		value := protoreflect.ValueOfString(x.RequestDate)
		if !f(fd_QueryTeamVestingStatusByTimeResponse_request_date, value) {
			return
		}
	}
	if x.Plan != nil {
		value := protoreflect.ValueOfMessage(x.Plan.ProtoReflect())
		if !f(fd_QueryTeamVestingStatusByTimeResponse_plan, value) {
			return
		}
	}
	if x.Status != nil {
		value := protoreflect.ValueOfMessage(x.Status.ProtoReflect())
		if !f(fd_QueryTeamVestingStatusByTimeResponse_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.request_date":
		return x.RequestDate != ""
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.plan":
		return x.Plan != nil
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.status":
		return x.Status != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.request_date":
		x.RequestDate = ""
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.plan":
		x.Plan = nil
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.status":
		x.Status = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.request_date":
		value := x.RequestDate
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.plan":
		value := x.Plan
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.status":
		value := x.Status
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.request_date":
		x.RequestDate = value.Interface().(string)
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.plan":
		x.Plan = value.Message().Interface().(*QueryVestingPlan)
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.status":
		x.Status = value.Message().Interface().(*QueryVestingStatus)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.plan":
		if x.Plan == nil {
			x.Plan = new(QueryVestingPlan)
		}
		return protoreflect.ValueOfMessage(x.Plan.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.status":
		if x.Status == nil {
			x.Status = new(QueryVestingStatus)
		}
		return protoreflect.ValueOfMessage(x.Status.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.request_date":
		panic(fmt.Errorf("field request_date of message kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.request_date":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.plan":
		m := new(QueryVestingPlan)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.status":
		m := new(QueryVestingStatus)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryTeamVestingStatusByTimeResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryTeamVestingStatusByTimeResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RequestDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Plan != nil {
			l = options.Size(x.Plan)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != nil {
			l = options.Size(x.Status)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusByTimeResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != nil {
			encoded, err := options.Marshal(x.Status)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Plan != nil {
			encoded, err := options.Marshal(x.Plan)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RequestDate) > 0 {
			i -= len(x.RequestDate)
			copy(dAtA[i:], x.RequestDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestDate)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryTeamVestingStatusByTimeResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusByTimeResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryTeamVestingStatusByTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Plan == nil {
					x.Plan = &QueryVestingPlan{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Plan); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Status == nil {
					x.Status = &QueryVestingStatus{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Status); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryVestingStatus                           protoreflect.MessageDescriptor
	fd_QueryVestingStatus_total_vested_amount       protoreflect.FieldDescriptor
	fd_QueryVestingStatus_total_unlocked_amount     protoreflect.FieldDescriptor
	fd_QueryVestingStatus_current_claimable_amount  protoreflect.FieldDescriptor
	fd_QueryVestingStatus_locked_vested_amount      protoreflect.FieldDescriptor
	fd_QueryVestingStatus_remaining_unvested_amount protoreflect.FieldDescriptor
	fd_QueryVestingStatus_claimed_amount            protoreflect.FieldDescriptor
	fd_QueryVestingStatus_total_rewards             protoreflect.FieldDescriptor
	fd_QueryVestingStatus_claimed_rewards           protoreflect.FieldDescriptor
	fd_QueryVestingStatus_available_rewards         protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryVestingStatus = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryVestingStatus")
	fd_QueryVestingStatus_total_vested_amount = md_QueryVestingStatus.Fields().ByName("total_vested_amount")
	fd_QueryVestingStatus_total_unlocked_amount = md_QueryVestingStatus.Fields().ByName("total_unlocked_amount")
	fd_QueryVestingStatus_current_claimable_amount = md_QueryVestingStatus.Fields().ByName("current_claimable_amount")
	fd_QueryVestingStatus_locked_vested_amount = md_QueryVestingStatus.Fields().ByName("locked_vested_amount")
	fd_QueryVestingStatus_remaining_unvested_amount = md_QueryVestingStatus.Fields().ByName("remaining_unvested_amount")
	fd_QueryVestingStatus_claimed_amount = md_QueryVestingStatus.Fields().ByName("claimed_amount")
	fd_QueryVestingStatus_total_rewards = md_QueryVestingStatus.Fields().ByName("total_rewards")
	fd_QueryVestingStatus_claimed_rewards = md_QueryVestingStatus.Fields().ByName("claimed_rewards")
	fd_QueryVestingStatus_available_rewards = md_QueryVestingStatus.Fields().ByName("available_rewards")
}

var _ protoreflect.Message = (*fastReflection_QueryVestingStatus)(nil)

type fastReflection_QueryVestingStatus QueryVestingStatus

func (x *QueryVestingStatus) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryVestingStatus)(x)
}

func (x *QueryVestingStatus) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryVestingStatus_messageType fastReflection_QueryVestingStatus_messageType
var _ protoreflect.MessageType = fastReflection_QueryVestingStatus_messageType{}

type fastReflection_QueryVestingStatus_messageType struct{}

func (x fastReflection_QueryVestingStatus_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryVestingStatus)(nil)
}
func (x fastReflection_QueryVestingStatus_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryVestingStatus)
}
func (x fastReflection_QueryVestingStatus_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVestingStatus
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryVestingStatus) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVestingStatus
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryVestingStatus) Type() protoreflect.MessageType {
	return _fastReflection_QueryVestingStatus_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryVestingStatus) New() protoreflect.Message {
	return new(fastReflection_QueryVestingStatus)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryVestingStatus) Interface() protoreflect.ProtoMessage {
	return (*QueryVestingStatus)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryVestingStatus) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalVestedAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalVestedAmount)
		if !f(fd_QueryVestingStatus_total_vested_amount, value) {
			return
		}
	}
	if x.TotalUnlockedAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalUnlockedAmount)
		if !f(fd_QueryVestingStatus_total_unlocked_amount, value) {
			return
		}
	}
	if x.CurrentClaimableAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CurrentClaimableAmount)
		if !f(fd_QueryVestingStatus_current_claimable_amount, value) {
			return
		}
	}
	if x.LockedVestedAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LockedVestedAmount)
		if !f(fd_QueryVestingStatus_locked_vested_amount, value) {
			return
		}
	}
	if x.RemainingUnvestedAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RemainingUnvestedAmount)
		if !f(fd_QueryVestingStatus_remaining_unvested_amount, value) {
			return
		}
	}
	if x.ClaimedAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ClaimedAmount)
		if !f(fd_QueryVestingStatus_claimed_amount, value) {
			return
		}
	}
	if x.TotalRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalRewards)
		if !f(fd_QueryVestingStatus_total_rewards, value) {
			return
		}
	}
	if x.ClaimedRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ClaimedRewards)
		if !f(fd_QueryVestingStatus_claimed_rewards, value) {
			return
		}
	}
	if x.AvailableRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AvailableRewards)
		if !f(fd_QueryVestingStatus_available_rewards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryVestingStatus) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingStatus.total_vested_amount":
		return x.TotalVestedAmount != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.total_unlocked_amount":
		return x.TotalUnlockedAmount != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.current_claimable_amount":
		return x.CurrentClaimableAmount != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.locked_vested_amount":
		return x.LockedVestedAmount != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.remaining_unvested_amount":
		return x.RemainingUnvestedAmount != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_amount":
		return x.ClaimedAmount != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.total_rewards":
		return x.TotalRewards != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_rewards":
		return x.ClaimedRewards != uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.available_rewards":
		return x.AvailableRewards != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingStatus"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingStatus does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingStatus) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingStatus.total_vested_amount":
		x.TotalVestedAmount = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.total_unlocked_amount":
		x.TotalUnlockedAmount = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.current_claimable_amount":
		x.CurrentClaimableAmount = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.locked_vested_amount":
		x.LockedVestedAmount = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.remaining_unvested_amount":
		x.RemainingUnvestedAmount = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_amount":
		x.ClaimedAmount = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.total_rewards":
		x.TotalRewards = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_rewards":
		x.ClaimedRewards = uint64(0)
	case "kyve.team.v1beta1.QueryVestingStatus.available_rewards":
		x.AvailableRewards = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingStatus"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingStatus does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryVestingStatus) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryVestingStatus.total_vested_amount":
		value := x.TotalVestedAmount
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.total_unlocked_amount":
		value := x.TotalUnlockedAmount
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.current_claimable_amount":
		value := x.CurrentClaimableAmount
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.locked_vested_amount":
		value := x.LockedVestedAmount
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.remaining_unvested_amount":
		value := x.RemainingUnvestedAmount
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_amount":
		value := x.ClaimedAmount
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.total_rewards":
		value := x.TotalRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_rewards":
		value := x.ClaimedRewards
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingStatus.available_rewards":
		value := x.AvailableRewards
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingStatus"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingStatus does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingStatus) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingStatus.total_vested_amount":
		x.TotalVestedAmount = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.total_unlocked_amount":
		x.TotalUnlockedAmount = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.current_claimable_amount":
		x.CurrentClaimableAmount = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.locked_vested_amount":
		x.LockedVestedAmount = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.remaining_unvested_amount":
		x.RemainingUnvestedAmount = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_amount":
		x.ClaimedAmount = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.total_rewards":
		x.TotalRewards = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_rewards":
		x.ClaimedRewards = value.Uint()
	case "kyve.team.v1beta1.QueryVestingStatus.available_rewards":
		x.AvailableRewards = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingStatus"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingStatus does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingStatus) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingStatus.total_vested_amount":
		panic(fmt.Errorf("field total_vested_amount of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.total_unlocked_amount":
		panic(fmt.Errorf("field total_unlocked_amount of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.current_claimable_amount":
		panic(fmt.Errorf("field current_claimable_amount of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.locked_vested_amount":
		panic(fmt.Errorf("field locked_vested_amount of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.remaining_unvested_amount":
		panic(fmt.Errorf("field remaining_unvested_amount of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_amount":
		panic(fmt.Errorf("field claimed_amount of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.total_rewards":
		panic(fmt.Errorf("field total_rewards of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_rewards":
		panic(fmt.Errorf("field claimed_rewards of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	case "kyve.team.v1beta1.QueryVestingStatus.available_rewards":
		panic(fmt.Errorf("field available_rewards of message kyve.team.v1beta1.QueryVestingStatus is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingStatus"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingStatus does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryVestingStatus) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingStatus.total_vested_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.total_unlocked_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.current_claimable_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.locked_vested_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.remaining_unvested_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.total_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.claimed_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingStatus.available_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingStatus"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingStatus does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryVestingStatus) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryVestingStatus", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryVestingStatus) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingStatus) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryVestingStatus) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryVestingStatus) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryVestingStatus)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TotalVestedAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalVestedAmount))
		}
		if x.TotalUnlockedAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalUnlockedAmount))
		}
		if x.CurrentClaimableAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentClaimableAmount))
		}
		if x.LockedVestedAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.LockedVestedAmount))
		}
		if x.RemainingUnvestedAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.RemainingUnvestedAmount))
		}
		if x.ClaimedAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.ClaimedAmount))
		}
		if x.TotalRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalRewards))
		}
		if x.ClaimedRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.ClaimedRewards))
		}
		if x.AvailableRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.AvailableRewards))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryVestingStatus)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AvailableRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AvailableRewards))
			i--
			dAtA[i] = 0x48
		}
		if x.ClaimedRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClaimedRewards))
			i--
			dAtA[i] = 0x40
		}
		if x.TotalRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalRewards))
			i--
			dAtA[i] = 0x38
		}
		if x.ClaimedAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClaimedAmount))
			i--
			dAtA[i] = 0x30
		}
		if x.RemainingUnvestedAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RemainingUnvestedAmount))
			i--
			dAtA[i] = 0x28
		}
		if x.LockedVestedAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LockedVestedAmount))
			i--
			dAtA[i] = 0x20
		}
		if x.CurrentClaimableAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentClaimableAmount))
			i--
			dAtA[i] = 0x18
		}
		if x.TotalUnlockedAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalUnlockedAmount))
			i--
			dAtA[i] = 0x10
		}
		if x.TotalVestedAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalVestedAmount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryVestingStatus)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVestingStatus: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVestingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalVestedAmount", wireType)
				}
				x.TotalVestedAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalVestedAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalUnlockedAmount", wireType)
				}
				x.TotalUnlockedAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalUnlockedAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentClaimableAmount", wireType)
				}
				x.CurrentClaimableAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentClaimableAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LockedVestedAmount", wireType)
				}
				x.LockedVestedAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LockedVestedAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemainingUnvestedAmount", wireType)
				}
				x.RemainingUnvestedAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RemainingUnvestedAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
				}
				x.ClaimedAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClaimedAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
				}
				x.TotalRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedRewards", wireType)
				}
				x.ClaimedRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClaimedRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvailableRewards", wireType)
				}
				x.AvailableRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AvailableRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryVestingPlan                        protoreflect.MessageDescriptor
	fd_QueryVestingPlan_commencement           protoreflect.FieldDescriptor
	fd_QueryVestingPlan_token_vesting_start    protoreflect.FieldDescriptor
	fd_QueryVestingPlan_token_vesting_finished protoreflect.FieldDescriptor
	fd_QueryVestingPlan_token_unlock_start     protoreflect.FieldDescriptor
	fd_QueryVestingPlan_token_unlock_finished  protoreflect.FieldDescriptor
	fd_QueryVestingPlan_clawback               protoreflect.FieldDescriptor
	fd_QueryVestingPlan_clawback_amount        protoreflect.FieldDescriptor
	fd_QueryVestingPlan_maximum_vesting_amount protoreflect.FieldDescriptor
)

func init() {
	file_kyve_team_v1beta1_query_proto_init()
	md_QueryVestingPlan = File_kyve_team_v1beta1_query_proto.Messages().ByName("QueryVestingPlan")
	fd_QueryVestingPlan_commencement = md_QueryVestingPlan.Fields().ByName("commencement")
	fd_QueryVestingPlan_token_vesting_start = md_QueryVestingPlan.Fields().ByName("token_vesting_start")
	fd_QueryVestingPlan_token_vesting_finished = md_QueryVestingPlan.Fields().ByName("token_vesting_finished")
	fd_QueryVestingPlan_token_unlock_start = md_QueryVestingPlan.Fields().ByName("token_unlock_start")
	fd_QueryVestingPlan_token_unlock_finished = md_QueryVestingPlan.Fields().ByName("token_unlock_finished")
	fd_QueryVestingPlan_clawback = md_QueryVestingPlan.Fields().ByName("clawback")
	fd_QueryVestingPlan_clawback_amount = md_QueryVestingPlan.Fields().ByName("clawback_amount")
	fd_QueryVestingPlan_maximum_vesting_amount = md_QueryVestingPlan.Fields().ByName("maximum_vesting_amount")
}

var _ protoreflect.Message = (*fastReflection_QueryVestingPlan)(nil)

type fastReflection_QueryVestingPlan QueryVestingPlan

func (x *QueryVestingPlan) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryVestingPlan)(x)
}

func (x *QueryVestingPlan) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_team_v1beta1_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryVestingPlan_messageType fastReflection_QueryVestingPlan_messageType
var _ protoreflect.MessageType = fastReflection_QueryVestingPlan_messageType{}

type fastReflection_QueryVestingPlan_messageType struct{}

func (x fastReflection_QueryVestingPlan_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryVestingPlan)(nil)
}
func (x fastReflection_QueryVestingPlan_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryVestingPlan)
}
func (x fastReflection_QueryVestingPlan_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVestingPlan
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryVestingPlan) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVestingPlan
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryVestingPlan) Type() protoreflect.MessageType {
	return _fastReflection_QueryVestingPlan_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryVestingPlan) New() protoreflect.Message {
	return new(fastReflection_QueryVestingPlan)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryVestingPlan) Interface() protoreflect.ProtoMessage {
	return (*QueryVestingPlan)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryVestingPlan) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Commencement != "" {
		value := protoreflect.ValueOfString(x.Commencement)
		if !f(fd_QueryVestingPlan_commencement, value) {
			return
		}
	}
	if x.TokenVestingStart != "" {
		value := protoreflect.ValueOfString(x.TokenVestingStart)
		if !f(fd_QueryVestingPlan_token_vesting_start, value) {
			return
		}
	}
	if x.TokenVestingFinished != "" {
		value := protoreflect.ValueOfString(x.TokenVestingFinished)
		if !f(fd_QueryVestingPlan_token_vesting_finished, value) {
			return
		}
	}
	if x.TokenUnlockStart != "" {
		value := protoreflect.ValueOfString(x.TokenUnlockStart)
		if !f(fd_QueryVestingPlan_token_unlock_start, value) {
			return
		}
	}
	if x.TokenUnlockFinished != "" {
		value := protoreflect.ValueOfString(x.TokenUnlockFinished)
		if !f(fd_QueryVestingPlan_token_unlock_finished, value) {
			return
		}
	}
	if x.Clawback != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Clawback)
		if !f(fd_QueryVestingPlan_clawback, value) {
			return
		}
	}
	if x.ClawbackAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ClawbackAmount)
		if !f(fd_QueryVestingPlan_clawback_amount, value) {
			return
		}
	}
	if x.MaximumVestingAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaximumVestingAmount)
		if !f(fd_QueryVestingPlan_maximum_vesting_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryVestingPlan) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingPlan.commencement":
		return x.Commencement != ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_start":
		return x.TokenVestingStart != ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_finished":
		return x.TokenVestingFinished != ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_start":
		return x.TokenUnlockStart != ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_finished":
		return x.TokenUnlockFinished != ""
	case "kyve.team.v1beta1.QueryVestingPlan.clawback":
		return x.Clawback != uint64(0)
	case "kyve.team.v1beta1.QueryVestingPlan.clawback_amount":
		return x.ClawbackAmount != uint64(0)
	case "kyve.team.v1beta1.QueryVestingPlan.maximum_vesting_amount":
		return x.MaximumVestingAmount != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingPlan"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingPlan does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingPlan) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingPlan.commencement":
		x.Commencement = ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_start":
		x.TokenVestingStart = ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_finished":
		x.TokenVestingFinished = ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_start":
		x.TokenUnlockStart = ""
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_finished":
		x.TokenUnlockFinished = ""
	case "kyve.team.v1beta1.QueryVestingPlan.clawback":
		x.Clawback = uint64(0)
	case "kyve.team.v1beta1.QueryVestingPlan.clawback_amount":
		x.ClawbackAmount = uint64(0)
	case "kyve.team.v1beta1.QueryVestingPlan.maximum_vesting_amount":
		x.MaximumVestingAmount = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingPlan"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingPlan does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryVestingPlan) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.team.v1beta1.QueryVestingPlan.commencement":
		value := x.Commencement
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_start":
		value := x.TokenVestingStart
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_finished":
		value := x.TokenVestingFinished
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_start":
		value := x.TokenUnlockStart
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_finished":
		value := x.TokenUnlockFinished
		return protoreflect.ValueOfString(value)
	case "kyve.team.v1beta1.QueryVestingPlan.clawback":
		value := x.Clawback
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingPlan.clawback_amount":
		value := x.ClawbackAmount
		return protoreflect.ValueOfUint64(value)
	case "kyve.team.v1beta1.QueryVestingPlan.maximum_vesting_amount":
		value := x.MaximumVestingAmount
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingPlan"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingPlan does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingPlan) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingPlan.commencement":
		x.Commencement = value.Interface().(string)
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_start":
		x.TokenVestingStart = value.Interface().(string)
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_finished":
		x.TokenVestingFinished = value.Interface().(string)
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_start":
		x.TokenUnlockStart = value.Interface().(string)
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_finished":
		x.TokenUnlockFinished = value.Interface().(string)
	case "kyve.team.v1beta1.QueryVestingPlan.clawback":
		x.Clawback = value.Uint()
	case "kyve.team.v1beta1.QueryVestingPlan.clawback_amount":
		x.ClawbackAmount = value.Uint()
	case "kyve.team.v1beta1.QueryVestingPlan.maximum_vesting_amount":
		x.MaximumVestingAmount = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingPlan"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingPlan does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingPlan) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingPlan.commencement":
		panic(fmt.Errorf("field commencement of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_start":
		panic(fmt.Errorf("field token_vesting_start of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_finished":
		panic(fmt.Errorf("field token_vesting_finished of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_start":
		panic(fmt.Errorf("field token_unlock_start of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_finished":
		panic(fmt.Errorf("field token_unlock_finished of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	case "kyve.team.v1beta1.QueryVestingPlan.clawback":
		panic(fmt.Errorf("field clawback of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	case "kyve.team.v1beta1.QueryVestingPlan.clawback_amount":
		panic(fmt.Errorf("field clawback_amount of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	case "kyve.team.v1beta1.QueryVestingPlan.maximum_vesting_amount":
		panic(fmt.Errorf("field maximum_vesting_amount of message kyve.team.v1beta1.QueryVestingPlan is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingPlan"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingPlan does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryVestingPlan) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.team.v1beta1.QueryVestingPlan.commencement":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_start":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryVestingPlan.token_vesting_finished":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_start":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryVestingPlan.token_unlock_finished":
		return protoreflect.ValueOfString("")
	case "kyve.team.v1beta1.QueryVestingPlan.clawback":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingPlan.clawback_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.team.v1beta1.QueryVestingPlan.maximum_vesting_amount":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.team.v1beta1.QueryVestingPlan"))
		}
		panic(fmt.Errorf("message kyve.team.v1beta1.QueryVestingPlan does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryVestingPlan) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.team.v1beta1.QueryVestingPlan", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryVestingPlan) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVestingPlan) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryVestingPlan) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryVestingPlan) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryVestingPlan)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Commencement)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenVestingStart)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenVestingFinished)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenUnlockStart)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenUnlockFinished)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Clawback != 0 {
			n += 1 + runtime.Sov(uint64(x.Clawback))
		}
		if x.ClawbackAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.ClawbackAmount))
		}
		if x.MaximumVestingAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.MaximumVestingAmount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryVestingPlan)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaximumVestingAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaximumVestingAmount))
			i--
			dAtA[i] = 0x40
		}
		if x.ClawbackAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClawbackAmount))
			i--
			dAtA[i] = 0x38
		}
		if x.Clawback != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Clawback))
			i--
			dAtA[i] = 0x30
		}
		if len(x.TokenUnlockFinished) > 0 {
			i -= len(x.TokenUnlockFinished)
			copy(dAtA[i:], x.TokenUnlockFinished)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenUnlockFinished)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TokenUnlockStart) > 0 {
			i -= len(x.TokenUnlockStart)
			copy(dAtA[i:], x.TokenUnlockStart)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenUnlockStart)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.TokenVestingFinished) > 0 {
			i -= len(x.TokenVestingFinished)
			copy(dAtA[i:], x.TokenVestingFinished)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenVestingFinished)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TokenVestingStart) > 0 {
			i -= len(x.TokenVestingStart)
			copy(dAtA[i:], x.TokenVestingStart)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenVestingStart)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Commencement) > 0 {
			i -= len(x.Commencement)
			copy(dAtA[i:], x.Commencement)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commencement)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryVestingPlan)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVestingPlan: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVestingPlan: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commencement", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commencement = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenVestingStart", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenVestingStart = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenVestingFinished", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenVestingFinished = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenUnlockStart", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenUnlockStart = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenUnlockFinished", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenUnlockFinished = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Clawback", wireType)
				}
				x.Clawback = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Clawback |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClawbackAmount", wireType)
				}
				x.ClawbackAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClawbackAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaximumVestingAmount", wireType)
				}
				x.MaximumVestingAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaximumVestingAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kyve/team/v1beta1/query.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryAccountsRequest is request type for the Query/TeamInfo RPC method.
type QueryTeamInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryTeamInfoRequest) Reset() {
	*x = QueryTeamInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamInfoRequest) ProtoMessage() {}

// Deprecated: Use QueryTeamInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryTeamInfoRequest) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{0}
}

// QueryAccountsResponse is response type for the Query/TeamInfo RPC method.
type QueryTeamInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// foundation is the authority foundation address
	FoundationAuthority string `protobuf:"bytes,1,opt,name=foundation_authority,json=foundationAuthority,proto3" json:"foundation_authority,omitempty"`
	// bcp is the authority bcp address
	BcpAuthority string `protobuf:"bytes,2,opt,name=bcp_authority,json=bcpAuthority,proto3" json:"bcp_authority,omitempty"`
	// total_team_allocation is the total allocation in $KYVE the team module has in order to reward team members
	TotalTeamAllocation uint64 `protobuf:"varint,3,opt,name=total_team_allocation,json=totalTeamAllocation,proto3" json:"total_team_allocation,omitempty"`
	// issued_team_allocation is the amount in $KYVE tied to team vesting accounts and which are not available anymore
	IssuedTeamAllocation uint64 `protobuf:"varint,4,opt,name=issued_team_allocation,json=issuedTeamAllocation,proto3" json:"issued_team_allocation,omitempty"`
	// available_team_allocation is the amount in $KYVE with which further team vesting accounts can be created.
	// if the available amount is zero no new vesting accounts can be created
	AvailableTeamAllocation uint64 `protobuf:"varint,5,opt,name=available_team_allocation,json=availableTeamAllocation,proto3" json:"available_team_allocation,omitempty"`
	// total_authority_rewards is the amount in $KYVE the authority has earned in total with inflation rewards.
	// Those rewards can be payed out for different purposes
	TotalAuthorityRewards uint64 `protobuf:"varint,6,opt,name=total_authority_rewards,json=totalAuthorityRewards,proto3" json:"total_authority_rewards,omitempty"`
	// claimed_authority_rewards is the amount in $KYVE of how much the authority already claimed
	ClaimedAuthorityRewards uint64 `protobuf:"varint,7,opt,name=claimed_authority_rewards,json=claimedAuthorityRewards,proto3" json:"claimed_authority_rewards,omitempty"`
	// available_authority_rewards is the amount in $KYVE of how much rewards the authority can claim right now
	AvailableAuthorityRewards uint64 `protobuf:"varint,8,opt,name=available_authority_rewards,json=availableAuthorityRewards,proto3" json:"available_authority_rewards,omitempty"`
	// total_account_rewards is the amount in $KYVE all team vesting accounts have ever received
	TotalAccountRewards uint64 `protobuf:"varint,9,opt,name=total_account_rewards,json=totalAccountRewards,proto3" json:"total_account_rewards,omitempty"`
	// claimed_account_rewards is the amount in $KYVE all team vesting accounts have ever claimed
	ClaimedAccountRewards uint64 `protobuf:"varint,10,opt,name=claimed_account_rewards,json=claimedAccountRewards,proto3" json:"claimed_account_rewards,omitempty"`
	// available_account_rewards is the total amount of $KYVE all team vesting accounts can currently claim
	AvailableAccountRewards uint64 `protobuf:"varint,11,opt,name=available_account_rewards,json=availableAccountRewards,proto3" json:"available_account_rewards,omitempty"`
	// required_module_balance is the balance the team module should have. If this is less than the module balance
	// something went wrong
	RequiredModuleBalance uint64 `protobuf:"varint,12,opt,name=required_module_balance,json=requiredModuleBalance,proto3" json:"required_module_balance,omitempty"`
	// team_module_balance is the team module balance in $KYVE
	TeamModuleBalance uint64 `protobuf:"varint,13,opt,name=team_module_balance,json=teamModuleBalance,proto3" json:"team_module_balance,omitempty"`
}

func (x *QueryTeamInfoResponse) Reset() {
	*x = QueryTeamInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamInfoResponse) ProtoMessage() {}

// Deprecated: Use QueryTeamInfoResponse.ProtoReflect.Descriptor instead.
func (*QueryTeamInfoResponse) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryTeamInfoResponse) GetFoundationAuthority() string {
	if x != nil {
		return x.FoundationAuthority
	}
	return ""
}

func (x *QueryTeamInfoResponse) GetBcpAuthority() string {
	if x != nil {
		return x.BcpAuthority
	}
	return ""
}

func (x *QueryTeamInfoResponse) GetTotalTeamAllocation() uint64 {
	if x != nil {
		return x.TotalTeamAllocation
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetIssuedTeamAllocation() uint64 {
	if x != nil {
		return x.IssuedTeamAllocation
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetAvailableTeamAllocation() uint64 {
	if x != nil {
		return x.AvailableTeamAllocation
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetTotalAuthorityRewards() uint64 {
	if x != nil {
		return x.TotalAuthorityRewards
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetClaimedAuthorityRewards() uint64 {
	if x != nil {
		return x.ClaimedAuthorityRewards
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetAvailableAuthorityRewards() uint64 {
	if x != nil {
		return x.AvailableAuthorityRewards
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetTotalAccountRewards() uint64 {
	if x != nil {
		return x.TotalAccountRewards
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetClaimedAccountRewards() uint64 {
	if x != nil {
		return x.ClaimedAccountRewards
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetAvailableAccountRewards() uint64 {
	if x != nil {
		return x.AvailableAccountRewards
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetRequiredModuleBalance() uint64 {
	if x != nil {
		return x.RequiredModuleBalance
	}
	return 0
}

func (x *QueryTeamInfoResponse) GetTeamModuleBalance() uint64 {
	if x != nil {
		return x.TeamModuleBalance
	}
	return 0
}

// QueryAccountsRequest is request type for the Query/TeamVestingAccounts RPC method.
type QueryTeamVestingAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryTeamVestingAccountsRequest) Reset() {
	*x = QueryTeamVestingAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingAccountsRequest) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingAccountsRequest.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingAccountsRequest) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{2}
}

// QueryAccountsResponse is response type for the Query/TeamVestingAccounts RPC method.
type QueryTeamVestingAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// accounts holds all the team vesting accounts of this module.
	Accounts []*TeamVestingAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *QueryTeamVestingAccountsResponse) Reset() {
	*x = QueryTeamVestingAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingAccountsResponse) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingAccountsResponse.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingAccountsResponse) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryTeamVestingAccountsResponse) GetAccounts() []*TeamVestingAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// QueryTeamVestingAccountRequest is request type for the Query/TeamVestingAccount RPC method.
type QueryTeamVestingAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is a unique identify for each vesting account, tied to a single team member.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryTeamVestingAccountRequest) Reset() {
	*x = QueryTeamVestingAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingAccountRequest) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingAccountRequest.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingAccountRequest) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryTeamVestingAccountRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// QueryTeamVestingAccountResponse is the response type for the Query/TeamVestingAccount RPC method.
type QueryTeamVestingAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account holds the requested team vesting account
	Account *TeamVestingAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *QueryTeamVestingAccountResponse) Reset() {
	*x = QueryTeamVestingAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingAccountResponse) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingAccountResponse.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingAccountResponse) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryTeamVestingAccountResponse) GetAccount() *TeamVestingAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

// QueryTeamCurrentVestingStatusRequest is request type for the Query/TeamCurrentVestingStatus RPC method.
type QueryTeamVestingStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is a unique identify for each vesting account, tied to a single team member.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryTeamVestingStatusRequest) Reset() {
	*x = QueryTeamVestingStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingStatusRequest) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingStatusRequest) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{6}
}

func (x *QueryTeamVestingStatusRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// QueryTeamCurrentVestingStatusResponse is the response type for the Query/TeamCurrentVestingStatus RPC method.
type QueryTeamVestingStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request_date ..
	RequestDate string `protobuf:"bytes,1,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	// plan ...
	Plan *QueryVestingPlan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	// status ..
	Status *QueryVestingStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *QueryTeamVestingStatusResponse) Reset() {
	*x = QueryTeamVestingStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingStatusResponse) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingStatusResponse) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{7}
}

func (x *QueryTeamVestingStatusResponse) GetRequestDate() string {
	if x != nil {
		return x.RequestDate
	}
	return ""
}

func (x *QueryTeamVestingStatusResponse) GetPlan() *QueryVestingPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *QueryTeamVestingStatusResponse) GetStatus() *QueryVestingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// QueryTeamVestingStatusByTimeRequest is request type for the Query/TeamCurrentVestingByTimeStatus RPC method.
type QueryTeamVestingStatusByTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is a unique identify for each vesting account, tied to a single team member.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// time is a unix timestamp of the time the vesting progress should be calculated
	Time uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *QueryTeamVestingStatusByTimeRequest) Reset() {
	*x = QueryTeamVestingStatusByTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingStatusByTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingStatusByTimeRequest) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingStatusByTimeRequest.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingStatusByTimeRequest) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryTeamVestingStatusByTimeRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryTeamVestingStatusByTimeRequest) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// QueryTeamVestingStatusByTimeResponse is the response type for the Query/TeamCurrentVestingByTimeStatus RPC method.
type QueryTeamVestingStatusByTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request_date ..
	RequestDate string `protobuf:"bytes,1,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	// plan ...
	Plan *QueryVestingPlan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	// status ..
	Status *QueryVestingStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *QueryTeamVestingStatusByTimeResponse) Reset() {
	*x = QueryTeamVestingStatusByTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamVestingStatusByTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamVestingStatusByTimeResponse) ProtoMessage() {}

// Deprecated: Use QueryTeamVestingStatusByTimeResponse.ProtoReflect.Descriptor instead.
func (*QueryTeamVestingStatusByTimeResponse) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryTeamVestingStatusByTimeResponse) GetRequestDate() string {
	if x != nil {
		return x.RequestDate
	}
	return ""
}

func (x *QueryTeamVestingStatusByTimeResponse) GetPlan() *QueryVestingPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *QueryTeamVestingStatusByTimeResponse) GetStatus() *QueryVestingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// QueryVestingStatus is a type holding information about the account's vesting progress
type QueryVestingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total_vested_amount ...
	TotalVestedAmount uint64 `protobuf:"varint,1,opt,name=total_vested_amount,json=totalVestedAmount,proto3" json:"total_vested_amount,omitempty"`
	// total_unlocked_amount ...
	TotalUnlockedAmount uint64 `protobuf:"varint,2,opt,name=total_unlocked_amount,json=totalUnlockedAmount,proto3" json:"total_unlocked_amount,omitempty"`
	// current_claimable_amount ...
	CurrentClaimableAmount uint64 `protobuf:"varint,3,opt,name=current_claimable_amount,json=currentClaimableAmount,proto3" json:"current_claimable_amount,omitempty"`
	// locked_vested_amount ...
	LockedVestedAmount uint64 `protobuf:"varint,4,opt,name=locked_vested_amount,json=lockedVestedAmount,proto3" json:"locked_vested_amount,omitempty"`
	// remaining_unvested_amount ...
	RemainingUnvestedAmount uint64 `protobuf:"varint,5,opt,name=remaining_unvested_amount,json=remainingUnvestedAmount,proto3" json:"remaining_unvested_amount,omitempty"`
	// claimed_amount ...
	ClaimedAmount uint64 `protobuf:"varint,6,opt,name=claimed_amount,json=claimedAmount,proto3" json:"claimed_amount,omitempty"`
	// total_rewards ...
	TotalRewards uint64 `protobuf:"varint,7,opt,name=total_rewards,json=totalRewards,proto3" json:"total_rewards,omitempty"`
	// claimed_rewards ...
	ClaimedRewards uint64 `protobuf:"varint,8,opt,name=claimed_rewards,json=claimedRewards,proto3" json:"claimed_rewards,omitempty"`
	// available_rewards ...
	AvailableRewards uint64 `protobuf:"varint,9,opt,name=available_rewards,json=availableRewards,proto3" json:"available_rewards,omitempty"`
}

func (x *QueryVestingStatus) Reset() {
	*x = QueryVestingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVestingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVestingStatus) ProtoMessage() {}

// Deprecated: Use QueryVestingStatus.ProtoReflect.Descriptor instead.
func (*QueryVestingStatus) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryVestingStatus) GetTotalVestedAmount() uint64 {
	if x != nil {
		return x.TotalVestedAmount
	}
	return 0
}

func (x *QueryVestingStatus) GetTotalUnlockedAmount() uint64 {
	if x != nil {
		return x.TotalUnlockedAmount
	}
	return 0
}

func (x *QueryVestingStatus) GetCurrentClaimableAmount() uint64 {
	if x != nil {
		return x.CurrentClaimableAmount
	}
	return 0
}

func (x *QueryVestingStatus) GetLockedVestedAmount() uint64 {
	if x != nil {
		return x.LockedVestedAmount
	}
	return 0
}

func (x *QueryVestingStatus) GetRemainingUnvestedAmount() uint64 {
	if x != nil {
		return x.RemainingUnvestedAmount
	}
	return 0
}

func (x *QueryVestingStatus) GetClaimedAmount() uint64 {
	if x != nil {
		return x.ClaimedAmount
	}
	return 0
}

func (x *QueryVestingStatus) GetTotalRewards() uint64 {
	if x != nil {
		return x.TotalRewards
	}
	return 0
}

func (x *QueryVestingStatus) GetClaimedRewards() uint64 {
	if x != nil {
		return x.ClaimedRewards
	}
	return 0
}

func (x *QueryVestingStatus) GetAvailableRewards() uint64 {
	if x != nil {
		return x.AvailableRewards
	}
	return 0
}

// QueryVestingPlan is a type holding information about the account's vesting data which does not change
type QueryVestingPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commencement ...
	Commencement string `protobuf:"bytes,1,opt,name=commencement,proto3" json:"commencement,omitempty"`
	// token_vesting_start ...
	TokenVestingStart string `protobuf:"bytes,2,opt,name=token_vesting_start,json=tokenVestingStart,proto3" json:"token_vesting_start,omitempty"`
	// token_vesting_finished ...
	TokenVestingFinished string `protobuf:"bytes,3,opt,name=token_vesting_finished,json=tokenVestingFinished,proto3" json:"token_vesting_finished,omitempty"`
	// token_unlock_start ...
	TokenUnlockStart string `protobuf:"bytes,4,opt,name=token_unlock_start,json=tokenUnlockStart,proto3" json:"token_unlock_start,omitempty"`
	// token_unlock_finished ...
	TokenUnlockFinished string `protobuf:"bytes,5,opt,name=token_unlock_finished,json=tokenUnlockFinished,proto3" json:"token_unlock_finished,omitempty"`
	// clawback ...
	Clawback uint64 `protobuf:"varint,6,opt,name=clawback,proto3" json:"clawback,omitempty"`
	// clawback_amount ...
	ClawbackAmount uint64 `protobuf:"varint,7,opt,name=clawback_amount,json=clawbackAmount,proto3" json:"clawback_amount,omitempty"`
	// maximum_vesting_amount ...
	MaximumVestingAmount uint64 `protobuf:"varint,8,opt,name=maximum_vesting_amount,json=maximumVestingAmount,proto3" json:"maximum_vesting_amount,omitempty"`
}

func (x *QueryVestingPlan) Reset() {
	*x = QueryVestingPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_team_v1beta1_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVestingPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVestingPlan) ProtoMessage() {}

// Deprecated: Use QueryVestingPlan.ProtoReflect.Descriptor instead.
func (*QueryVestingPlan) Descriptor() ([]byte, []int) {
	return file_kyve_team_v1beta1_query_proto_rawDescGZIP(), []int{11}
}

func (x *QueryVestingPlan) GetCommencement() string {
	if x != nil {
		return x.Commencement
	}
	return ""
}

func (x *QueryVestingPlan) GetTokenVestingStart() string {
	if x != nil {
		return x.TokenVestingStart
	}
	return ""
}

func (x *QueryVestingPlan) GetTokenVestingFinished() string {
	if x != nil {
		return x.TokenVestingFinished
	}
	return ""
}

func (x *QueryVestingPlan) GetTokenUnlockStart() string {
	if x != nil {
		return x.TokenUnlockStart
	}
	return ""
}

func (x *QueryVestingPlan) GetTokenUnlockFinished() string {
	if x != nil {
		return x.TokenUnlockFinished
	}
	return ""
}

func (x *QueryVestingPlan) GetClawback() uint64 {
	if x != nil {
		return x.Clawback
	}
	return 0
}

func (x *QueryVestingPlan) GetClawbackAmount() uint64 {
	if x != nil {
		return x.ClawbackAmount
	}
	return 0
}

func (x *QueryVestingPlan) GetMaximumVestingAmount() uint64 {
	if x != nil {
		return x.MaximumVestingAmount
	}
	return 0
}

var File_kyve_team_v1beta1_query_proto protoreflect.FileDescriptor

var file_kyve_team_v1beta1_query_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd9, 0x05, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x63, 0x70,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x63, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32,
	0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x17, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x20, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x1f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x76, 0x65,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc1,
	0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x56, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x77,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x77,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0xf5, 0x06, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x83, 0x01,
	0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6b, 0x79, 0x76,
	0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0xb0, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6b, 0x79,
	0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x6b,
	0x79, 0x76, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e,
	0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x6b,
	0x79, 0x76, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x54,
	0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f,
	0x6b, 0x79, 0x76, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xce, 0x01, 0x0a, 0x17, 0x54,
	0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12,
	0x3a, 0x2f, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x74, 0x69, 0x6d, 0x65, 0x7d, 0x42, 0xcc, 0x01, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4b, 0x59, 0x56, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2f, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x74, 0x65, 0x61, 0x6d, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4b, 0x54, 0x58, 0xaa, 0x02, 0x11, 0x4b,
	0x79, 0x76, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xca, 0x02, 0x11, 0x4b, 0x79, 0x76, 0x65, 0x5c, 0x54, 0x65, 0x61, 0x6d, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1d, 0x4b, 0x79, 0x76, 0x65, 0x5c, 0x54, 0x65, 0x61, 0x6d,
	0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x4b, 0x79, 0x76, 0x65, 0x3a, 0x3a, 0x54, 0x65, 0x61,
	0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_kyve_team_v1beta1_query_proto_rawDescOnce sync.Once
	file_kyve_team_v1beta1_query_proto_rawDescData = file_kyve_team_v1beta1_query_proto_rawDesc
)

func file_kyve_team_v1beta1_query_proto_rawDescGZIP() []byte {
	file_kyve_team_v1beta1_query_proto_rawDescOnce.Do(func() {
		file_kyve_team_v1beta1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_kyve_team_v1beta1_query_proto_rawDescData)
	})
	return file_kyve_team_v1beta1_query_proto_rawDescData
}

var file_kyve_team_v1beta1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kyve_team_v1beta1_query_proto_goTypes = []interface{}{
	(*QueryTeamInfoRequest)(nil),                 // 0: kyve.team.v1beta1.QueryTeamInfoRequest
	(*QueryTeamInfoResponse)(nil),                // 1: kyve.team.v1beta1.QueryTeamInfoResponse
	(*QueryTeamVestingAccountsRequest)(nil),      // 2: kyve.team.v1beta1.QueryTeamVestingAccountsRequest
	(*QueryTeamVestingAccountsResponse)(nil),     // 3: kyve.team.v1beta1.QueryTeamVestingAccountsResponse
	(*QueryTeamVestingAccountRequest)(nil),       // 4: kyve.team.v1beta1.QueryTeamVestingAccountRequest
	(*QueryTeamVestingAccountResponse)(nil),      // 5: kyve.team.v1beta1.QueryTeamVestingAccountResponse
	(*QueryTeamVestingStatusRequest)(nil),        // 6: kyve.team.v1beta1.QueryTeamVestingStatusRequest
	(*QueryTeamVestingStatusResponse)(nil),       // 7: kyve.team.v1beta1.QueryTeamVestingStatusResponse
	(*QueryTeamVestingStatusByTimeRequest)(nil),  // 8: kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest
	(*QueryTeamVestingStatusByTimeResponse)(nil), // 9: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse
	(*QueryVestingStatus)(nil),                   // 10: kyve.team.v1beta1.QueryVestingStatus
	(*QueryVestingPlan)(nil),                     // 11: kyve.team.v1beta1.QueryVestingPlan
	(*TeamVestingAccount)(nil),                   // 12: kyve.team.v1beta1.TeamVestingAccount
}
var file_kyve_team_v1beta1_query_proto_depIdxs = []int32{
	12, // 0: kyve.team.v1beta1.QueryTeamVestingAccountsResponse.accounts:type_name -> kyve.team.v1beta1.TeamVestingAccount
	12, // 1: kyve.team.v1beta1.QueryTeamVestingAccountResponse.account:type_name -> kyve.team.v1beta1.TeamVestingAccount
	11, // 2: kyve.team.v1beta1.QueryTeamVestingStatusResponse.plan:type_name -> kyve.team.v1beta1.QueryVestingPlan
	10, // 3: kyve.team.v1beta1.QueryTeamVestingStatusResponse.status:type_name -> kyve.team.v1beta1.QueryVestingStatus
	11, // 4: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.plan:type_name -> kyve.team.v1beta1.QueryVestingPlan
	10, // 5: kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse.status:type_name -> kyve.team.v1beta1.QueryVestingStatus
	0,  // 6: kyve.team.v1beta1.Query.TeamInfo:input_type -> kyve.team.v1beta1.QueryTeamInfoRequest
	2,  // 7: kyve.team.v1beta1.Query.TeamVestingAccounts:input_type -> kyve.team.v1beta1.QueryTeamVestingAccountsRequest
	4,  // 8: kyve.team.v1beta1.Query.TeamVestingAccount:input_type -> kyve.team.v1beta1.QueryTeamVestingAccountRequest
	6,  // 9: kyve.team.v1beta1.Query.TeamVestingStatus:input_type -> kyve.team.v1beta1.QueryTeamVestingStatusRequest
	8,  // 10: kyve.team.v1beta1.Query.TeamVestingStatusByTime:input_type -> kyve.team.v1beta1.QueryTeamVestingStatusByTimeRequest
	1,  // 11: kyve.team.v1beta1.Query.TeamInfo:output_type -> kyve.team.v1beta1.QueryTeamInfoResponse
	3,  // 12: kyve.team.v1beta1.Query.TeamVestingAccounts:output_type -> kyve.team.v1beta1.QueryTeamVestingAccountsResponse
	5,  // 13: kyve.team.v1beta1.Query.TeamVestingAccount:output_type -> kyve.team.v1beta1.QueryTeamVestingAccountResponse
	7,  // 14: kyve.team.v1beta1.Query.TeamVestingStatus:output_type -> kyve.team.v1beta1.QueryTeamVestingStatusResponse
	9,  // 15: kyve.team.v1beta1.Query.TeamVestingStatusByTime:output_type -> kyve.team.v1beta1.QueryTeamVestingStatusByTimeResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_kyve_team_v1beta1_query_proto_init() }
func file_kyve_team_v1beta1_query_proto_init() {
	if File_kyve_team_v1beta1_query_proto != nil {
		return
	}
	file_kyve_team_v1beta1_team_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kyve_team_v1beta1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingStatusByTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamVestingStatusByTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVestingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_team_v1beta1_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVestingPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kyve_team_v1beta1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kyve_team_v1beta1_query_proto_goTypes,
		DependencyIndexes: file_kyve_team_v1beta1_query_proto_depIdxs,
		MessageInfos:      file_kyve_team_v1beta1_query_proto_msgTypes,
	}.Build()
	File_kyve_team_v1beta1_query_proto = out.File
	file_kyve_team_v1beta1_query_proto_rawDesc = nil
	file_kyve_team_v1beta1_query_proto_goTypes = nil
	file_kyve_team_v1beta1_query_proto_depIdxs = nil
}
