// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package queryv1beta1

import (
	fmt "fmt"
	v1beta1 "github.com/KYVENetwork/chain/pulsar/kyve/pool/v1beta1"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_BasicPool                  protoreflect.MessageDescriptor
	fd_BasicPool_id               protoreflect.FieldDescriptor
	fd_BasicPool_name             protoreflect.FieldDescriptor
	fd_BasicPool_runtime          protoreflect.FieldDescriptor
	fd_BasicPool_logo             protoreflect.FieldDescriptor
	fd_BasicPool_operating_cost   protoreflect.FieldDescriptor
	fd_BasicPool_upload_interval  protoreflect.FieldDescriptor
	fd_BasicPool_total_funds      protoreflect.FieldDescriptor
	fd_BasicPool_total_delegation protoreflect.FieldDescriptor
	fd_BasicPool_status           protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_query_proto_init()
	md_BasicPool = File_kyve_query_v1beta1_query_proto.Messages().ByName("BasicPool")
	fd_BasicPool_id = md_BasicPool.Fields().ByName("id")
	fd_BasicPool_name = md_BasicPool.Fields().ByName("name")
	fd_BasicPool_runtime = md_BasicPool.Fields().ByName("runtime")
	fd_BasicPool_logo = md_BasicPool.Fields().ByName("logo")
	fd_BasicPool_operating_cost = md_BasicPool.Fields().ByName("operating_cost")
	fd_BasicPool_upload_interval = md_BasicPool.Fields().ByName("upload_interval")
	fd_BasicPool_total_funds = md_BasicPool.Fields().ByName("total_funds")
	fd_BasicPool_total_delegation = md_BasicPool.Fields().ByName("total_delegation")
	fd_BasicPool_status = md_BasicPool.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_BasicPool)(nil)

type fastReflection_BasicPool BasicPool

func (x *BasicPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BasicPool)(x)
}

func (x *BasicPool) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BasicPool_messageType fastReflection_BasicPool_messageType
var _ protoreflect.MessageType = fastReflection_BasicPool_messageType{}

type fastReflection_BasicPool_messageType struct{}

func (x fastReflection_BasicPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BasicPool)(nil)
}
func (x fastReflection_BasicPool_messageType) New() protoreflect.Message {
	return new(fastReflection_BasicPool)
}
func (x fastReflection_BasicPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BasicPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BasicPool) Descriptor() protoreflect.MessageDescriptor {
	return md_BasicPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BasicPool) Type() protoreflect.MessageType {
	return _fastReflection_BasicPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BasicPool) New() protoreflect.Message {
	return new(fastReflection_BasicPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BasicPool) Interface() protoreflect.ProtoMessage {
	return (*BasicPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BasicPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_BasicPool_id, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_BasicPool_name, value) {
			return
		}
	}
	if x.Runtime != "" {
		value := protoreflect.ValueOfString(x.Runtime)
		if !f(fd_BasicPool_runtime, value) {
			return
		}
	}
	if x.Logo != "" {
		value := protoreflect.ValueOfString(x.Logo)
		if !f(fd_BasicPool_logo, value) {
			return
		}
	}
	if x.OperatingCost != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OperatingCost)
		if !f(fd_BasicPool_operating_cost, value) {
			return
		}
	}
	if x.UploadInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UploadInterval)
		if !f(fd_BasicPool_upload_interval, value) {
			return
		}
	}
	if x.TotalFunds != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalFunds)
		if !f(fd_BasicPool_total_funds, value) {
			return
		}
	}
	if x.TotalDelegation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalDelegation)
		if !f(fd_BasicPool_total_delegation, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_BasicPool_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BasicPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.BasicPool.id":
		return x.Id != uint64(0)
	case "kyve.query.v1beta1.BasicPool.name":
		return x.Name != ""
	case "kyve.query.v1beta1.BasicPool.runtime":
		return x.Runtime != ""
	case "kyve.query.v1beta1.BasicPool.logo":
		return x.Logo != ""
	case "kyve.query.v1beta1.BasicPool.operating_cost":
		return x.OperatingCost != uint64(0)
	case "kyve.query.v1beta1.BasicPool.upload_interval":
		return x.UploadInterval != uint64(0)
	case "kyve.query.v1beta1.BasicPool.total_funds":
		return x.TotalFunds != uint64(0)
	case "kyve.query.v1beta1.BasicPool.total_delegation":
		return x.TotalDelegation != uint64(0)
	case "kyve.query.v1beta1.BasicPool.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.BasicPool"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.BasicPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BasicPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.BasicPool.id":
		x.Id = uint64(0)
	case "kyve.query.v1beta1.BasicPool.name":
		x.Name = ""
	case "kyve.query.v1beta1.BasicPool.runtime":
		x.Runtime = ""
	case "kyve.query.v1beta1.BasicPool.logo":
		x.Logo = ""
	case "kyve.query.v1beta1.BasicPool.operating_cost":
		x.OperatingCost = uint64(0)
	case "kyve.query.v1beta1.BasicPool.upload_interval":
		x.UploadInterval = uint64(0)
	case "kyve.query.v1beta1.BasicPool.total_funds":
		x.TotalFunds = uint64(0)
	case "kyve.query.v1beta1.BasicPool.total_delegation":
		x.TotalDelegation = uint64(0)
	case "kyve.query.v1beta1.BasicPool.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.BasicPool"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.BasicPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BasicPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.BasicPool.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.BasicPool.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.BasicPool.runtime":
		value := x.Runtime
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.BasicPool.logo":
		value := x.Logo
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.BasicPool.operating_cost":
		value := x.OperatingCost
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.BasicPool.upload_interval":
		value := x.UploadInterval
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.BasicPool.total_funds":
		value := x.TotalFunds
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.BasicPool.total_delegation":
		value := x.TotalDelegation
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.BasicPool.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.BasicPool"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.BasicPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BasicPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.BasicPool.id":
		x.Id = value.Uint()
	case "kyve.query.v1beta1.BasicPool.name":
		x.Name = value.Interface().(string)
	case "kyve.query.v1beta1.BasicPool.runtime":
		x.Runtime = value.Interface().(string)
	case "kyve.query.v1beta1.BasicPool.logo":
		x.Logo = value.Interface().(string)
	case "kyve.query.v1beta1.BasicPool.operating_cost":
		x.OperatingCost = value.Uint()
	case "kyve.query.v1beta1.BasicPool.upload_interval":
		x.UploadInterval = value.Uint()
	case "kyve.query.v1beta1.BasicPool.total_funds":
		x.TotalFunds = value.Uint()
	case "kyve.query.v1beta1.BasicPool.total_delegation":
		x.TotalDelegation = value.Uint()
	case "kyve.query.v1beta1.BasicPool.status":
		x.Status = (v1beta1.PoolStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.BasicPool"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.BasicPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BasicPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.BasicPool.id":
		panic(fmt.Errorf("field id of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.name":
		panic(fmt.Errorf("field name of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.runtime":
		panic(fmt.Errorf("field runtime of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.logo":
		panic(fmt.Errorf("field logo of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.operating_cost":
		panic(fmt.Errorf("field operating_cost of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.upload_interval":
		panic(fmt.Errorf("field upload_interval of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.total_funds":
		panic(fmt.Errorf("field total_funds of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.total_delegation":
		panic(fmt.Errorf("field total_delegation of message kyve.query.v1beta1.BasicPool is not mutable"))
	case "kyve.query.v1beta1.BasicPool.status":
		panic(fmt.Errorf("field status of message kyve.query.v1beta1.BasicPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.BasicPool"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.BasicPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BasicPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.BasicPool.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.BasicPool.name":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.BasicPool.runtime":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.BasicPool.logo":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.BasicPool.operating_cost":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.BasicPool.upload_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.BasicPool.total_funds":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.BasicPool.total_delegation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.BasicPool.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.BasicPool"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.BasicPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BasicPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.BasicPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BasicPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BasicPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BasicPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BasicPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BasicPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Runtime)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Logo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OperatingCost != 0 {
			n += 1 + runtime.Sov(uint64(x.OperatingCost))
		}
		if x.UploadInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.UploadInterval))
		}
		if x.TotalFunds != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalFunds))
		}
		if x.TotalDelegation != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalDelegation))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BasicPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x48
		}
		if x.TotalDelegation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalDelegation))
			i--
			dAtA[i] = 0x40
		}
		if x.TotalFunds != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalFunds))
			i--
			dAtA[i] = 0x38
		}
		if x.UploadInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UploadInterval))
			i--
			dAtA[i] = 0x30
		}
		if x.OperatingCost != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OperatingCost))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Logo) > 0 {
			i -= len(x.Logo)
			copy(dAtA[i:], x.Logo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Logo)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Runtime) > 0 {
			i -= len(x.Runtime)
			copy(dAtA[i:], x.Runtime)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Runtime)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BasicPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BasicPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BasicPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Runtime = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Logo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperatingCost", wireType)
				}
				x.OperatingCost = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OperatingCost |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
				}
				x.UploadInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UploadInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
				}
				x.TotalFunds = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalFunds |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
				}
				x.TotalDelegation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalDelegation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= v1beta1.PoolStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_FullStaker_7_list)(nil)

type _FullStaker_7_list struct {
	list *[]*PoolMembership
}

func (x *_FullStaker_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_FullStaker_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_FullStaker_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PoolMembership)
	(*x.list)[i] = concreteValue
}

func (x *_FullStaker_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PoolMembership)
	*x.list = append(*x.list, concreteValue)
}

func (x *_FullStaker_7_list) AppendMutable() protoreflect.Value {
	v := new(PoolMembership)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FullStaker_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_FullStaker_7_list) NewElement() protoreflect.Value {
	v := new(PoolMembership)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FullStaker_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_FullStaker                           protoreflect.MessageDescriptor
	fd_FullStaker_address                   protoreflect.FieldDescriptor
	fd_FullStaker_metadata                  protoreflect.FieldDescriptor
	fd_FullStaker_self_delegation           protoreflect.FieldDescriptor
	fd_FullStaker_self_delegation_unbonding protoreflect.FieldDescriptor
	fd_FullStaker_total_delegation          protoreflect.FieldDescriptor
	fd_FullStaker_delegator_count           protoreflect.FieldDescriptor
	fd_FullStaker_pools                     protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_query_proto_init()
	md_FullStaker = File_kyve_query_v1beta1_query_proto.Messages().ByName("FullStaker")
	fd_FullStaker_address = md_FullStaker.Fields().ByName("address")
	fd_FullStaker_metadata = md_FullStaker.Fields().ByName("metadata")
	fd_FullStaker_self_delegation = md_FullStaker.Fields().ByName("self_delegation")
	fd_FullStaker_self_delegation_unbonding = md_FullStaker.Fields().ByName("self_delegation_unbonding")
	fd_FullStaker_total_delegation = md_FullStaker.Fields().ByName("total_delegation")
	fd_FullStaker_delegator_count = md_FullStaker.Fields().ByName("delegator_count")
	fd_FullStaker_pools = md_FullStaker.Fields().ByName("pools")
}

var _ protoreflect.Message = (*fastReflection_FullStaker)(nil)

type fastReflection_FullStaker FullStaker

func (x *FullStaker) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FullStaker)(x)
}

func (x *FullStaker) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FullStaker_messageType fastReflection_FullStaker_messageType
var _ protoreflect.MessageType = fastReflection_FullStaker_messageType{}

type fastReflection_FullStaker_messageType struct{}

func (x fastReflection_FullStaker_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FullStaker)(nil)
}
func (x fastReflection_FullStaker_messageType) New() protoreflect.Message {
	return new(fastReflection_FullStaker)
}
func (x fastReflection_FullStaker_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FullStaker
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FullStaker) Descriptor() protoreflect.MessageDescriptor {
	return md_FullStaker
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FullStaker) Type() protoreflect.MessageType {
	return _fastReflection_FullStaker_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FullStaker) New() protoreflect.Message {
	return new(fastReflection_FullStaker)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FullStaker) Interface() protoreflect.ProtoMessage {
	return (*FullStaker)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FullStaker) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_FullStaker_address, value) {
			return
		}
	}
	if x.Metadata != nil {
		value := protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
		if !f(fd_FullStaker_metadata, value) {
			return
		}
	}
	if x.SelfDelegation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SelfDelegation)
		if !f(fd_FullStaker_self_delegation, value) {
			return
		}
	}
	if x.SelfDelegationUnbonding != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SelfDelegationUnbonding)
		if !f(fd_FullStaker_self_delegation_unbonding, value) {
			return
		}
	}
	if x.TotalDelegation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalDelegation)
		if !f(fd_FullStaker_total_delegation, value) {
			return
		}
	}
	if x.DelegatorCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DelegatorCount)
		if !f(fd_FullStaker_delegator_count, value) {
			return
		}
	}
	if len(x.Pools) != 0 {
		value := protoreflect.ValueOfList(&_FullStaker_7_list{list: &x.Pools})
		if !f(fd_FullStaker_pools, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FullStaker) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.FullStaker.address":
		return x.Address != ""
	case "kyve.query.v1beta1.FullStaker.metadata":
		return x.Metadata != nil
	case "kyve.query.v1beta1.FullStaker.self_delegation":
		return x.SelfDelegation != uint64(0)
	case "kyve.query.v1beta1.FullStaker.self_delegation_unbonding":
		return x.SelfDelegationUnbonding != uint64(0)
	case "kyve.query.v1beta1.FullStaker.total_delegation":
		return x.TotalDelegation != uint64(0)
	case "kyve.query.v1beta1.FullStaker.delegator_count":
		return x.DelegatorCount != uint64(0)
	case "kyve.query.v1beta1.FullStaker.pools":
		return len(x.Pools) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.FullStaker"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.FullStaker does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FullStaker) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.FullStaker.address":
		x.Address = ""
	case "kyve.query.v1beta1.FullStaker.metadata":
		x.Metadata = nil
	case "kyve.query.v1beta1.FullStaker.self_delegation":
		x.SelfDelegation = uint64(0)
	case "kyve.query.v1beta1.FullStaker.self_delegation_unbonding":
		x.SelfDelegationUnbonding = uint64(0)
	case "kyve.query.v1beta1.FullStaker.total_delegation":
		x.TotalDelegation = uint64(0)
	case "kyve.query.v1beta1.FullStaker.delegator_count":
		x.DelegatorCount = uint64(0)
	case "kyve.query.v1beta1.FullStaker.pools":
		x.Pools = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.FullStaker"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.FullStaker does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FullStaker) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.FullStaker.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.FullStaker.metadata":
		value := x.Metadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.query.v1beta1.FullStaker.self_delegation":
		value := x.SelfDelegation
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.FullStaker.self_delegation_unbonding":
		value := x.SelfDelegationUnbonding
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.FullStaker.total_delegation":
		value := x.TotalDelegation
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.FullStaker.delegator_count":
		value := x.DelegatorCount
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.FullStaker.pools":
		if len(x.Pools) == 0 {
			return protoreflect.ValueOfList(&_FullStaker_7_list{})
		}
		listValue := &_FullStaker_7_list{list: &x.Pools}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.FullStaker"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.FullStaker does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FullStaker) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.FullStaker.address":
		x.Address = value.Interface().(string)
	case "kyve.query.v1beta1.FullStaker.metadata":
		x.Metadata = value.Message().Interface().(*StakerMetadata)
	case "kyve.query.v1beta1.FullStaker.self_delegation":
		x.SelfDelegation = value.Uint()
	case "kyve.query.v1beta1.FullStaker.self_delegation_unbonding":
		x.SelfDelegationUnbonding = value.Uint()
	case "kyve.query.v1beta1.FullStaker.total_delegation":
		x.TotalDelegation = value.Uint()
	case "kyve.query.v1beta1.FullStaker.delegator_count":
		x.DelegatorCount = value.Uint()
	case "kyve.query.v1beta1.FullStaker.pools":
		lv := value.List()
		clv := lv.(*_FullStaker_7_list)
		x.Pools = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.FullStaker"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.FullStaker does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FullStaker) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.FullStaker.metadata":
		if x.Metadata == nil {
			x.Metadata = new(StakerMetadata)
		}
		return protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
	case "kyve.query.v1beta1.FullStaker.pools":
		if x.Pools == nil {
			x.Pools = []*PoolMembership{}
		}
		value := &_FullStaker_7_list{list: &x.Pools}
		return protoreflect.ValueOfList(value)
	case "kyve.query.v1beta1.FullStaker.address":
		panic(fmt.Errorf("field address of message kyve.query.v1beta1.FullStaker is not mutable"))
	case "kyve.query.v1beta1.FullStaker.self_delegation":
		panic(fmt.Errorf("field self_delegation of message kyve.query.v1beta1.FullStaker is not mutable"))
	case "kyve.query.v1beta1.FullStaker.self_delegation_unbonding":
		panic(fmt.Errorf("field self_delegation_unbonding of message kyve.query.v1beta1.FullStaker is not mutable"))
	case "kyve.query.v1beta1.FullStaker.total_delegation":
		panic(fmt.Errorf("field total_delegation of message kyve.query.v1beta1.FullStaker is not mutable"))
	case "kyve.query.v1beta1.FullStaker.delegator_count":
		panic(fmt.Errorf("field delegator_count of message kyve.query.v1beta1.FullStaker is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.FullStaker"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.FullStaker does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FullStaker) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.FullStaker.address":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.FullStaker.metadata":
		m := new(StakerMetadata)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.query.v1beta1.FullStaker.self_delegation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.FullStaker.self_delegation_unbonding":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.FullStaker.total_delegation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.FullStaker.delegator_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.FullStaker.pools":
		list := []*PoolMembership{}
		return protoreflect.ValueOfList(&_FullStaker_7_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.FullStaker"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.FullStaker does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FullStaker) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.FullStaker", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FullStaker) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FullStaker) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FullStaker) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FullStaker) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FullStaker)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Metadata != nil {
			l = options.Size(x.Metadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SelfDelegation != 0 {
			n += 1 + runtime.Sov(uint64(x.SelfDelegation))
		}
		if x.SelfDelegationUnbonding != 0 {
			n += 1 + runtime.Sov(uint64(x.SelfDelegationUnbonding))
		}
		if x.TotalDelegation != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalDelegation))
		}
		if x.DelegatorCount != 0 {
			n += 1 + runtime.Sov(uint64(x.DelegatorCount))
		}
		if len(x.Pools) > 0 {
			for _, e := range x.Pools {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FullStaker)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Pools) > 0 {
			for iNdEx := len(x.Pools) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Pools[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.DelegatorCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DelegatorCount))
			i--
			dAtA[i] = 0x30
		}
		if x.TotalDelegation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalDelegation))
			i--
			dAtA[i] = 0x28
		}
		if x.SelfDelegationUnbonding != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SelfDelegationUnbonding))
			i--
			dAtA[i] = 0x20
		}
		if x.SelfDelegation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SelfDelegation))
			i--
			dAtA[i] = 0x18
		}
		if x.Metadata != nil {
			encoded, err := options.Marshal(x.Metadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FullStaker)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FullStaker: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FullStaker: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Metadata == nil {
					x.Metadata = &StakerMetadata{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Metadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SelfDelegation", wireType)
				}
				x.SelfDelegation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SelfDelegation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SelfDelegationUnbonding", wireType)
				}
				x.SelfDelegationUnbonding = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SelfDelegationUnbonding |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
				}
				x.TotalDelegation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalDelegation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegatorCount", wireType)
				}
				x.DelegatorCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DelegatorCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pools = append(x.Pools, &PoolMembership{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pools[len(x.Pools)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_StakerMetadata                           protoreflect.MessageDescriptor
	fd_StakerMetadata_commission                protoreflect.FieldDescriptor
	fd_StakerMetadata_moniker                   protoreflect.FieldDescriptor
	fd_StakerMetadata_website                   protoreflect.FieldDescriptor
	fd_StakerMetadata_identity                  protoreflect.FieldDescriptor
	fd_StakerMetadata_security_contact          protoreflect.FieldDescriptor
	fd_StakerMetadata_details                   protoreflect.FieldDescriptor
	fd_StakerMetadata_pending_commission_change protoreflect.FieldDescriptor
	fd_StakerMetadata_commission_rewards        protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_query_proto_init()
	md_StakerMetadata = File_kyve_query_v1beta1_query_proto.Messages().ByName("StakerMetadata")
	fd_StakerMetadata_commission = md_StakerMetadata.Fields().ByName("commission")
	fd_StakerMetadata_moniker = md_StakerMetadata.Fields().ByName("moniker")
	fd_StakerMetadata_website = md_StakerMetadata.Fields().ByName("website")
	fd_StakerMetadata_identity = md_StakerMetadata.Fields().ByName("identity")
	fd_StakerMetadata_security_contact = md_StakerMetadata.Fields().ByName("security_contact")
	fd_StakerMetadata_details = md_StakerMetadata.Fields().ByName("details")
	fd_StakerMetadata_pending_commission_change = md_StakerMetadata.Fields().ByName("pending_commission_change")
	fd_StakerMetadata_commission_rewards = md_StakerMetadata.Fields().ByName("commission_rewards")
}

var _ protoreflect.Message = (*fastReflection_StakerMetadata)(nil)

type fastReflection_StakerMetadata StakerMetadata

func (x *StakerMetadata) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StakerMetadata)(x)
}

func (x *StakerMetadata) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StakerMetadata_messageType fastReflection_StakerMetadata_messageType
var _ protoreflect.MessageType = fastReflection_StakerMetadata_messageType{}

type fastReflection_StakerMetadata_messageType struct{}

func (x fastReflection_StakerMetadata_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StakerMetadata)(nil)
}
func (x fastReflection_StakerMetadata_messageType) New() protoreflect.Message {
	return new(fastReflection_StakerMetadata)
}
func (x fastReflection_StakerMetadata_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StakerMetadata
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StakerMetadata) Descriptor() protoreflect.MessageDescriptor {
	return md_StakerMetadata
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StakerMetadata) Type() protoreflect.MessageType {
	return _fastReflection_StakerMetadata_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StakerMetadata) New() protoreflect.Message {
	return new(fastReflection_StakerMetadata)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StakerMetadata) Interface() protoreflect.ProtoMessage {
	return (*StakerMetadata)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StakerMetadata) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Commission != "" {
		value := protoreflect.ValueOfString(x.Commission)
		if !f(fd_StakerMetadata_commission, value) {
			return
		}
	}
	if x.Moniker != "" {
		value := protoreflect.ValueOfString(x.Moniker)
		if !f(fd_StakerMetadata_moniker, value) {
			return
		}
	}
	if x.Website != "" {
		value := protoreflect.ValueOfString(x.Website)
		if !f(fd_StakerMetadata_website, value) {
			return
		}
	}
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_StakerMetadata_identity, value) {
			return
		}
	}
	if x.SecurityContact != "" {
		value := protoreflect.ValueOfString(x.SecurityContact)
		if !f(fd_StakerMetadata_security_contact, value) {
			return
		}
	}
	if x.Details != "" {
		value := protoreflect.ValueOfString(x.Details)
		if !f(fd_StakerMetadata_details, value) {
			return
		}
	}
	if x.PendingCommissionChange != nil {
		value := protoreflect.ValueOfMessage(x.PendingCommissionChange.ProtoReflect())
		if !f(fd_StakerMetadata_pending_commission_change, value) {
			return
		}
	}
	if x.CommissionRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CommissionRewards)
		if !f(fd_StakerMetadata_commission_rewards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StakerMetadata) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.StakerMetadata.commission":
		return x.Commission != ""
	case "kyve.query.v1beta1.StakerMetadata.moniker":
		return x.Moniker != ""
	case "kyve.query.v1beta1.StakerMetadata.website":
		return x.Website != ""
	case "kyve.query.v1beta1.StakerMetadata.identity":
		return x.Identity != ""
	case "kyve.query.v1beta1.StakerMetadata.security_contact":
		return x.SecurityContact != ""
	case "kyve.query.v1beta1.StakerMetadata.details":
		return x.Details != ""
	case "kyve.query.v1beta1.StakerMetadata.pending_commission_change":
		return x.PendingCommissionChange != nil
	case "kyve.query.v1beta1.StakerMetadata.commission_rewards":
		return x.CommissionRewards != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.StakerMetadata"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.StakerMetadata does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakerMetadata) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.StakerMetadata.commission":
		x.Commission = ""
	case "kyve.query.v1beta1.StakerMetadata.moniker":
		x.Moniker = ""
	case "kyve.query.v1beta1.StakerMetadata.website":
		x.Website = ""
	case "kyve.query.v1beta1.StakerMetadata.identity":
		x.Identity = ""
	case "kyve.query.v1beta1.StakerMetadata.security_contact":
		x.SecurityContact = ""
	case "kyve.query.v1beta1.StakerMetadata.details":
		x.Details = ""
	case "kyve.query.v1beta1.StakerMetadata.pending_commission_change":
		x.PendingCommissionChange = nil
	case "kyve.query.v1beta1.StakerMetadata.commission_rewards":
		x.CommissionRewards = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.StakerMetadata"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.StakerMetadata does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StakerMetadata) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.StakerMetadata.commission":
		value := x.Commission
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.StakerMetadata.moniker":
		value := x.Moniker
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.StakerMetadata.website":
		value := x.Website
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.StakerMetadata.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.StakerMetadata.security_contact":
		value := x.SecurityContact
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.StakerMetadata.details":
		value := x.Details
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.StakerMetadata.pending_commission_change":
		value := x.PendingCommissionChange
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.query.v1beta1.StakerMetadata.commission_rewards":
		value := x.CommissionRewards
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.StakerMetadata"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.StakerMetadata does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakerMetadata) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.StakerMetadata.commission":
		x.Commission = value.Interface().(string)
	case "kyve.query.v1beta1.StakerMetadata.moniker":
		x.Moniker = value.Interface().(string)
	case "kyve.query.v1beta1.StakerMetadata.website":
		x.Website = value.Interface().(string)
	case "kyve.query.v1beta1.StakerMetadata.identity":
		x.Identity = value.Interface().(string)
	case "kyve.query.v1beta1.StakerMetadata.security_contact":
		x.SecurityContact = value.Interface().(string)
	case "kyve.query.v1beta1.StakerMetadata.details":
		x.Details = value.Interface().(string)
	case "kyve.query.v1beta1.StakerMetadata.pending_commission_change":
		x.PendingCommissionChange = value.Message().Interface().(*CommissionChangeEntry)
	case "kyve.query.v1beta1.StakerMetadata.commission_rewards":
		x.CommissionRewards = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.StakerMetadata"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.StakerMetadata does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakerMetadata) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.StakerMetadata.pending_commission_change":
		if x.PendingCommissionChange == nil {
			x.PendingCommissionChange = new(CommissionChangeEntry)
		}
		return protoreflect.ValueOfMessage(x.PendingCommissionChange.ProtoReflect())
	case "kyve.query.v1beta1.StakerMetadata.commission":
		panic(fmt.Errorf("field commission of message kyve.query.v1beta1.StakerMetadata is not mutable"))
	case "kyve.query.v1beta1.StakerMetadata.moniker":
		panic(fmt.Errorf("field moniker of message kyve.query.v1beta1.StakerMetadata is not mutable"))
	case "kyve.query.v1beta1.StakerMetadata.website":
		panic(fmt.Errorf("field website of message kyve.query.v1beta1.StakerMetadata is not mutable"))
	case "kyve.query.v1beta1.StakerMetadata.identity":
		panic(fmt.Errorf("field identity of message kyve.query.v1beta1.StakerMetadata is not mutable"))
	case "kyve.query.v1beta1.StakerMetadata.security_contact":
		panic(fmt.Errorf("field security_contact of message kyve.query.v1beta1.StakerMetadata is not mutable"))
	case "kyve.query.v1beta1.StakerMetadata.details":
		panic(fmt.Errorf("field details of message kyve.query.v1beta1.StakerMetadata is not mutable"))
	case "kyve.query.v1beta1.StakerMetadata.commission_rewards":
		panic(fmt.Errorf("field commission_rewards of message kyve.query.v1beta1.StakerMetadata is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.StakerMetadata"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.StakerMetadata does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StakerMetadata) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.StakerMetadata.commission":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.StakerMetadata.moniker":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.StakerMetadata.website":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.StakerMetadata.identity":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.StakerMetadata.security_contact":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.StakerMetadata.details":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.StakerMetadata.pending_commission_change":
		m := new(CommissionChangeEntry)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.query.v1beta1.StakerMetadata.commission_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.StakerMetadata"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.StakerMetadata does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StakerMetadata) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.StakerMetadata", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StakerMetadata) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakerMetadata) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StakerMetadata) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StakerMetadata) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StakerMetadata)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Commission)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Moniker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Website)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SecurityContact)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Details)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PendingCommissionChange != nil {
			l = options.Size(x.PendingCommissionChange)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CommissionRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.CommissionRewards))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StakerMetadata)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CommissionRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CommissionRewards))
			i--
			dAtA[i] = 0x40
		}
		if x.PendingCommissionChange != nil {
			encoded, err := options.Marshal(x.PendingCommissionChange)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Details) > 0 {
			i -= len(x.Details)
			copy(dAtA[i:], x.Details)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Details)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.SecurityContact) > 0 {
			i -= len(x.SecurityContact)
			copy(dAtA[i:], x.SecurityContact)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SecurityContact)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Website) > 0 {
			i -= len(x.Website)
			copy(dAtA[i:], x.Website)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Website)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Moniker) > 0 {
			i -= len(x.Moniker)
			copy(dAtA[i:], x.Moniker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Moniker)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Commission) > 0 {
			i -= len(x.Commission)
			copy(dAtA[i:], x.Commission)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commission)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StakerMetadata)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StakerMetadata: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StakerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commission = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Moniker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Website = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SecurityContact = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Details = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingCommissionChange", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PendingCommissionChange == nil {
					x.PendingCommissionChange = &CommissionChangeEntry{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PendingCommissionChange); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommissionRewards", wireType)
				}
				x.CommissionRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CommissionRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CommissionChangeEntry               protoreflect.MessageDescriptor
	fd_CommissionChangeEntry_commission    protoreflect.FieldDescriptor
	fd_CommissionChangeEntry_creation_date protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_query_proto_init()
	md_CommissionChangeEntry = File_kyve_query_v1beta1_query_proto.Messages().ByName("CommissionChangeEntry")
	fd_CommissionChangeEntry_commission = md_CommissionChangeEntry.Fields().ByName("commission")
	fd_CommissionChangeEntry_creation_date = md_CommissionChangeEntry.Fields().ByName("creation_date")
}

var _ protoreflect.Message = (*fastReflection_CommissionChangeEntry)(nil)

type fastReflection_CommissionChangeEntry CommissionChangeEntry

func (x *CommissionChangeEntry) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CommissionChangeEntry)(x)
}

func (x *CommissionChangeEntry) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CommissionChangeEntry_messageType fastReflection_CommissionChangeEntry_messageType
var _ protoreflect.MessageType = fastReflection_CommissionChangeEntry_messageType{}

type fastReflection_CommissionChangeEntry_messageType struct{}

func (x fastReflection_CommissionChangeEntry_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CommissionChangeEntry)(nil)
}
func (x fastReflection_CommissionChangeEntry_messageType) New() protoreflect.Message {
	return new(fastReflection_CommissionChangeEntry)
}
func (x fastReflection_CommissionChangeEntry_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CommissionChangeEntry
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CommissionChangeEntry) Descriptor() protoreflect.MessageDescriptor {
	return md_CommissionChangeEntry
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CommissionChangeEntry) Type() protoreflect.MessageType {
	return _fastReflection_CommissionChangeEntry_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CommissionChangeEntry) New() protoreflect.Message {
	return new(fastReflection_CommissionChangeEntry)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CommissionChangeEntry) Interface() protoreflect.ProtoMessage {
	return (*CommissionChangeEntry)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CommissionChangeEntry) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Commission != "" {
		value := protoreflect.ValueOfString(x.Commission)
		if !f(fd_CommissionChangeEntry_commission, value) {
			return
		}
	}
	if x.CreationDate != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreationDate)
		if !f(fd_CommissionChangeEntry_creation_date, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CommissionChangeEntry) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.CommissionChangeEntry.commission":
		return x.Commission != ""
	case "kyve.query.v1beta1.CommissionChangeEntry.creation_date":
		return x.CreationDate != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.CommissionChangeEntry.commission":
		x.Commission = ""
	case "kyve.query.v1beta1.CommissionChangeEntry.creation_date":
		x.CreationDate = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CommissionChangeEntry) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.CommissionChangeEntry.commission":
		value := x.Commission
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.CommissionChangeEntry.creation_date":
		value := x.CreationDate
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.CommissionChangeEntry does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.CommissionChangeEntry.commission":
		x.Commission = value.Interface().(string)
	case "kyve.query.v1beta1.CommissionChangeEntry.creation_date":
		x.CreationDate = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.CommissionChangeEntry.commission":
		panic(fmt.Errorf("field commission of message kyve.query.v1beta1.CommissionChangeEntry is not mutable"))
	case "kyve.query.v1beta1.CommissionChangeEntry.creation_date":
		panic(fmt.Errorf("field creation_date of message kyve.query.v1beta1.CommissionChangeEntry is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CommissionChangeEntry) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.CommissionChangeEntry.commission":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.CommissionChangeEntry.creation_date":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CommissionChangeEntry) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.CommissionChangeEntry", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CommissionChangeEntry) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CommissionChangeEntry) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CommissionChangeEntry) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CommissionChangeEntry)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Commission)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreationDate != 0 {
			n += 1 + runtime.Sov(uint64(x.CreationDate))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CommissionChangeEntry)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CreationDate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreationDate))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Commission) > 0 {
			i -= len(x.Commission)
			copy(dAtA[i:], x.Commission)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commission)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CommissionChangeEntry)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommissionChangeEntry: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommissionChangeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commission = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
				}
				x.CreationDate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreationDate |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PoolMembership            protoreflect.MessageDescriptor
	fd_PoolMembership_pool       protoreflect.FieldDescriptor
	fd_PoolMembership_points     protoreflect.FieldDescriptor
	fd_PoolMembership_is_leaving protoreflect.FieldDescriptor
	fd_PoolMembership_valaddress protoreflect.FieldDescriptor
	fd_PoolMembership_balance    protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_query_proto_init()
	md_PoolMembership = File_kyve_query_v1beta1_query_proto.Messages().ByName("PoolMembership")
	fd_PoolMembership_pool = md_PoolMembership.Fields().ByName("pool")
	fd_PoolMembership_points = md_PoolMembership.Fields().ByName("points")
	fd_PoolMembership_is_leaving = md_PoolMembership.Fields().ByName("is_leaving")
	fd_PoolMembership_valaddress = md_PoolMembership.Fields().ByName("valaddress")
	fd_PoolMembership_balance = md_PoolMembership.Fields().ByName("balance")
}

var _ protoreflect.Message = (*fastReflection_PoolMembership)(nil)

type fastReflection_PoolMembership PoolMembership

func (x *PoolMembership) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolMembership)(x)
}

func (x *PoolMembership) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolMembership_messageType fastReflection_PoolMembership_messageType
var _ protoreflect.MessageType = fastReflection_PoolMembership_messageType{}

type fastReflection_PoolMembership_messageType struct{}

func (x fastReflection_PoolMembership_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolMembership)(nil)
}
func (x fastReflection_PoolMembership_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolMembership)
}
func (x fastReflection_PoolMembership_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolMembership
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolMembership) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolMembership
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolMembership) Type() protoreflect.MessageType {
	return _fastReflection_PoolMembership_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolMembership) New() protoreflect.Message {
	return new(fastReflection_PoolMembership)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolMembership) Interface() protoreflect.ProtoMessage {
	return (*PoolMembership)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolMembership) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pool != nil {
		value := protoreflect.ValueOfMessage(x.Pool.ProtoReflect())
		if !f(fd_PoolMembership_pool, value) {
			return
		}
	}
	if x.Points != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Points)
		if !f(fd_PoolMembership_points, value) {
			return
		}
	}
	if x.IsLeaving != false {
		value := protoreflect.ValueOfBool(x.IsLeaving)
		if !f(fd_PoolMembership_is_leaving, value) {
			return
		}
	}
	if x.Valaddress != "" {
		value := protoreflect.ValueOfString(x.Valaddress)
		if !f(fd_PoolMembership_valaddress, value) {
			return
		}
	}
	if x.Balance != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Balance)
		if !f(fd_PoolMembership_balance, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolMembership) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolMembership.pool":
		return x.Pool != nil
	case "kyve.query.v1beta1.PoolMembership.points":
		return x.Points != uint64(0)
	case "kyve.query.v1beta1.PoolMembership.is_leaving":
		return x.IsLeaving != false
	case "kyve.query.v1beta1.PoolMembership.valaddress":
		return x.Valaddress != ""
	case "kyve.query.v1beta1.PoolMembership.balance":
		return x.Balance != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolMembership"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolMembership does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolMembership) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolMembership.pool":
		x.Pool = nil
	case "kyve.query.v1beta1.PoolMembership.points":
		x.Points = uint64(0)
	case "kyve.query.v1beta1.PoolMembership.is_leaving":
		x.IsLeaving = false
	case "kyve.query.v1beta1.PoolMembership.valaddress":
		x.Valaddress = ""
	case "kyve.query.v1beta1.PoolMembership.balance":
		x.Balance = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolMembership"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolMembership does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolMembership) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.PoolMembership.pool":
		value := x.Pool
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.query.v1beta1.PoolMembership.points":
		value := x.Points
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.PoolMembership.is_leaving":
		value := x.IsLeaving
		return protoreflect.ValueOfBool(value)
	case "kyve.query.v1beta1.PoolMembership.valaddress":
		value := x.Valaddress
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.PoolMembership.balance":
		value := x.Balance
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolMembership"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolMembership does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolMembership) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolMembership.pool":
		x.Pool = value.Message().Interface().(*BasicPool)
	case "kyve.query.v1beta1.PoolMembership.points":
		x.Points = value.Uint()
	case "kyve.query.v1beta1.PoolMembership.is_leaving":
		x.IsLeaving = value.Bool()
	case "kyve.query.v1beta1.PoolMembership.valaddress":
		x.Valaddress = value.Interface().(string)
	case "kyve.query.v1beta1.PoolMembership.balance":
		x.Balance = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolMembership"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolMembership does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolMembership) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolMembership.pool":
		if x.Pool == nil {
			x.Pool = new(BasicPool)
		}
		return protoreflect.ValueOfMessage(x.Pool.ProtoReflect())
	case "kyve.query.v1beta1.PoolMembership.points":
		panic(fmt.Errorf("field points of message kyve.query.v1beta1.PoolMembership is not mutable"))
	case "kyve.query.v1beta1.PoolMembership.is_leaving":
		panic(fmt.Errorf("field is_leaving of message kyve.query.v1beta1.PoolMembership is not mutable"))
	case "kyve.query.v1beta1.PoolMembership.valaddress":
		panic(fmt.Errorf("field valaddress of message kyve.query.v1beta1.PoolMembership is not mutable"))
	case "kyve.query.v1beta1.PoolMembership.balance":
		panic(fmt.Errorf("field balance of message kyve.query.v1beta1.PoolMembership is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolMembership"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolMembership does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolMembership) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolMembership.pool":
		m := new(BasicPool)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.query.v1beta1.PoolMembership.points":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.PoolMembership.is_leaving":
		return protoreflect.ValueOfBool(false)
	case "kyve.query.v1beta1.PoolMembership.valaddress":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.PoolMembership.balance":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolMembership"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolMembership does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolMembership) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.PoolMembership", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolMembership) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolMembership) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolMembership) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolMembership) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolMembership)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Pool != nil {
			l = options.Size(x.Pool)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Points != 0 {
			n += 1 + runtime.Sov(uint64(x.Points))
		}
		if x.IsLeaving {
			n += 2
		}
		l = len(x.Valaddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Balance != 0 {
			n += 1 + runtime.Sov(uint64(x.Balance))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolMembership)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Balance != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Balance))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Valaddress) > 0 {
			i -= len(x.Valaddress)
			copy(dAtA[i:], x.Valaddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Valaddress)))
			i--
			dAtA[i] = 0x22
		}
		if x.IsLeaving {
			i--
			if x.IsLeaving {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.Points != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Points))
			i--
			dAtA[i] = 0x10
		}
		if x.Pool != nil {
			encoded, err := options.Marshal(x.Pool)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolMembership)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolMembership: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolMembership: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pool == nil {
					x.Pool = &BasicPool{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pool); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
				}
				x.Points = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Points |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsLeaving", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsLeaving = bool(v != 0)
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Valaddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Valaddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
				}
				x.Balance = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Balance |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kyve/query/v1beta1/query.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BasicPool contains the necessary properties need for a pool
// to be displayed in the UI
type BasicPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the pool
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the pool
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// runtime for the protocol nodes
	// like evm, bitcoin, etc.
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo of the pool
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// operating_cost is the base payout for each bundle reward
	OperatingCost uint64 `protobuf:"varint,5,opt,name=operating_cost,json=operatingCost,proto3" json:"operating_cost,omitempty"`
	// upload_interval is the interval bundles get created
	UploadInterval uint64 `protobuf:"varint,6,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// total_funds of the pool. If the pool runs
	// out of funds no more bundles will be produced
	TotalFunds uint64 `protobuf:"varint,7,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	// total_delegation of the pool
	TotalDelegation uint64 `protobuf:"varint,8,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// status of the pool if pool is able
	// to produce bundles, etc.
	Status v1beta1.PoolStatus `protobuf:"varint,9,opt,name=status,proto3,enum=kyve.pool.v1beta1.PoolStatus" json:"status,omitempty"`
}

func (x *BasicPool) Reset() {
	*x = BasicPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicPool) ProtoMessage() {}

// Deprecated: Use BasicPool.ProtoReflect.Descriptor instead.
func (*BasicPool) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_query_proto_rawDescGZIP(), []int{0}
}

func (x *BasicPool) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BasicPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BasicPool) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *BasicPool) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *BasicPool) GetOperatingCost() uint64 {
	if x != nil {
		return x.OperatingCost
	}
	return 0
}

func (x *BasicPool) GetUploadInterval() uint64 {
	if x != nil {
		return x.UploadInterval
	}
	return 0
}

func (x *BasicPool) GetTotalFunds() uint64 {
	if x != nil {
		return x.TotalFunds
	}
	return 0
}

func (x *BasicPool) GetTotalDelegation() uint64 {
	if x != nil {
		return x.TotalDelegation
	}
	return 0
}

func (x *BasicPool) GetStatus() v1beta1.PoolStatus {
	if x != nil {
		return x.Status
	}
	return v1beta1.PoolStatus(0)
}

// FullStaker aggregates information from the staker and its delegators
// as well as pending queue entries into one object.
// It contains almost all needed information for a convenient usage
type FullStaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address of the staker
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// metadata as logo, moniker, etc.
	Metadata *StakerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// amount the staker has delegated to himself
	SelfDelegation uint64 `protobuf:"varint,3,opt,name=self_delegation,json=selfDelegation,proto3" json:"self_delegation,omitempty"`
	// unbonding_amount is the amount the staker is currently unbonding
	// from the self-delegation.
	// This amount can be larger than `amount` when the staker
	// got slashed during unbonding. However, at the end of
	// the unbonding period this amount is double checked with the
	// remaining amount.
	SelfDelegationUnbonding uint64 `protobuf:"varint,4,opt,name=self_delegation_unbonding,json=selfDelegationUnbonding,proto3" json:"self_delegation_unbonding,omitempty"`
	// total_delegation returns the sum of all $KYVE users
	// have delegated to this staker
	TotalDelegation uint64 `protobuf:"varint,5,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// delegator_count is the total number of individual
	// delegator addresses for that user.
	DelegatorCount uint64 `protobuf:"varint,6,opt,name=delegator_count,json=delegatorCount,proto3" json:"delegator_count,omitempty"`
	// pools is a list of all pools the staker is currently
	// participating, i.e. allowed to vote and upload data.
	Pools []*PoolMembership `protobuf:"bytes,7,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *FullStaker) Reset() {
	*x = FullStaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullStaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullStaker) ProtoMessage() {}

// Deprecated: Use FullStaker.ProtoReflect.Descriptor instead.
func (*FullStaker) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_query_proto_rawDescGZIP(), []int{1}
}

func (x *FullStaker) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FullStaker) GetMetadata() *StakerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FullStaker) GetSelfDelegation() uint64 {
	if x != nil {
		return x.SelfDelegation
	}
	return 0
}

func (x *FullStaker) GetSelfDelegationUnbonding() uint64 {
	if x != nil {
		return x.SelfDelegationUnbonding
	}
	return 0
}

func (x *FullStaker) GetTotalDelegation() uint64 {
	if x != nil {
		return x.TotalDelegation
	}
	return 0
}

func (x *FullStaker) GetDelegatorCount() uint64 {
	if x != nil {
		return x.DelegatorCount
	}
	return 0
}

func (x *FullStaker) GetPools() []*PoolMembership {
	if x != nil {
		return x.Pools
	}
	return nil
}

// StakerMetadata contains static information for a staker
type StakerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commission is the percentage of the rewards that will
	// get transferred to the staker before the remaining
	// rewards are split across all delegators
	Commission string `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker is a human-readable name for displaying
	// the staker in the UI
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website is a https-link to the website of the staker
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// identity from keybase.io
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// security_contact ...
	SecurityContact string `protobuf:"bytes,5,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details ...
	Details string `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	// pending_commission_change shows if the staker plans
	// to change its commission. Delegators will see a warning in
	// the UI. A Commission change takes some time until
	// the commission is applied. Users have time to redelegate
	// if they not agree with the new commission.
	PendingCommissionChange *CommissionChangeEntry `protobuf:"bytes,7,opt,name=pending_commission_change,json=pendingCommissionChange,proto3" json:"pending_commission_change,omitempty"`
	// commission_rewards are the rewards in $KYVE earned through commission
	CommissionRewards uint64 `protobuf:"varint,8,opt,name=commission_rewards,json=commissionRewards,proto3" json:"commission_rewards,omitempty"`
}

func (x *StakerMetadata) Reset() {
	*x = StakerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakerMetadata) ProtoMessage() {}

// Deprecated: Use StakerMetadata.ProtoReflect.Descriptor instead.
func (*StakerMetadata) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_query_proto_rawDescGZIP(), []int{2}
}

func (x *StakerMetadata) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *StakerMetadata) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *StakerMetadata) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *StakerMetadata) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *StakerMetadata) GetSecurityContact() string {
	if x != nil {
		return x.SecurityContact
	}
	return ""
}

func (x *StakerMetadata) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *StakerMetadata) GetPendingCommissionChange() *CommissionChangeEntry {
	if x != nil {
		return x.PendingCommissionChange
	}
	return nil
}

func (x *StakerMetadata) GetCommissionRewards() uint64 {
	if x != nil {
		return x.CommissionRewards
	}
	return 0
}

// CommissionChangeEntry shows when the old commission
// of a staker will change to the new commission
type CommissionChangeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commission is the new commission that will
	// become active once the change-time is over
	Commission string `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission,omitempty"`
	// creation_date is the UNIX-timestamp (in seconds)
	// of when the entry was created.
	CreationDate int64 `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *CommissionChangeEntry) Reset() {
	*x = CommissionChangeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommissionChangeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionChangeEntry) ProtoMessage() {}

// Deprecated: Use CommissionChangeEntry.ProtoReflect.Descriptor instead.
func (*CommissionChangeEntry) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_query_proto_rawDescGZIP(), []int{3}
}

func (x *CommissionChangeEntry) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *CommissionChangeEntry) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

// PoolMembership shows in which pool the staker
// is participating
type PoolMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pool contains useful information about the pool
	Pool *BasicPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// points indicates if the staker is inactive
	// If the staker misses a vote, a point is added.
	// After 5 points the staker is removed from
	// the stakers set.
	Points uint64 `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	// is_leaving indicates if a user has scheduled a
	// a PoolLeave entry. After the leave-time is over
	// the staker will no longer participate in that pool
	IsLeaving bool `protobuf:"varint,3,opt,name=is_leaving,json=isLeaving,proto3" json:"is_leaving,omitempty"`
	// Valaddress is the address which is authorized to vote
	// and submit bundles. If the server gets compromised
	// the staker can just change the valaddress.
	Valaddress string `protobuf:"bytes,4,opt,name=valaddress,proto3" json:"valaddress,omitempty"`
	// balance is the valaddress account balance and indicates
	// whether or not the valaccount needs additional funds to
	// pay for gas fees
	Balance uint64 `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PoolMembership) Reset() {
	*x = PoolMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMembership) ProtoMessage() {}

// Deprecated: Use PoolMembership.ProtoReflect.Descriptor instead.
func (*PoolMembership) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_query_proto_rawDescGZIP(), []int{4}
}

func (x *PoolMembership) GetPool() *BasicPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *PoolMembership) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *PoolMembership) GetIsLeaving() bool {
	if x != nil {
		return x.IsLeaving
	}
	return false
}

func (x *PoolMembership) GetValaddress() string {
	if x != nil {
		return x.Valaddress
	}
	return ""
}

func (x *PoolMembership) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

var File_kyve_query_v1beta1_query_proto protoreflect.FileDescriptor

var file_kyve_query_v1beta1_query_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6b, 0x79, 0x76, 0x65,
	0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x02, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x0a,
	0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x19, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x73, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b,
	0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f,
	0x6e, 0x69, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e,
	0x69, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x65, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0xd3, 0x01, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4b, 0x59, 0x56, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2f, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4b, 0x51, 0x58, 0xaa,
	0x02, 0x12, 0x4b, 0x79, 0x76, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x12, 0x4b, 0x79, 0x76, 0x65, 0x5c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1e, 0x4b, 0x79, 0x76, 0x65,
	0x5c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x4b, 0x79, 0x76,
	0x65, 0x3a, 0x3a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kyve_query_v1beta1_query_proto_rawDescOnce sync.Once
	file_kyve_query_v1beta1_query_proto_rawDescData = file_kyve_query_v1beta1_query_proto_rawDesc
)

func file_kyve_query_v1beta1_query_proto_rawDescGZIP() []byte {
	file_kyve_query_v1beta1_query_proto_rawDescOnce.Do(func() {
		file_kyve_query_v1beta1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_kyve_query_v1beta1_query_proto_rawDescData)
	})
	return file_kyve_query_v1beta1_query_proto_rawDescData
}

var file_kyve_query_v1beta1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kyve_query_v1beta1_query_proto_goTypes = []interface{}{
	(*BasicPool)(nil),             // 0: kyve.query.v1beta1.BasicPool
	(*FullStaker)(nil),            // 1: kyve.query.v1beta1.FullStaker
	(*StakerMetadata)(nil),        // 2: kyve.query.v1beta1.StakerMetadata
	(*CommissionChangeEntry)(nil), // 3: kyve.query.v1beta1.CommissionChangeEntry
	(*PoolMembership)(nil),        // 4: kyve.query.v1beta1.PoolMembership
	(v1beta1.PoolStatus)(0),       // 5: kyve.pool.v1beta1.PoolStatus
}
var file_kyve_query_v1beta1_query_proto_depIdxs = []int32{
	5, // 0: kyve.query.v1beta1.BasicPool.status:type_name -> kyve.pool.v1beta1.PoolStatus
	2, // 1: kyve.query.v1beta1.FullStaker.metadata:type_name -> kyve.query.v1beta1.StakerMetadata
	4, // 2: kyve.query.v1beta1.FullStaker.pools:type_name -> kyve.query.v1beta1.PoolMembership
	3, // 3: kyve.query.v1beta1.StakerMetadata.pending_commission_change:type_name -> kyve.query.v1beta1.CommissionChangeEntry
	0, // 4: kyve.query.v1beta1.PoolMembership.pool:type_name -> kyve.query.v1beta1.BasicPool
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kyve_query_v1beta1_query_proto_init() }
func file_kyve_query_v1beta1_query_proto_init() {
	if File_kyve_query_v1beta1_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kyve_query_v1beta1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullStaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommissionChangeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kyve_query_v1beta1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kyve_query_v1beta1_query_proto_goTypes,
		DependencyIndexes: file_kyve_query_v1beta1_query_proto_depIdxs,
		MessageInfos:      file_kyve_query_v1beta1_query_proto_msgTypes,
	}.Build()
	File_kyve_query_v1beta1_query_proto = out.File
	file_kyve_query_v1beta1_query_proto_rawDesc = nil
	file_kyve_query_v1beta1_query_proto_goTypes = nil
	file_kyve_query_v1beta1_query_proto_depIdxs = nil
}
