// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package queryv1beta1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/query/v1beta1"
	fmt "fmt"
	v1beta12 "github.com/KYVENetwork/chain/pulsar/kyve/bundles/v1beta1"
	v1beta11 "github.com/KYVENetwork/chain/pulsar/kyve/pool/v1beta1"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_QueryPoolsRequest                     protoreflect.MessageDescriptor
	fd_QueryPoolsRequest_pagination          protoreflect.FieldDescriptor
	fd_QueryPoolsRequest_search              protoreflect.FieldDescriptor
	fd_QueryPoolsRequest_runtime             protoreflect.FieldDescriptor
	fd_QueryPoolsRequest_disabled            protoreflect.FieldDescriptor
	fd_QueryPoolsRequest_storage_provider_id protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_pools_proto_init()
	md_QueryPoolsRequest = File_kyve_query_v1beta1_pools_proto.Messages().ByName("QueryPoolsRequest")
	fd_QueryPoolsRequest_pagination = md_QueryPoolsRequest.Fields().ByName("pagination")
	fd_QueryPoolsRequest_search = md_QueryPoolsRequest.Fields().ByName("search")
	fd_QueryPoolsRequest_runtime = md_QueryPoolsRequest.Fields().ByName("runtime")
	fd_QueryPoolsRequest_disabled = md_QueryPoolsRequest.Fields().ByName("disabled")
	fd_QueryPoolsRequest_storage_provider_id = md_QueryPoolsRequest.Fields().ByName("storage_provider_id")
}

var _ protoreflect.Message = (*fastReflection_QueryPoolsRequest)(nil)

type fastReflection_QueryPoolsRequest QueryPoolsRequest

func (x *QueryPoolsRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryPoolsRequest)(x)
}

func (x *QueryPoolsRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryPoolsRequest_messageType fastReflection_QueryPoolsRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryPoolsRequest_messageType{}

type fastReflection_QueryPoolsRequest_messageType struct{}

func (x fastReflection_QueryPoolsRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryPoolsRequest)(nil)
}
func (x fastReflection_QueryPoolsRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryPoolsRequest)
}
func (x fastReflection_QueryPoolsRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolsRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryPoolsRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolsRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryPoolsRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryPoolsRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryPoolsRequest) New() protoreflect.Message {
	return new(fastReflection_QueryPoolsRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryPoolsRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryPoolsRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryPoolsRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryPoolsRequest_pagination, value) {
			return
		}
	}
	if x.Search != "" {
		value := protoreflect.ValueOfString(x.Search)
		if !f(fd_QueryPoolsRequest_search, value) {
			return
		}
	}
	if x.Runtime != "" {
		value := protoreflect.ValueOfString(x.Runtime)
		if !f(fd_QueryPoolsRequest_runtime, value) {
			return
		}
	}
	if x.Disabled != false {
		value := protoreflect.ValueOfBool(x.Disabled)
		if !f(fd_QueryPoolsRequest_disabled, value) {
			return
		}
	}
	if x.StorageProviderId != uint32(0) {
		value := protoreflect.ValueOfUint32(x.StorageProviderId)
		if !f(fd_QueryPoolsRequest_storage_provider_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryPoolsRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsRequest.pagination":
		return x.Pagination != nil
	case "kyve.query.v1beta1.QueryPoolsRequest.search":
		return x.Search != ""
	case "kyve.query.v1beta1.QueryPoolsRequest.runtime":
		return x.Runtime != ""
	case "kyve.query.v1beta1.QueryPoolsRequest.disabled":
		return x.Disabled != false
	case "kyve.query.v1beta1.QueryPoolsRequest.storage_provider_id":
		return x.StorageProviderId != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsRequest.pagination":
		x.Pagination = nil
	case "kyve.query.v1beta1.QueryPoolsRequest.search":
		x.Search = ""
	case "kyve.query.v1beta1.QueryPoolsRequest.runtime":
		x.Runtime = ""
	case "kyve.query.v1beta1.QueryPoolsRequest.disabled":
		x.Disabled = false
	case "kyve.query.v1beta1.QueryPoolsRequest.storage_provider_id":
		x.StorageProviderId = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryPoolsRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.QueryPoolsRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.query.v1beta1.QueryPoolsRequest.search":
		value := x.Search
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.QueryPoolsRequest.runtime":
		value := x.Runtime
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.QueryPoolsRequest.disabled":
		value := x.Disabled
		return protoreflect.ValueOfBool(value)
	case "kyve.query.v1beta1.QueryPoolsRequest.storage_provider_id":
		value := x.StorageProviderId
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	case "kyve.query.v1beta1.QueryPoolsRequest.search":
		x.Search = value.Interface().(string)
	case "kyve.query.v1beta1.QueryPoolsRequest.runtime":
		x.Runtime = value.Interface().(string)
	case "kyve.query.v1beta1.QueryPoolsRequest.disabled":
		x.Disabled = value.Bool()
	case "kyve.query.v1beta1.QueryPoolsRequest.storage_provider_id":
		x.StorageProviderId = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "kyve.query.v1beta1.QueryPoolsRequest.search":
		panic(fmt.Errorf("field search of message kyve.query.v1beta1.QueryPoolsRequest is not mutable"))
	case "kyve.query.v1beta1.QueryPoolsRequest.runtime":
		panic(fmt.Errorf("field runtime of message kyve.query.v1beta1.QueryPoolsRequest is not mutable"))
	case "kyve.query.v1beta1.QueryPoolsRequest.disabled":
		panic(fmt.Errorf("field disabled of message kyve.query.v1beta1.QueryPoolsRequest is not mutable"))
	case "kyve.query.v1beta1.QueryPoolsRequest.storage_provider_id":
		panic(fmt.Errorf("field storage_provider_id of message kyve.query.v1beta1.QueryPoolsRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryPoolsRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.query.v1beta1.QueryPoolsRequest.search":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.QueryPoolsRequest.runtime":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.QueryPoolsRequest.disabled":
		return protoreflect.ValueOfBool(false)
	case "kyve.query.v1beta1.QueryPoolsRequest.storage_provider_id":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryPoolsRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.QueryPoolsRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryPoolsRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryPoolsRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryPoolsRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryPoolsRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Search)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Runtime)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Disabled {
			n += 2
		}
		if x.StorageProviderId != 0 {
			n += 1 + runtime.Sov(uint64(x.StorageProviderId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolsRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.StorageProviderId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StorageProviderId))
			i--
			dAtA[i] = 0x28
		}
		if x.Disabled {
			i--
			if x.Disabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if len(x.Runtime) > 0 {
			i -= len(x.Runtime)
			copy(dAtA[i:], x.Runtime)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Runtime)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Search) > 0 {
			i -= len(x.Search)
			copy(dAtA[i:], x.Search)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Search)))
			i--
			dAtA[i] = 0x12
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolsRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Search = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Runtime = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Disabled = bool(v != 0)
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StorageProviderId", wireType)
				}
				x.StorageProviderId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StorageProviderId |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryPoolsResponse_1_list)(nil)

type _QueryPoolsResponse_1_list struct {
	list *[]*PoolResponse
}

func (x *_QueryPoolsResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryPoolsResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryPoolsResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PoolResponse)
	(*x.list)[i] = concreteValue
}

func (x *_QueryPoolsResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PoolResponse)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryPoolsResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(PoolResponse)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryPoolsResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryPoolsResponse_1_list) NewElement() protoreflect.Value {
	v := new(PoolResponse)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryPoolsResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryPoolsResponse            protoreflect.MessageDescriptor
	fd_QueryPoolsResponse_pools      protoreflect.FieldDescriptor
	fd_QueryPoolsResponse_pagination protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_pools_proto_init()
	md_QueryPoolsResponse = File_kyve_query_v1beta1_pools_proto.Messages().ByName("QueryPoolsResponse")
	fd_QueryPoolsResponse_pools = md_QueryPoolsResponse.Fields().ByName("pools")
	fd_QueryPoolsResponse_pagination = md_QueryPoolsResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryPoolsResponse)(nil)

type fastReflection_QueryPoolsResponse QueryPoolsResponse

func (x *QueryPoolsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryPoolsResponse)(x)
}

func (x *QueryPoolsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryPoolsResponse_messageType fastReflection_QueryPoolsResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryPoolsResponse_messageType{}

type fastReflection_QueryPoolsResponse_messageType struct{}

func (x fastReflection_QueryPoolsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryPoolsResponse)(nil)
}
func (x fastReflection_QueryPoolsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryPoolsResponse)
}
func (x fastReflection_QueryPoolsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryPoolsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryPoolsResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryPoolsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryPoolsResponse) New() protoreflect.Message {
	return new(fastReflection_QueryPoolsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryPoolsResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryPoolsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryPoolsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Pools) != 0 {
		value := protoreflect.ValueOfList(&_QueryPoolsResponse_1_list{list: &x.Pools})
		if !f(fd_QueryPoolsResponse_pools, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryPoolsResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryPoolsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsResponse.pools":
		return len(x.Pools) != 0
	case "kyve.query.v1beta1.QueryPoolsResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsResponse.pools":
		x.Pools = nil
	case "kyve.query.v1beta1.QueryPoolsResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryPoolsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.QueryPoolsResponse.pools":
		if len(x.Pools) == 0 {
			return protoreflect.ValueOfList(&_QueryPoolsResponse_1_list{})
		}
		listValue := &_QueryPoolsResponse_1_list{list: &x.Pools}
		return protoreflect.ValueOfList(listValue)
	case "kyve.query.v1beta1.QueryPoolsResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsResponse.pools":
		lv := value.List()
		clv := lv.(*_QueryPoolsResponse_1_list)
		x.Pools = *clv.list
	case "kyve.query.v1beta1.QueryPoolsResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsResponse.pools":
		if x.Pools == nil {
			x.Pools = []*PoolResponse{}
		}
		value := &_QueryPoolsResponse_1_list{list: &x.Pools}
		return protoreflect.ValueOfList(value)
	case "kyve.query.v1beta1.QueryPoolsResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryPoolsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolsResponse.pools":
		list := []*PoolResponse{}
		return protoreflect.ValueOfList(&_QueryPoolsResponse_1_list{list: &list})
	case "kyve.query.v1beta1.QueryPoolsResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolsResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryPoolsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.QueryPoolsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryPoolsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryPoolsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryPoolsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryPoolsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Pools) > 0 {
			for _, e := range x.Pools {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Pools) > 0 {
			for iNdEx := len(x.Pools) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Pools[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pools = append(x.Pools, &PoolResponse{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pools[len(x.Pools)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PoolResponse_4_list)(nil)

type _PoolResponse_4_list struct {
	list *[]string
}

func (x *_PoolResponse_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PoolResponse_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_PoolResponse_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_PoolResponse_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_PoolResponse_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message PoolResponse at list field Stakers as it is not of Message kind"))
}

func (x *_PoolResponse_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_PoolResponse_4_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_PoolResponse_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PoolResponse                       protoreflect.MessageDescriptor
	fd_PoolResponse_id                    protoreflect.FieldDescriptor
	fd_PoolResponse_data                  protoreflect.FieldDescriptor
	fd_PoolResponse_bundle_proposal       protoreflect.FieldDescriptor
	fd_PoolResponse_stakers               protoreflect.FieldDescriptor
	fd_PoolResponse_total_self_delegation protoreflect.FieldDescriptor
	fd_PoolResponse_total_delegation      protoreflect.FieldDescriptor
	fd_PoolResponse_status                protoreflect.FieldDescriptor
	fd_PoolResponse_account               protoreflect.FieldDescriptor
	fd_PoolResponse_account_balance       protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_pools_proto_init()
	md_PoolResponse = File_kyve_query_v1beta1_pools_proto.Messages().ByName("PoolResponse")
	fd_PoolResponse_id = md_PoolResponse.Fields().ByName("id")
	fd_PoolResponse_data = md_PoolResponse.Fields().ByName("data")
	fd_PoolResponse_bundle_proposal = md_PoolResponse.Fields().ByName("bundle_proposal")
	fd_PoolResponse_stakers = md_PoolResponse.Fields().ByName("stakers")
	fd_PoolResponse_total_self_delegation = md_PoolResponse.Fields().ByName("total_self_delegation")
	fd_PoolResponse_total_delegation = md_PoolResponse.Fields().ByName("total_delegation")
	fd_PoolResponse_status = md_PoolResponse.Fields().ByName("status")
	fd_PoolResponse_account = md_PoolResponse.Fields().ByName("account")
	fd_PoolResponse_account_balance = md_PoolResponse.Fields().ByName("account_balance")
}

var _ protoreflect.Message = (*fastReflection_PoolResponse)(nil)

type fastReflection_PoolResponse PoolResponse

func (x *PoolResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolResponse)(x)
}

func (x *PoolResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolResponse_messageType fastReflection_PoolResponse_messageType
var _ protoreflect.MessageType = fastReflection_PoolResponse_messageType{}

type fastReflection_PoolResponse_messageType struct{}

func (x fastReflection_PoolResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolResponse)(nil)
}
func (x fastReflection_PoolResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolResponse)
}
func (x fastReflection_PoolResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolResponse) Type() protoreflect.MessageType {
	return _fastReflection_PoolResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolResponse) New() protoreflect.Message {
	return new(fastReflection_PoolResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolResponse) Interface() protoreflect.ProtoMessage {
	return (*PoolResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_PoolResponse_id, value) {
			return
		}
	}
	if x.Data != nil {
		value := protoreflect.ValueOfMessage(x.Data.ProtoReflect())
		if !f(fd_PoolResponse_data, value) {
			return
		}
	}
	if x.BundleProposal != nil {
		value := protoreflect.ValueOfMessage(x.BundleProposal.ProtoReflect())
		if !f(fd_PoolResponse_bundle_proposal, value) {
			return
		}
	}
	if len(x.Stakers) != 0 {
		value := protoreflect.ValueOfList(&_PoolResponse_4_list{list: &x.Stakers})
		if !f(fd_PoolResponse_stakers, value) {
			return
		}
	}
	if x.TotalSelfDelegation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalSelfDelegation)
		if !f(fd_PoolResponse_total_self_delegation, value) {
			return
		}
	}
	if x.TotalDelegation != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalDelegation)
		if !f(fd_PoolResponse_total_delegation, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_PoolResponse_status, value) {
			return
		}
	}
	if x.Account != "" {
		value := protoreflect.ValueOfString(x.Account)
		if !f(fd_PoolResponse_account, value) {
			return
		}
	}
	if x.AccountBalance != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AccountBalance)
		if !f(fd_PoolResponse_account_balance, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolResponse.id":
		return x.Id != uint64(0)
	case "kyve.query.v1beta1.PoolResponse.data":
		return x.Data != nil
	case "kyve.query.v1beta1.PoolResponse.bundle_proposal":
		return x.BundleProposal != nil
	case "kyve.query.v1beta1.PoolResponse.stakers":
		return len(x.Stakers) != 0
	case "kyve.query.v1beta1.PoolResponse.total_self_delegation":
		return x.TotalSelfDelegation != uint64(0)
	case "kyve.query.v1beta1.PoolResponse.total_delegation":
		return x.TotalDelegation != uint64(0)
	case "kyve.query.v1beta1.PoolResponse.status":
		return x.Status != 0
	case "kyve.query.v1beta1.PoolResponse.account":
		return x.Account != ""
	case "kyve.query.v1beta1.PoolResponse.account_balance":
		return x.AccountBalance != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolResponse.id":
		x.Id = uint64(0)
	case "kyve.query.v1beta1.PoolResponse.data":
		x.Data = nil
	case "kyve.query.v1beta1.PoolResponse.bundle_proposal":
		x.BundleProposal = nil
	case "kyve.query.v1beta1.PoolResponse.stakers":
		x.Stakers = nil
	case "kyve.query.v1beta1.PoolResponse.total_self_delegation":
		x.TotalSelfDelegation = uint64(0)
	case "kyve.query.v1beta1.PoolResponse.total_delegation":
		x.TotalDelegation = uint64(0)
	case "kyve.query.v1beta1.PoolResponse.status":
		x.Status = 0
	case "kyve.query.v1beta1.PoolResponse.account":
		x.Account = ""
	case "kyve.query.v1beta1.PoolResponse.account_balance":
		x.AccountBalance = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.PoolResponse.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.PoolResponse.data":
		value := x.Data
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.query.v1beta1.PoolResponse.bundle_proposal":
		value := x.BundleProposal
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kyve.query.v1beta1.PoolResponse.stakers":
		if len(x.Stakers) == 0 {
			return protoreflect.ValueOfList(&_PoolResponse_4_list{})
		}
		listValue := &_PoolResponse_4_list{list: &x.Stakers}
		return protoreflect.ValueOfList(listValue)
	case "kyve.query.v1beta1.PoolResponse.total_self_delegation":
		value := x.TotalSelfDelegation
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.PoolResponse.total_delegation":
		value := x.TotalDelegation
		return protoreflect.ValueOfUint64(value)
	case "kyve.query.v1beta1.PoolResponse.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "kyve.query.v1beta1.PoolResponse.account":
		value := x.Account
		return protoreflect.ValueOfString(value)
	case "kyve.query.v1beta1.PoolResponse.account_balance":
		value := x.AccountBalance
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolResponse.id":
		x.Id = value.Uint()
	case "kyve.query.v1beta1.PoolResponse.data":
		x.Data = value.Message().Interface().(*v1beta11.Pool)
	case "kyve.query.v1beta1.PoolResponse.bundle_proposal":
		x.BundleProposal = value.Message().Interface().(*v1beta12.BundleProposal)
	case "kyve.query.v1beta1.PoolResponse.stakers":
		lv := value.List()
		clv := lv.(*_PoolResponse_4_list)
		x.Stakers = *clv.list
	case "kyve.query.v1beta1.PoolResponse.total_self_delegation":
		x.TotalSelfDelegation = value.Uint()
	case "kyve.query.v1beta1.PoolResponse.total_delegation":
		x.TotalDelegation = value.Uint()
	case "kyve.query.v1beta1.PoolResponse.status":
		x.Status = (v1beta11.PoolStatus)(value.Enum())
	case "kyve.query.v1beta1.PoolResponse.account":
		x.Account = value.Interface().(string)
	case "kyve.query.v1beta1.PoolResponse.account_balance":
		x.AccountBalance = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolResponse.data":
		if x.Data == nil {
			x.Data = new(v1beta11.Pool)
		}
		return protoreflect.ValueOfMessage(x.Data.ProtoReflect())
	case "kyve.query.v1beta1.PoolResponse.bundle_proposal":
		if x.BundleProposal == nil {
			x.BundleProposal = new(v1beta12.BundleProposal)
		}
		return protoreflect.ValueOfMessage(x.BundleProposal.ProtoReflect())
	case "kyve.query.v1beta1.PoolResponse.stakers":
		if x.Stakers == nil {
			x.Stakers = []string{}
		}
		value := &_PoolResponse_4_list{list: &x.Stakers}
		return protoreflect.ValueOfList(value)
	case "kyve.query.v1beta1.PoolResponse.id":
		panic(fmt.Errorf("field id of message kyve.query.v1beta1.PoolResponse is not mutable"))
	case "kyve.query.v1beta1.PoolResponse.total_self_delegation":
		panic(fmt.Errorf("field total_self_delegation of message kyve.query.v1beta1.PoolResponse is not mutable"))
	case "kyve.query.v1beta1.PoolResponse.total_delegation":
		panic(fmt.Errorf("field total_delegation of message kyve.query.v1beta1.PoolResponse is not mutable"))
	case "kyve.query.v1beta1.PoolResponse.status":
		panic(fmt.Errorf("field status of message kyve.query.v1beta1.PoolResponse is not mutable"))
	case "kyve.query.v1beta1.PoolResponse.account":
		panic(fmt.Errorf("field account of message kyve.query.v1beta1.PoolResponse is not mutable"))
	case "kyve.query.v1beta1.PoolResponse.account_balance":
		panic(fmt.Errorf("field account_balance of message kyve.query.v1beta1.PoolResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.PoolResponse.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.PoolResponse.data":
		m := new(v1beta11.Pool)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.query.v1beta1.PoolResponse.bundle_proposal":
		m := new(v1beta12.BundleProposal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kyve.query.v1beta1.PoolResponse.stakers":
		list := []string{}
		return protoreflect.ValueOfList(&_PoolResponse_4_list{list: &list})
	case "kyve.query.v1beta1.PoolResponse.total_self_delegation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.PoolResponse.total_delegation":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.query.v1beta1.PoolResponse.status":
		return protoreflect.ValueOfEnum(0)
	case "kyve.query.v1beta1.PoolResponse.account":
		return protoreflect.ValueOfString("")
	case "kyve.query.v1beta1.PoolResponse.account_balance":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.PoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.PoolResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.PoolResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Data != nil {
			l = options.Size(x.Data)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BundleProposal != nil {
			l = options.Size(x.BundleProposal)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Stakers) > 0 {
			for _, s := range x.Stakers {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.TotalSelfDelegation != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalSelfDelegation))
		}
		if x.TotalDelegation != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalDelegation))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.Account)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AccountBalance != 0 {
			n += 1 + runtime.Sov(uint64(x.AccountBalance))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AccountBalance != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AccountBalance))
			i--
			dAtA[i] = 0x48
		}
		if len(x.Account) > 0 {
			i -= len(x.Account)
			copy(dAtA[i:], x.Account)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Account)))
			i--
			dAtA[i] = 0x42
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x38
		}
		if x.TotalDelegation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalDelegation))
			i--
			dAtA[i] = 0x30
		}
		if x.TotalSelfDelegation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalSelfDelegation))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Stakers) > 0 {
			for iNdEx := len(x.Stakers) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Stakers[iNdEx])
				copy(dAtA[i:], x.Stakers[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Stakers[iNdEx])))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.BundleProposal != nil {
			encoded, err := options.Marshal(x.BundleProposal)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Data != nil {
			encoded, err := options.Marshal(x.Data)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Data == nil {
					x.Data = &v1beta11.Pool{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Data); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BundleProposal", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BundleProposal == nil {
					x.BundleProposal = &v1beta12.BundleProposal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BundleProposal); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Stakers = append(x.Stakers, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalSelfDelegation", wireType)
				}
				x.TotalSelfDelegation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalSelfDelegation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
				}
				x.TotalDelegation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalDelegation |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= v1beta11.PoolStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Account = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccountBalance", wireType)
				}
				x.AccountBalance = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AccountBalance |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryPoolRequest    protoreflect.MessageDescriptor
	fd_QueryPoolRequest_id protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_pools_proto_init()
	md_QueryPoolRequest = File_kyve_query_v1beta1_pools_proto.Messages().ByName("QueryPoolRequest")
	fd_QueryPoolRequest_id = md_QueryPoolRequest.Fields().ByName("id")
}

var _ protoreflect.Message = (*fastReflection_QueryPoolRequest)(nil)

type fastReflection_QueryPoolRequest QueryPoolRequest

func (x *QueryPoolRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryPoolRequest)(x)
}

func (x *QueryPoolRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryPoolRequest_messageType fastReflection_QueryPoolRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryPoolRequest_messageType{}

type fastReflection_QueryPoolRequest_messageType struct{}

func (x fastReflection_QueryPoolRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryPoolRequest)(nil)
}
func (x fastReflection_QueryPoolRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryPoolRequest)
}
func (x fastReflection_QueryPoolRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryPoolRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryPoolRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryPoolRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryPoolRequest) New() protoreflect.Message {
	return new(fastReflection_QueryPoolRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryPoolRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryPoolRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryPoolRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_QueryPoolRequest_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryPoolRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolRequest.id":
		return x.Id != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolRequest.id":
		x.Id = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryPoolRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.QueryPoolRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolRequest.id":
		x.Id = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolRequest.id":
		panic(fmt.Errorf("field id of message kyve.query.v1beta1.QueryPoolRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryPoolRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolRequest"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryPoolRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.QueryPoolRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryPoolRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryPoolRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryPoolRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryPoolRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryPoolResponse      protoreflect.MessageDescriptor
	fd_QueryPoolResponse_pool protoreflect.FieldDescriptor
)

func init() {
	file_kyve_query_v1beta1_pools_proto_init()
	md_QueryPoolResponse = File_kyve_query_v1beta1_pools_proto.Messages().ByName("QueryPoolResponse")
	fd_QueryPoolResponse_pool = md_QueryPoolResponse.Fields().ByName("pool")
}

var _ protoreflect.Message = (*fastReflection_QueryPoolResponse)(nil)

type fastReflection_QueryPoolResponse QueryPoolResponse

func (x *QueryPoolResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryPoolResponse)(x)
}

func (x *QueryPoolResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryPoolResponse_messageType fastReflection_QueryPoolResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryPoolResponse_messageType{}

type fastReflection_QueryPoolResponse_messageType struct{}

func (x fastReflection_QueryPoolResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryPoolResponse)(nil)
}
func (x fastReflection_QueryPoolResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryPoolResponse)
}
func (x fastReflection_QueryPoolResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryPoolResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryPoolResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryPoolResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryPoolResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryPoolResponse) New() protoreflect.Message {
	return new(fastReflection_QueryPoolResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryPoolResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryPoolResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryPoolResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pool != nil {
		value := protoreflect.ValueOfMessage(x.Pool.ProtoReflect())
		if !f(fd_QueryPoolResponse_pool, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryPoolResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolResponse.pool":
		return x.Pool != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolResponse.pool":
		x.Pool = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryPoolResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.query.v1beta1.QueryPoolResponse.pool":
		value := x.Pool
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolResponse.pool":
		x.Pool = value.Message().Interface().(*PoolResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolResponse.pool":
		if x.Pool == nil {
			x.Pool = new(PoolResponse)
		}
		return protoreflect.ValueOfMessage(x.Pool.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryPoolResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.query.v1beta1.QueryPoolResponse.pool":
		m := new(PoolResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.query.v1beta1.QueryPoolResponse"))
		}
		panic(fmt.Errorf("message kyve.query.v1beta1.QueryPoolResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryPoolResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.query.v1beta1.QueryPoolResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryPoolResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryPoolResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryPoolResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryPoolResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryPoolResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Pool != nil {
			l = options.Size(x.Pool)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pool != nil {
			encoded, err := options.Marshal(x.Pool)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryPoolResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pool == nil {
					x.Pool = &PoolResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pool); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kyve/query/v1beta1/pools.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryPoolsRequest is the request type for the Query/Pools RPC method.
type QueryPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination defines an optional pagination for the request.
	Pagination *v1beta1.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// search ...
	Search string `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	// runtime ...
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// disabled ...
	Disabled bool `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// storage_provider_id ...
	StorageProviderId uint32 `protobuf:"varint,5,opt,name=storage_provider_id,json=storageProviderId,proto3" json:"storage_provider_id,omitempty"`
}

func (x *QueryPoolsRequest) Reset() {
	*x = QueryPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPoolsRequest) ProtoMessage() {}

// Deprecated: Use QueryPoolsRequest.ProtoReflect.Descriptor instead.
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_pools_proto_rawDescGZIP(), []int{0}
}

func (x *QueryPoolsRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryPoolsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *QueryPoolsRequest) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *QueryPoolsRequest) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *QueryPoolsRequest) GetStorageProviderId() uint32 {
	if x != nil {
		return x.StorageProviderId
	}
	return 0
}

// QueryPoolsResponse is the response type for the Query/Pools RPC method.
type QueryPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pools ...
	Pools []*PoolResponse `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryPoolsResponse) Reset() {
	*x = QueryPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPoolsResponse) ProtoMessage() {}

// Deprecated: Use QueryPoolsResponse.ProtoReflect.Descriptor instead.
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_pools_proto_rawDescGZIP(), []int{1}
}

func (x *QueryPoolsResponse) GetPools() []*PoolResponse {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *QueryPoolsResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// PoolResponse ...
type PoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id ...
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// data ...
	Data *v1beta11.Pool `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// bundle_proposal ...
	BundleProposal *v1beta12.BundleProposal `protobuf:"bytes,3,opt,name=bundle_proposal,json=bundleProposal,proto3" json:"bundle_proposal,omitempty"`
	// stakers ...
	Stakers []string `protobuf:"bytes,4,rep,name=stakers,proto3" json:"stakers,omitempty"`
	// total_stake ...
	TotalSelfDelegation uint64 `protobuf:"varint,5,opt,name=total_self_delegation,json=totalSelfDelegation,proto3" json:"total_self_delegation,omitempty"`
	// total_delegation ...
	TotalDelegation uint64 `protobuf:"varint,6,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// status ...
	Status v1beta11.PoolStatus `protobuf:"varint,7,opt,name=status,proto3,enum=kyve.pool.v1beta1.PoolStatus" json:"status,omitempty"`
	// account ...
	Account string `protobuf:"bytes,8,opt,name=account,proto3" json:"account,omitempty"`
	// account_balance ...
	AccountBalance uint64 `protobuf:"varint,9,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
}

func (x *PoolResponse) Reset() {
	*x = PoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolResponse) ProtoMessage() {}

// Deprecated: Use PoolResponse.ProtoReflect.Descriptor instead.
func (*PoolResponse) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_pools_proto_rawDescGZIP(), []int{2}
}

func (x *PoolResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PoolResponse) GetData() *v1beta11.Pool {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PoolResponse) GetBundleProposal() *v1beta12.BundleProposal {
	if x != nil {
		return x.BundleProposal
	}
	return nil
}

func (x *PoolResponse) GetStakers() []string {
	if x != nil {
		return x.Stakers
	}
	return nil
}

func (x *PoolResponse) GetTotalSelfDelegation() uint64 {
	if x != nil {
		return x.TotalSelfDelegation
	}
	return 0
}

func (x *PoolResponse) GetTotalDelegation() uint64 {
	if x != nil {
		return x.TotalDelegation
	}
	return 0
}

func (x *PoolResponse) GetStatus() v1beta11.PoolStatus {
	if x != nil {
		return x.Status
	}
	return v1beta11.PoolStatus(0)
}

func (x *PoolResponse) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PoolResponse) GetAccountBalance() uint64 {
	if x != nil {
		return x.AccountBalance
	}
	return 0
}

// QueryPoolRequest is the request type for the Query/Pool RPC method.
type QueryPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id defines the unique ID of the pool.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryPoolRequest) Reset() {
	*x = QueryPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPoolRequest) ProtoMessage() {}

// Deprecated: Use QueryPoolRequest.ProtoReflect.Descriptor instead.
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_pools_proto_rawDescGZIP(), []int{3}
}

func (x *QueryPoolRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// QueryPoolResponse is the response type for the Query/Pool RPC method.
type QueryPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pool ...
	Pool *PoolResponse `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *QueryPoolResponse) Reset() {
	*x = QueryPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_query_v1beta1_pools_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPoolResponse) ProtoMessage() {}

// Deprecated: Use QueryPoolResponse.ProtoReflect.Descriptor instead.
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return file_kyve_query_v1beta1_pools_proto_rawDescGZIP(), []int{4}
}

func (x *QueryPoolResponse) GetPool() *PoolResponse {
	if x != nil {
		return x.Pool
	}
	return nil
}

var File_kyve_query_v1beta1_pools_proto protoreflect.FileDescriptor

var file_kyve_query_v1beta1_pools_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8d, 0x03, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d,
	0x0a, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0e, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c,
	0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x22, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x32, 0x82, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x79, 0x0a, 0x05, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x6b,
	0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x7a,
	0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b,
	0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6b, 0x79,
	0x76, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xd3, 0x01, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4b, 0x59, 0x56, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2f, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4b, 0x51, 0x58, 0xaa, 0x02,
	0x12, 0x4b, 0x79, 0x76, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xca, 0x02, 0x12, 0x4b, 0x79, 0x76, 0x65, 0x5c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1e, 0x4b, 0x79, 0x76, 0x65, 0x5c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x4b, 0x79, 0x76, 0x65,
	0x3a, 0x3a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kyve_query_v1beta1_pools_proto_rawDescOnce sync.Once
	file_kyve_query_v1beta1_pools_proto_rawDescData = file_kyve_query_v1beta1_pools_proto_rawDesc
)

func file_kyve_query_v1beta1_pools_proto_rawDescGZIP() []byte {
	file_kyve_query_v1beta1_pools_proto_rawDescOnce.Do(func() {
		file_kyve_query_v1beta1_pools_proto_rawDescData = protoimpl.X.CompressGZIP(file_kyve_query_v1beta1_pools_proto_rawDescData)
	})
	return file_kyve_query_v1beta1_pools_proto_rawDescData
}

var file_kyve_query_v1beta1_pools_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kyve_query_v1beta1_pools_proto_goTypes = []interface{}{
	(*QueryPoolsRequest)(nil),       // 0: kyve.query.v1beta1.QueryPoolsRequest
	(*QueryPoolsResponse)(nil),      // 1: kyve.query.v1beta1.QueryPoolsResponse
	(*PoolResponse)(nil),            // 2: kyve.query.v1beta1.PoolResponse
	(*QueryPoolRequest)(nil),        // 3: kyve.query.v1beta1.QueryPoolRequest
	(*QueryPoolResponse)(nil),       // 4: kyve.query.v1beta1.QueryPoolResponse
	(*v1beta1.PageRequest)(nil),     // 5: cosmos.base.query.v1beta1.PageRequest
	(*v1beta1.PageResponse)(nil),    // 6: cosmos.base.query.v1beta1.PageResponse
	(*v1beta11.Pool)(nil),           // 7: kyve.pool.v1beta1.Pool
	(*v1beta12.BundleProposal)(nil), // 8: kyve.bundles.v1beta1.BundleProposal
	(v1beta11.PoolStatus)(0),        // 9: kyve.pool.v1beta1.PoolStatus
}
var file_kyve_query_v1beta1_pools_proto_depIdxs = []int32{
	5, // 0: kyve.query.v1beta1.QueryPoolsRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	2, // 1: kyve.query.v1beta1.QueryPoolsResponse.pools:type_name -> kyve.query.v1beta1.PoolResponse
	6, // 2: kyve.query.v1beta1.QueryPoolsResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	7, // 3: kyve.query.v1beta1.PoolResponse.data:type_name -> kyve.pool.v1beta1.Pool
	8, // 4: kyve.query.v1beta1.PoolResponse.bundle_proposal:type_name -> kyve.bundles.v1beta1.BundleProposal
	9, // 5: kyve.query.v1beta1.PoolResponse.status:type_name -> kyve.pool.v1beta1.PoolStatus
	2, // 6: kyve.query.v1beta1.QueryPoolResponse.pool:type_name -> kyve.query.v1beta1.PoolResponse
	0, // 7: kyve.query.v1beta1.QueryPool.Pools:input_type -> kyve.query.v1beta1.QueryPoolsRequest
	3, // 8: kyve.query.v1beta1.QueryPool.Pool:input_type -> kyve.query.v1beta1.QueryPoolRequest
	1, // 9: kyve.query.v1beta1.QueryPool.Pools:output_type -> kyve.query.v1beta1.QueryPoolsResponse
	4, // 10: kyve.query.v1beta1.QueryPool.Pool:output_type -> kyve.query.v1beta1.QueryPoolResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_kyve_query_v1beta1_pools_proto_init() }
func file_kyve_query_v1beta1_pools_proto_init() {
	if File_kyve_query_v1beta1_pools_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kyve_query_v1beta1_pools_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_pools_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_pools_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_pools_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_query_v1beta1_pools_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kyve_query_v1beta1_pools_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kyve_query_v1beta1_pools_proto_goTypes,
		DependencyIndexes: file_kyve_query_v1beta1_pools_proto_depIdxs,
		MessageInfos:      file_kyve_query_v1beta1_pools_proto_msgTypes,
	}.Build()
	File_kyve_query_v1beta1_pools_proto = out.File
	file_kyve_query_v1beta1_pools_proto_rawDesc = nil
	file_kyve_query_v1beta1_pools_proto_goTypes = nil
	file_kyve_query_v1beta1_pools_proto_depIdxs = nil
}
