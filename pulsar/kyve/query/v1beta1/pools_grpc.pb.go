// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kyve/query/v1beta1/pools.proto

package queryv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryPool_Pools_FullMethodName = "/kyve.query.v1beta1.QueryPool/Pools"
	QueryPool_Pool_FullMethodName  = "/kyve.query.v1beta1.QueryPool/Pool"
)

// QueryPoolClient is the client API for QueryPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryPoolClient interface {
	// Pools queries for all pools.
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	// Pool queries a pool by its Id.
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
}

type queryPoolClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryPoolClient(cc grpc.ClientConnInterface) QueryPoolClient {
	return &queryPoolClient{cc}
}

func (c *queryPoolClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, QueryPool_Pools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryPoolClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, QueryPool_Pool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryPoolServer is the server API for QueryPool service.
// All implementations must embed UnimplementedQueryPoolServer
// for forward compatibility
type QueryPoolServer interface {
	// Pools queries for all pools.
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	// Pool queries a pool by its Id.
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	mustEmbedUnimplementedQueryPoolServer()
}

// UnimplementedQueryPoolServer must be embedded to have forward compatible implementations.
type UnimplementedQueryPoolServer struct {
}

func (UnimplementedQueryPoolServer) Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (UnimplementedQueryPoolServer) Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (UnimplementedQueryPoolServer) mustEmbedUnimplementedQueryPoolServer() {}

// UnsafeQueryPoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryPoolServer will
// result in compilation errors.
type UnsafeQueryPoolServer interface {
	mustEmbedUnimplementedQueryPoolServer()
}

func RegisterQueryPoolServer(s grpc.ServiceRegistrar, srv QueryPoolServer) {
	s.RegisterService(&QueryPool_ServiceDesc, srv)
}

func _QueryPool_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryPoolServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryPool_Pools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryPoolServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryPool_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryPoolServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryPool_Pool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryPoolServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryPool_ServiceDesc is the grpc.ServiceDesc for QueryPool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryPool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.query.v1beta1.QueryPool",
	HandlerType: (*QueryPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pools",
			Handler:    _QueryPool_Pools_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _QueryPool_Pool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/query/v1beta1/pools.proto",
}
