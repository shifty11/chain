// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kyve/query/v1beta1/funders.proto

package queryv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryFunders_Funders_FullMethodName          = "/kyve.query.v1beta1.QueryFunders/Funders"
	QueryFunders_Funder_FullMethodName           = "/kyve.query.v1beta1.QueryFunders/Funder"
	QueryFunders_FundingsByFunder_FullMethodName = "/kyve.query.v1beta1.QueryFunders/FundingsByFunder"
	QueryFunders_FundingsByPool_FullMethodName   = "/kyve.query.v1beta1.QueryFunders/FundingsByPool"
)

// QueryFundersClient is the client API for QueryFunders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryFundersClient interface {
	// Funders queries all funders.
	Funders(ctx context.Context, in *QueryFundersRequest, opts ...grpc.CallOption) (*QueryFundersResponse, error)
	// Funder queries a funder by address.
	Funder(ctx context.Context, in *QueryFunderRequest, opts ...grpc.CallOption) (*QueryFunderResponse, error)
	// FundingsByFunder queries all fundings of a funder by address.
	FundingsByFunder(ctx context.Context, in *QueryFundingsByFunderRequest, opts ...grpc.CallOption) (*QueryFundingsByFunderResponse, error)
	// FundingsByPool queries all fundings of a pool by id.
	FundingsByPool(ctx context.Context, in *QueryFundingsByPoolRequest, opts ...grpc.CallOption) (*QueryFundingsByPoolResponse, error)
}

type queryFundersClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryFundersClient(cc grpc.ClientConnInterface) QueryFundersClient {
	return &queryFundersClient{cc}
}

func (c *queryFundersClient) Funders(ctx context.Context, in *QueryFundersRequest, opts ...grpc.CallOption) (*QueryFundersResponse, error) {
	out := new(QueryFundersResponse)
	err := c.cc.Invoke(ctx, QueryFunders_Funders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryFundersClient) Funder(ctx context.Context, in *QueryFunderRequest, opts ...grpc.CallOption) (*QueryFunderResponse, error) {
	out := new(QueryFunderResponse)
	err := c.cc.Invoke(ctx, QueryFunders_Funder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryFundersClient) FundingsByFunder(ctx context.Context, in *QueryFundingsByFunderRequest, opts ...grpc.CallOption) (*QueryFundingsByFunderResponse, error) {
	out := new(QueryFundingsByFunderResponse)
	err := c.cc.Invoke(ctx, QueryFunders_FundingsByFunder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryFundersClient) FundingsByPool(ctx context.Context, in *QueryFundingsByPoolRequest, opts ...grpc.CallOption) (*QueryFundingsByPoolResponse, error) {
	out := new(QueryFundingsByPoolResponse)
	err := c.cc.Invoke(ctx, QueryFunders_FundingsByPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryFundersServer is the server API for QueryFunders service.
// All implementations must embed UnimplementedQueryFundersServer
// for forward compatibility
type QueryFundersServer interface {
	// Funders queries all funders.
	Funders(context.Context, *QueryFundersRequest) (*QueryFundersResponse, error)
	// Funder queries a funder by address.
	Funder(context.Context, *QueryFunderRequest) (*QueryFunderResponse, error)
	// FundingsByFunder queries all fundings of a funder by address.
	FundingsByFunder(context.Context, *QueryFundingsByFunderRequest) (*QueryFundingsByFunderResponse, error)
	// FundingsByPool queries all fundings of a pool by id.
	FundingsByPool(context.Context, *QueryFundingsByPoolRequest) (*QueryFundingsByPoolResponse, error)
	mustEmbedUnimplementedQueryFundersServer()
}

// UnimplementedQueryFundersServer must be embedded to have forward compatible implementations.
type UnimplementedQueryFundersServer struct {
}

func (UnimplementedQueryFundersServer) Funders(context.Context, *QueryFundersRequest) (*QueryFundersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Funders not implemented")
}
func (UnimplementedQueryFundersServer) Funder(context.Context, *QueryFunderRequest) (*QueryFunderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Funder not implemented")
}
func (UnimplementedQueryFundersServer) FundingsByFunder(context.Context, *QueryFundingsByFunderRequest) (*QueryFundingsByFunderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingsByFunder not implemented")
}
func (UnimplementedQueryFundersServer) FundingsByPool(context.Context, *QueryFundingsByPoolRequest) (*QueryFundingsByPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingsByPool not implemented")
}
func (UnimplementedQueryFundersServer) mustEmbedUnimplementedQueryFundersServer() {}

// UnsafeQueryFundersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryFundersServer will
// result in compilation errors.
type UnsafeQueryFundersServer interface {
	mustEmbedUnimplementedQueryFundersServer()
}

func RegisterQueryFundersServer(s grpc.ServiceRegistrar, srv QueryFundersServer) {
	s.RegisterService(&QueryFunders_ServiceDesc, srv)
}

func _QueryFunders_Funders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryFundersServer).Funders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryFunders_Funders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryFundersServer).Funders(ctx, req.(*QueryFundersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryFunders_Funder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFunderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryFundersServer).Funder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryFunders_Funder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryFundersServer).Funder(ctx, req.(*QueryFunderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryFunders_FundingsByFunder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundingsByFunderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryFundersServer).FundingsByFunder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryFunders_FundingsByFunder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryFundersServer).FundingsByFunder(ctx, req.(*QueryFundingsByFunderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryFunders_FundingsByPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundingsByPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryFundersServer).FundingsByPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryFunders_FundingsByPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryFundersServer).FundingsByPool(ctx, req.(*QueryFundingsByPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryFunders_ServiceDesc is the grpc.ServiceDesc for QueryFunders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryFunders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.query.v1beta1.QueryFunders",
	HandlerType: (*QueryFundersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Funders",
			Handler:    _QueryFunders_Funders_Handler,
		},
		{
			MethodName: "Funder",
			Handler:    _QueryFunders_Funder_Handler,
		},
		{
			MethodName: "FundingsByFunder",
			Handler:    _QueryFunders_FundingsByFunder_Handler,
		},
		{
			MethodName: "FundingsByPool",
			Handler:    _QueryFunders_FundingsByPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/query/v1beta1/funders.proto",
}
