// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kyve/query/v1beta1/delegation.proto

package queryv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryDelegation_Delegator_FullMethodName          = "/kyve.query.v1beta1.QueryDelegation/Delegator"
	QueryDelegation_DelegatorsByStaker_FullMethodName = "/kyve.query.v1beta1.QueryDelegation/DelegatorsByStaker"
	QueryDelegation_StakersByDelegator_FullMethodName = "/kyve.query.v1beta1.QueryDelegation/StakersByDelegator"
)

// QueryDelegationClient is the client API for QueryDelegation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryDelegationClient interface {
	// Delegator returns delegation information for a specific delegator of a specific staker.
	Delegator(ctx context.Context, in *QueryDelegatorRequest, opts ...grpc.CallOption) (*QueryDelegatorResponse, error)
	// DelegatorsByStaker returns all delegators that have delegated to the given staker
	// This query is paginated.
	DelegatorsByStaker(ctx context.Context, in *QueryDelegatorsByStakerRequest, opts ...grpc.CallOption) (*QueryDelegatorsByStakerResponse, error)
	// StakersByPoolAndDelegator returns all stakers the given delegator has delegated to.
	// This query is paginated.
	StakersByDelegator(ctx context.Context, in *QueryStakersByDelegatorRequest, opts ...grpc.CallOption) (*QueryStakersByDelegatorResponse, error)
}

type queryDelegationClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryDelegationClient(cc grpc.ClientConnInterface) QueryDelegationClient {
	return &queryDelegationClient{cc}
}

func (c *queryDelegationClient) Delegator(ctx context.Context, in *QueryDelegatorRequest, opts ...grpc.CallOption) (*QueryDelegatorResponse, error) {
	out := new(QueryDelegatorResponse)
	err := c.cc.Invoke(ctx, QueryDelegation_Delegator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryDelegationClient) DelegatorsByStaker(ctx context.Context, in *QueryDelegatorsByStakerRequest, opts ...grpc.CallOption) (*QueryDelegatorsByStakerResponse, error) {
	out := new(QueryDelegatorsByStakerResponse)
	err := c.cc.Invoke(ctx, QueryDelegation_DelegatorsByStaker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryDelegationClient) StakersByDelegator(ctx context.Context, in *QueryStakersByDelegatorRequest, opts ...grpc.CallOption) (*QueryStakersByDelegatorResponse, error) {
	out := new(QueryStakersByDelegatorResponse)
	err := c.cc.Invoke(ctx, QueryDelegation_StakersByDelegator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryDelegationServer is the server API for QueryDelegation service.
// All implementations must embed UnimplementedQueryDelegationServer
// for forward compatibility
type QueryDelegationServer interface {
	// Delegator returns delegation information for a specific delegator of a specific staker.
	Delegator(context.Context, *QueryDelegatorRequest) (*QueryDelegatorResponse, error)
	// DelegatorsByStaker returns all delegators that have delegated to the given staker
	// This query is paginated.
	DelegatorsByStaker(context.Context, *QueryDelegatorsByStakerRequest) (*QueryDelegatorsByStakerResponse, error)
	// StakersByPoolAndDelegator returns all stakers the given delegator has delegated to.
	// This query is paginated.
	StakersByDelegator(context.Context, *QueryStakersByDelegatorRequest) (*QueryStakersByDelegatorResponse, error)
	mustEmbedUnimplementedQueryDelegationServer()
}

// UnimplementedQueryDelegationServer must be embedded to have forward compatible implementations.
type UnimplementedQueryDelegationServer struct {
}

func (UnimplementedQueryDelegationServer) Delegator(context.Context, *QueryDelegatorRequest) (*QueryDelegatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegator not implemented")
}
func (UnimplementedQueryDelegationServer) DelegatorsByStaker(context.Context, *QueryDelegatorsByStakerRequest) (*QueryDelegatorsByStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorsByStaker not implemented")
}
func (UnimplementedQueryDelegationServer) StakersByDelegator(context.Context, *QueryStakersByDelegatorRequest) (*QueryStakersByDelegatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakersByDelegator not implemented")
}
func (UnimplementedQueryDelegationServer) mustEmbedUnimplementedQueryDelegationServer() {}

// UnsafeQueryDelegationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryDelegationServer will
// result in compilation errors.
type UnsafeQueryDelegationServer interface {
	mustEmbedUnimplementedQueryDelegationServer()
}

func RegisterQueryDelegationServer(s grpc.ServiceRegistrar, srv QueryDelegationServer) {
	s.RegisterService(&QueryDelegation_ServiceDesc, srv)
}

func _QueryDelegation_Delegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryDelegationServer).Delegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryDelegation_Delegator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryDelegationServer).Delegator(ctx, req.(*QueryDelegatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryDelegation_DelegatorsByStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorsByStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryDelegationServer).DelegatorsByStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryDelegation_DelegatorsByStaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryDelegationServer).DelegatorsByStaker(ctx, req.(*QueryDelegatorsByStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryDelegation_StakersByDelegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakersByDelegatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryDelegationServer).StakersByDelegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryDelegation_StakersByDelegator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryDelegationServer).StakersByDelegator(ctx, req.(*QueryStakersByDelegatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryDelegation_ServiceDesc is the grpc.ServiceDesc for QueryDelegation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryDelegation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.query.v1beta1.QueryDelegation",
	HandlerType: (*QueryDelegationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delegator",
			Handler:    _QueryDelegation_Delegator_Handler,
		},
		{
			MethodName: "DelegatorsByStaker",
			Handler:    _QueryDelegation_DelegatorsByStaker_Handler,
		},
		{
			MethodName: "StakersByDelegator",
			Handler:    _QueryDelegation_StakersByDelegator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/query/v1beta1/delegation.proto",
}
