// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kyve/query/v1beta1/params.proto

package queryv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryParams_Params_FullMethodName = "/kyve.query.v1beta1.QueryParams/Params"
)

// QueryParamsClient is the client API for QueryParams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryParamsClient interface {
	// Pools queries for all pools.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryParamsClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryParamsClient(cc grpc.ClientConnInterface) QueryParamsClient {
	return &queryParamsClient{cc}
}

func (c *queryParamsClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, QueryParams_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryParamsServer is the server API for QueryParams service.
// All implementations must embed UnimplementedQueryParamsServer
// for forward compatibility
type QueryParamsServer interface {
	// Pools queries for all pools.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryParamsServer()
}

// UnimplementedQueryParamsServer must be embedded to have forward compatible implementations.
type UnimplementedQueryParamsServer struct {
}

func (UnimplementedQueryParamsServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryParamsServer) mustEmbedUnimplementedQueryParamsServer() {}

// UnsafeQueryParamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryParamsServer will
// result in compilation errors.
type UnsafeQueryParamsServer interface {
	mustEmbedUnimplementedQueryParamsServer()
}

func RegisterQueryParamsServer(s grpc.ServiceRegistrar, srv QueryParamsServer) {
	s.RegisterService(&QueryParams_ServiceDesc, srv)
}

func _QueryParams_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryParamsServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryParams_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryParamsServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryParams_ServiceDesc is the grpc.ServiceDesc for QueryParams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryParams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.query.v1beta1.QueryParams",
	HandlerType: (*QueryParamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _QueryParams_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/query/v1beta1/params.proto",
}
