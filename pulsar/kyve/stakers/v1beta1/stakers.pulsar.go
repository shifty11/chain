// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stakersv1beta1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Staker                    protoreflect.MessageDescriptor
	fd_Staker_address            protoreflect.FieldDescriptor
	fd_Staker_commission         protoreflect.FieldDescriptor
	fd_Staker_moniker            protoreflect.FieldDescriptor
	fd_Staker_website            protoreflect.FieldDescriptor
	fd_Staker_identity           protoreflect.FieldDescriptor
	fd_Staker_security_contact   protoreflect.FieldDescriptor
	fd_Staker_details            protoreflect.FieldDescriptor
	fd_Staker_commission_rewards protoreflect.FieldDescriptor
)

func init() {
	file_kyve_stakers_v1beta1_stakers_proto_init()
	md_Staker = File_kyve_stakers_v1beta1_stakers_proto.Messages().ByName("Staker")
	fd_Staker_address = md_Staker.Fields().ByName("address")
	fd_Staker_commission = md_Staker.Fields().ByName("commission")
	fd_Staker_moniker = md_Staker.Fields().ByName("moniker")
	fd_Staker_website = md_Staker.Fields().ByName("website")
	fd_Staker_identity = md_Staker.Fields().ByName("identity")
	fd_Staker_security_contact = md_Staker.Fields().ByName("security_contact")
	fd_Staker_details = md_Staker.Fields().ByName("details")
	fd_Staker_commission_rewards = md_Staker.Fields().ByName("commission_rewards")
}

var _ protoreflect.Message = (*fastReflection_Staker)(nil)

type fastReflection_Staker Staker

func (x *Staker) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Staker)(x)
}

func (x *Staker) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Staker_messageType fastReflection_Staker_messageType
var _ protoreflect.MessageType = fastReflection_Staker_messageType{}

type fastReflection_Staker_messageType struct{}

func (x fastReflection_Staker_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Staker)(nil)
}
func (x fastReflection_Staker_messageType) New() protoreflect.Message {
	return new(fastReflection_Staker)
}
func (x fastReflection_Staker_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Staker
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Staker) Descriptor() protoreflect.MessageDescriptor {
	return md_Staker
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Staker) Type() protoreflect.MessageType {
	return _fastReflection_Staker_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Staker) New() protoreflect.Message {
	return new(fastReflection_Staker)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Staker) Interface() protoreflect.ProtoMessage {
	return (*Staker)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Staker) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Staker_address, value) {
			return
		}
	}
	if x.Commission != "" {
		value := protoreflect.ValueOfString(x.Commission)
		if !f(fd_Staker_commission, value) {
			return
		}
	}
	if x.Moniker != "" {
		value := protoreflect.ValueOfString(x.Moniker)
		if !f(fd_Staker_moniker, value) {
			return
		}
	}
	if x.Website != "" {
		value := protoreflect.ValueOfString(x.Website)
		if !f(fd_Staker_website, value) {
			return
		}
	}
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_Staker_identity, value) {
			return
		}
	}
	if x.SecurityContact != "" {
		value := protoreflect.ValueOfString(x.SecurityContact)
		if !f(fd_Staker_security_contact, value) {
			return
		}
	}
	if x.Details != "" {
		value := protoreflect.ValueOfString(x.Details)
		if !f(fd_Staker_details, value) {
			return
		}
	}
	if x.CommissionRewards != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CommissionRewards)
		if !f(fd_Staker_commission_rewards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Staker) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Staker.address":
		return x.Address != ""
	case "kyve.stakers.v1beta1.Staker.commission":
		return x.Commission != ""
	case "kyve.stakers.v1beta1.Staker.moniker":
		return x.Moniker != ""
	case "kyve.stakers.v1beta1.Staker.website":
		return x.Website != ""
	case "kyve.stakers.v1beta1.Staker.identity":
		return x.Identity != ""
	case "kyve.stakers.v1beta1.Staker.security_contact":
		return x.SecurityContact != ""
	case "kyve.stakers.v1beta1.Staker.details":
		return x.Details != ""
	case "kyve.stakers.v1beta1.Staker.commission_rewards":
		return x.CommissionRewards != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Staker"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Staker does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Staker) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Staker.address":
		x.Address = ""
	case "kyve.stakers.v1beta1.Staker.commission":
		x.Commission = ""
	case "kyve.stakers.v1beta1.Staker.moniker":
		x.Moniker = ""
	case "kyve.stakers.v1beta1.Staker.website":
		x.Website = ""
	case "kyve.stakers.v1beta1.Staker.identity":
		x.Identity = ""
	case "kyve.stakers.v1beta1.Staker.security_contact":
		x.SecurityContact = ""
	case "kyve.stakers.v1beta1.Staker.details":
		x.Details = ""
	case "kyve.stakers.v1beta1.Staker.commission_rewards":
		x.CommissionRewards = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Staker"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Staker does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Staker) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.stakers.v1beta1.Staker.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Staker.commission":
		value := x.Commission
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Staker.moniker":
		value := x.Moniker
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Staker.website":
		value := x.Website
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Staker.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Staker.security_contact":
		value := x.SecurityContact
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Staker.details":
		value := x.Details
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Staker.commission_rewards":
		value := x.CommissionRewards
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Staker"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Staker does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Staker) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Staker.address":
		x.Address = value.Interface().(string)
	case "kyve.stakers.v1beta1.Staker.commission":
		x.Commission = value.Interface().(string)
	case "kyve.stakers.v1beta1.Staker.moniker":
		x.Moniker = value.Interface().(string)
	case "kyve.stakers.v1beta1.Staker.website":
		x.Website = value.Interface().(string)
	case "kyve.stakers.v1beta1.Staker.identity":
		x.Identity = value.Interface().(string)
	case "kyve.stakers.v1beta1.Staker.security_contact":
		x.SecurityContact = value.Interface().(string)
	case "kyve.stakers.v1beta1.Staker.details":
		x.Details = value.Interface().(string)
	case "kyve.stakers.v1beta1.Staker.commission_rewards":
		x.CommissionRewards = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Staker"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Staker does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Staker) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Staker.address":
		panic(fmt.Errorf("field address of message kyve.stakers.v1beta1.Staker is not mutable"))
	case "kyve.stakers.v1beta1.Staker.commission":
		panic(fmt.Errorf("field commission of message kyve.stakers.v1beta1.Staker is not mutable"))
	case "kyve.stakers.v1beta1.Staker.moniker":
		panic(fmt.Errorf("field moniker of message kyve.stakers.v1beta1.Staker is not mutable"))
	case "kyve.stakers.v1beta1.Staker.website":
		panic(fmt.Errorf("field website of message kyve.stakers.v1beta1.Staker is not mutable"))
	case "kyve.stakers.v1beta1.Staker.identity":
		panic(fmt.Errorf("field identity of message kyve.stakers.v1beta1.Staker is not mutable"))
	case "kyve.stakers.v1beta1.Staker.security_contact":
		panic(fmt.Errorf("field security_contact of message kyve.stakers.v1beta1.Staker is not mutable"))
	case "kyve.stakers.v1beta1.Staker.details":
		panic(fmt.Errorf("field details of message kyve.stakers.v1beta1.Staker is not mutable"))
	case "kyve.stakers.v1beta1.Staker.commission_rewards":
		panic(fmt.Errorf("field commission_rewards of message kyve.stakers.v1beta1.Staker is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Staker"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Staker does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Staker) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Staker.address":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Staker.commission":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Staker.moniker":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Staker.website":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Staker.identity":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Staker.security_contact":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Staker.details":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Staker.commission_rewards":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Staker"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Staker does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Staker) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.stakers.v1beta1.Staker", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Staker) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Staker) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Staker) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Staker) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Staker)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Commission)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Moniker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Website)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SecurityContact)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Details)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CommissionRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.CommissionRewards))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Staker)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CommissionRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CommissionRewards))
			i--
			dAtA[i] = 0x40
		}
		if len(x.Details) > 0 {
			i -= len(x.Details)
			copy(dAtA[i:], x.Details)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Details)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.SecurityContact) > 0 {
			i -= len(x.SecurityContact)
			copy(dAtA[i:], x.SecurityContact)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SecurityContact)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Website) > 0 {
			i -= len(x.Website)
			copy(dAtA[i:], x.Website)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Website)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Moniker) > 0 {
			i -= len(x.Moniker)
			copy(dAtA[i:], x.Moniker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Moniker)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Commission) > 0 {
			i -= len(x.Commission)
			copy(dAtA[i:], x.Commission)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commission)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Staker)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Staker: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Staker: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commission = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Moniker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Website = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SecurityContact = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Details = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommissionRewards", wireType)
				}
				x.CommissionRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CommissionRewards |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Valaccount            protoreflect.MessageDescriptor
	fd_Valaccount_pool_id    protoreflect.FieldDescriptor
	fd_Valaccount_staker     protoreflect.FieldDescriptor
	fd_Valaccount_valaddress protoreflect.FieldDescriptor
	fd_Valaccount_points     protoreflect.FieldDescriptor
	fd_Valaccount_is_leaving protoreflect.FieldDescriptor
)

func init() {
	file_kyve_stakers_v1beta1_stakers_proto_init()
	md_Valaccount = File_kyve_stakers_v1beta1_stakers_proto.Messages().ByName("Valaccount")
	fd_Valaccount_pool_id = md_Valaccount.Fields().ByName("pool_id")
	fd_Valaccount_staker = md_Valaccount.Fields().ByName("staker")
	fd_Valaccount_valaddress = md_Valaccount.Fields().ByName("valaddress")
	fd_Valaccount_points = md_Valaccount.Fields().ByName("points")
	fd_Valaccount_is_leaving = md_Valaccount.Fields().ByName("is_leaving")
}

var _ protoreflect.Message = (*fastReflection_Valaccount)(nil)

type fastReflection_Valaccount Valaccount

func (x *Valaccount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Valaccount)(x)
}

func (x *Valaccount) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Valaccount_messageType fastReflection_Valaccount_messageType
var _ protoreflect.MessageType = fastReflection_Valaccount_messageType{}

type fastReflection_Valaccount_messageType struct{}

func (x fastReflection_Valaccount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Valaccount)(nil)
}
func (x fastReflection_Valaccount_messageType) New() protoreflect.Message {
	return new(fastReflection_Valaccount)
}
func (x fastReflection_Valaccount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Valaccount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Valaccount) Descriptor() protoreflect.MessageDescriptor {
	return md_Valaccount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Valaccount) Type() protoreflect.MessageType {
	return _fastReflection_Valaccount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Valaccount) New() protoreflect.Message {
	return new(fastReflection_Valaccount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Valaccount) Interface() protoreflect.ProtoMessage {
	return (*Valaccount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Valaccount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_Valaccount_pool_id, value) {
			return
		}
	}
	if x.Staker != "" {
		value := protoreflect.ValueOfString(x.Staker)
		if !f(fd_Valaccount_staker, value) {
			return
		}
	}
	if x.Valaddress != "" {
		value := protoreflect.ValueOfString(x.Valaddress)
		if !f(fd_Valaccount_valaddress, value) {
			return
		}
	}
	if x.Points != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Points)
		if !f(fd_Valaccount_points, value) {
			return
		}
	}
	if x.IsLeaving != false {
		value := protoreflect.ValueOfBool(x.IsLeaving)
		if !f(fd_Valaccount_is_leaving, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Valaccount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Valaccount.pool_id":
		return x.PoolId != uint64(0)
	case "kyve.stakers.v1beta1.Valaccount.staker":
		return x.Staker != ""
	case "kyve.stakers.v1beta1.Valaccount.valaddress":
		return x.Valaddress != ""
	case "kyve.stakers.v1beta1.Valaccount.points":
		return x.Points != uint64(0)
	case "kyve.stakers.v1beta1.Valaccount.is_leaving":
		return x.IsLeaving != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Valaccount"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Valaccount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Valaccount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Valaccount.pool_id":
		x.PoolId = uint64(0)
	case "kyve.stakers.v1beta1.Valaccount.staker":
		x.Staker = ""
	case "kyve.stakers.v1beta1.Valaccount.valaddress":
		x.Valaddress = ""
	case "kyve.stakers.v1beta1.Valaccount.points":
		x.Points = uint64(0)
	case "kyve.stakers.v1beta1.Valaccount.is_leaving":
		x.IsLeaving = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Valaccount"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Valaccount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Valaccount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.stakers.v1beta1.Valaccount.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "kyve.stakers.v1beta1.Valaccount.staker":
		value := x.Staker
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Valaccount.valaddress":
		value := x.Valaddress
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.Valaccount.points":
		value := x.Points
		return protoreflect.ValueOfUint64(value)
	case "kyve.stakers.v1beta1.Valaccount.is_leaving":
		value := x.IsLeaving
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Valaccount"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Valaccount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Valaccount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Valaccount.pool_id":
		x.PoolId = value.Uint()
	case "kyve.stakers.v1beta1.Valaccount.staker":
		x.Staker = value.Interface().(string)
	case "kyve.stakers.v1beta1.Valaccount.valaddress":
		x.Valaddress = value.Interface().(string)
	case "kyve.stakers.v1beta1.Valaccount.points":
		x.Points = value.Uint()
	case "kyve.stakers.v1beta1.Valaccount.is_leaving":
		x.IsLeaving = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Valaccount"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Valaccount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Valaccount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Valaccount.pool_id":
		panic(fmt.Errorf("field pool_id of message kyve.stakers.v1beta1.Valaccount is not mutable"))
	case "kyve.stakers.v1beta1.Valaccount.staker":
		panic(fmt.Errorf("field staker of message kyve.stakers.v1beta1.Valaccount is not mutable"))
	case "kyve.stakers.v1beta1.Valaccount.valaddress":
		panic(fmt.Errorf("field valaddress of message kyve.stakers.v1beta1.Valaccount is not mutable"))
	case "kyve.stakers.v1beta1.Valaccount.points":
		panic(fmt.Errorf("field points of message kyve.stakers.v1beta1.Valaccount is not mutable"))
	case "kyve.stakers.v1beta1.Valaccount.is_leaving":
		panic(fmt.Errorf("field is_leaving of message kyve.stakers.v1beta1.Valaccount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Valaccount"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Valaccount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Valaccount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.Valaccount.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.stakers.v1beta1.Valaccount.staker":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Valaccount.valaddress":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.Valaccount.points":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.stakers.v1beta1.Valaccount.is_leaving":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.Valaccount"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.Valaccount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Valaccount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.stakers.v1beta1.Valaccount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Valaccount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Valaccount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Valaccount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Valaccount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Valaccount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.Staker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Valaddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Points != 0 {
			n += 1 + runtime.Sov(uint64(x.Points))
		}
		if x.IsLeaving {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Valaccount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsLeaving {
			i--
			if x.IsLeaving {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.Points != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Points))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Valaddress) > 0 {
			i -= len(x.Valaddress)
			copy(dAtA[i:], x.Valaddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Valaddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Staker) > 0 {
			i -= len(x.Staker)
			copy(dAtA[i:], x.Staker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Staker)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Valaccount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Valaccount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Valaccount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Staker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Valaddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Valaddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
				}
				x.Points = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Points |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsLeaving", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsLeaving = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CommissionChangeEntry               protoreflect.MessageDescriptor
	fd_CommissionChangeEntry_index         protoreflect.FieldDescriptor
	fd_CommissionChangeEntry_staker        protoreflect.FieldDescriptor
	fd_CommissionChangeEntry_commission    protoreflect.FieldDescriptor
	fd_CommissionChangeEntry_creation_date protoreflect.FieldDescriptor
)

func init() {
	file_kyve_stakers_v1beta1_stakers_proto_init()
	md_CommissionChangeEntry = File_kyve_stakers_v1beta1_stakers_proto.Messages().ByName("CommissionChangeEntry")
	fd_CommissionChangeEntry_index = md_CommissionChangeEntry.Fields().ByName("index")
	fd_CommissionChangeEntry_staker = md_CommissionChangeEntry.Fields().ByName("staker")
	fd_CommissionChangeEntry_commission = md_CommissionChangeEntry.Fields().ByName("commission")
	fd_CommissionChangeEntry_creation_date = md_CommissionChangeEntry.Fields().ByName("creation_date")
}

var _ protoreflect.Message = (*fastReflection_CommissionChangeEntry)(nil)

type fastReflection_CommissionChangeEntry CommissionChangeEntry

func (x *CommissionChangeEntry) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CommissionChangeEntry)(x)
}

func (x *CommissionChangeEntry) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CommissionChangeEntry_messageType fastReflection_CommissionChangeEntry_messageType
var _ protoreflect.MessageType = fastReflection_CommissionChangeEntry_messageType{}

type fastReflection_CommissionChangeEntry_messageType struct{}

func (x fastReflection_CommissionChangeEntry_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CommissionChangeEntry)(nil)
}
func (x fastReflection_CommissionChangeEntry_messageType) New() protoreflect.Message {
	return new(fastReflection_CommissionChangeEntry)
}
func (x fastReflection_CommissionChangeEntry_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CommissionChangeEntry
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CommissionChangeEntry) Descriptor() protoreflect.MessageDescriptor {
	return md_CommissionChangeEntry
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CommissionChangeEntry) Type() protoreflect.MessageType {
	return _fastReflection_CommissionChangeEntry_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CommissionChangeEntry) New() protoreflect.Message {
	return new(fastReflection_CommissionChangeEntry)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CommissionChangeEntry) Interface() protoreflect.ProtoMessage {
	return (*CommissionChangeEntry)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CommissionChangeEntry) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_CommissionChangeEntry_index, value) {
			return
		}
	}
	if x.Staker != "" {
		value := protoreflect.ValueOfString(x.Staker)
		if !f(fd_CommissionChangeEntry_staker, value) {
			return
		}
	}
	if x.Commission != "" {
		value := protoreflect.ValueOfString(x.Commission)
		if !f(fd_CommissionChangeEntry_commission, value) {
			return
		}
	}
	if x.CreationDate != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreationDate)
		if !f(fd_CommissionChangeEntry_creation_date, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CommissionChangeEntry) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.CommissionChangeEntry.index":
		return x.Index != uint64(0)
	case "kyve.stakers.v1beta1.CommissionChangeEntry.staker":
		return x.Staker != ""
	case "kyve.stakers.v1beta1.CommissionChangeEntry.commission":
		return x.Commission != ""
	case "kyve.stakers.v1beta1.CommissionChangeEntry.creation_date":
		return x.CreationDate != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.CommissionChangeEntry.index":
		x.Index = uint64(0)
	case "kyve.stakers.v1beta1.CommissionChangeEntry.staker":
		x.Staker = ""
	case "kyve.stakers.v1beta1.CommissionChangeEntry.commission":
		x.Commission = ""
	case "kyve.stakers.v1beta1.CommissionChangeEntry.creation_date":
		x.CreationDate = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CommissionChangeEntry) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.stakers.v1beta1.CommissionChangeEntry.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "kyve.stakers.v1beta1.CommissionChangeEntry.staker":
		value := x.Staker
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.CommissionChangeEntry.commission":
		value := x.Commission
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.CommissionChangeEntry.creation_date":
		value := x.CreationDate
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.CommissionChangeEntry does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.CommissionChangeEntry.index":
		x.Index = value.Uint()
	case "kyve.stakers.v1beta1.CommissionChangeEntry.staker":
		x.Staker = value.Interface().(string)
	case "kyve.stakers.v1beta1.CommissionChangeEntry.commission":
		x.Commission = value.Interface().(string)
	case "kyve.stakers.v1beta1.CommissionChangeEntry.creation_date":
		x.CreationDate = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.CommissionChangeEntry.index":
		panic(fmt.Errorf("field index of message kyve.stakers.v1beta1.CommissionChangeEntry is not mutable"))
	case "kyve.stakers.v1beta1.CommissionChangeEntry.staker":
		panic(fmt.Errorf("field staker of message kyve.stakers.v1beta1.CommissionChangeEntry is not mutable"))
	case "kyve.stakers.v1beta1.CommissionChangeEntry.commission":
		panic(fmt.Errorf("field commission of message kyve.stakers.v1beta1.CommissionChangeEntry is not mutable"))
	case "kyve.stakers.v1beta1.CommissionChangeEntry.creation_date":
		panic(fmt.Errorf("field creation_date of message kyve.stakers.v1beta1.CommissionChangeEntry is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CommissionChangeEntry) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.CommissionChangeEntry.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.stakers.v1beta1.CommissionChangeEntry.staker":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.CommissionChangeEntry.commission":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.CommissionChangeEntry.creation_date":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.CommissionChangeEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.CommissionChangeEntry does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CommissionChangeEntry) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.stakers.v1beta1.CommissionChangeEntry", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CommissionChangeEntry) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommissionChangeEntry) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CommissionChangeEntry) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CommissionChangeEntry) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CommissionChangeEntry)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		l = len(x.Staker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Commission)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreationDate != 0 {
			n += 1 + runtime.Sov(uint64(x.CreationDate))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CommissionChangeEntry)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CreationDate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreationDate))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Commission) > 0 {
			i -= len(x.Commission)
			copy(dAtA[i:], x.Commission)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commission)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Staker) > 0 {
			i -= len(x.Staker)
			copy(dAtA[i:], x.Staker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Staker)))
			i--
			dAtA[i] = 0x12
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CommissionChangeEntry)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommissionChangeEntry: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommissionChangeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Staker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commission = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
				}
				x.CreationDate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreationDate |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LeavePoolEntry               protoreflect.MessageDescriptor
	fd_LeavePoolEntry_index         protoreflect.FieldDescriptor
	fd_LeavePoolEntry_staker        protoreflect.FieldDescriptor
	fd_LeavePoolEntry_pool_id       protoreflect.FieldDescriptor
	fd_LeavePoolEntry_creation_date protoreflect.FieldDescriptor
)

func init() {
	file_kyve_stakers_v1beta1_stakers_proto_init()
	md_LeavePoolEntry = File_kyve_stakers_v1beta1_stakers_proto.Messages().ByName("LeavePoolEntry")
	fd_LeavePoolEntry_index = md_LeavePoolEntry.Fields().ByName("index")
	fd_LeavePoolEntry_staker = md_LeavePoolEntry.Fields().ByName("staker")
	fd_LeavePoolEntry_pool_id = md_LeavePoolEntry.Fields().ByName("pool_id")
	fd_LeavePoolEntry_creation_date = md_LeavePoolEntry.Fields().ByName("creation_date")
}

var _ protoreflect.Message = (*fastReflection_LeavePoolEntry)(nil)

type fastReflection_LeavePoolEntry LeavePoolEntry

func (x *LeavePoolEntry) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LeavePoolEntry)(x)
}

func (x *LeavePoolEntry) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LeavePoolEntry_messageType fastReflection_LeavePoolEntry_messageType
var _ protoreflect.MessageType = fastReflection_LeavePoolEntry_messageType{}

type fastReflection_LeavePoolEntry_messageType struct{}

func (x fastReflection_LeavePoolEntry_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LeavePoolEntry)(nil)
}
func (x fastReflection_LeavePoolEntry_messageType) New() protoreflect.Message {
	return new(fastReflection_LeavePoolEntry)
}
func (x fastReflection_LeavePoolEntry_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LeavePoolEntry
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LeavePoolEntry) Descriptor() protoreflect.MessageDescriptor {
	return md_LeavePoolEntry
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LeavePoolEntry) Type() protoreflect.MessageType {
	return _fastReflection_LeavePoolEntry_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LeavePoolEntry) New() protoreflect.Message {
	return new(fastReflection_LeavePoolEntry)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LeavePoolEntry) Interface() protoreflect.ProtoMessage {
	return (*LeavePoolEntry)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LeavePoolEntry) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_LeavePoolEntry_index, value) {
			return
		}
	}
	if x.Staker != "" {
		value := protoreflect.ValueOfString(x.Staker)
		if !f(fd_LeavePoolEntry_staker, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_LeavePoolEntry_pool_id, value) {
			return
		}
	}
	if x.CreationDate != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreationDate)
		if !f(fd_LeavePoolEntry_creation_date, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LeavePoolEntry) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.LeavePoolEntry.index":
		return x.Index != uint64(0)
	case "kyve.stakers.v1beta1.LeavePoolEntry.staker":
		return x.Staker != ""
	case "kyve.stakers.v1beta1.LeavePoolEntry.pool_id":
		return x.PoolId != uint64(0)
	case "kyve.stakers.v1beta1.LeavePoolEntry.creation_date":
		return x.CreationDate != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.LeavePoolEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.LeavePoolEntry does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LeavePoolEntry) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.LeavePoolEntry.index":
		x.Index = uint64(0)
	case "kyve.stakers.v1beta1.LeavePoolEntry.staker":
		x.Staker = ""
	case "kyve.stakers.v1beta1.LeavePoolEntry.pool_id":
		x.PoolId = uint64(0)
	case "kyve.stakers.v1beta1.LeavePoolEntry.creation_date":
		x.CreationDate = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.LeavePoolEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.LeavePoolEntry does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LeavePoolEntry) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.stakers.v1beta1.LeavePoolEntry.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "kyve.stakers.v1beta1.LeavePoolEntry.staker":
		value := x.Staker
		return protoreflect.ValueOfString(value)
	case "kyve.stakers.v1beta1.LeavePoolEntry.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "kyve.stakers.v1beta1.LeavePoolEntry.creation_date":
		value := x.CreationDate
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.LeavePoolEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.LeavePoolEntry does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LeavePoolEntry) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.LeavePoolEntry.index":
		x.Index = value.Uint()
	case "kyve.stakers.v1beta1.LeavePoolEntry.staker":
		x.Staker = value.Interface().(string)
	case "kyve.stakers.v1beta1.LeavePoolEntry.pool_id":
		x.PoolId = value.Uint()
	case "kyve.stakers.v1beta1.LeavePoolEntry.creation_date":
		x.CreationDate = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.LeavePoolEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.LeavePoolEntry does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LeavePoolEntry) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.LeavePoolEntry.index":
		panic(fmt.Errorf("field index of message kyve.stakers.v1beta1.LeavePoolEntry is not mutable"))
	case "kyve.stakers.v1beta1.LeavePoolEntry.staker":
		panic(fmt.Errorf("field staker of message kyve.stakers.v1beta1.LeavePoolEntry is not mutable"))
	case "kyve.stakers.v1beta1.LeavePoolEntry.pool_id":
		panic(fmt.Errorf("field pool_id of message kyve.stakers.v1beta1.LeavePoolEntry is not mutable"))
	case "kyve.stakers.v1beta1.LeavePoolEntry.creation_date":
		panic(fmt.Errorf("field creation_date of message kyve.stakers.v1beta1.LeavePoolEntry is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.LeavePoolEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.LeavePoolEntry does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LeavePoolEntry) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.LeavePoolEntry.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.stakers.v1beta1.LeavePoolEntry.staker":
		return protoreflect.ValueOfString("")
	case "kyve.stakers.v1beta1.LeavePoolEntry.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.stakers.v1beta1.LeavePoolEntry.creation_date":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.LeavePoolEntry"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.LeavePoolEntry does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LeavePoolEntry) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.stakers.v1beta1.LeavePoolEntry", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LeavePoolEntry) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LeavePoolEntry) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LeavePoolEntry) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LeavePoolEntry) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LeavePoolEntry)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		l = len(x.Staker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.CreationDate != 0 {
			n += 1 + runtime.Sov(uint64(x.CreationDate))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LeavePoolEntry)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CreationDate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreationDate))
			i--
			dAtA[i] = 0x20
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Staker) > 0 {
			i -= len(x.Staker)
			copy(dAtA[i:], x.Staker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Staker)))
			i--
			dAtA[i] = 0x12
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LeavePoolEntry)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LeavePoolEntry: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LeavePoolEntry: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Staker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
				}
				x.CreationDate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreationDate |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueueState            protoreflect.MessageDescriptor
	fd_QueueState_low_index  protoreflect.FieldDescriptor
	fd_QueueState_high_index protoreflect.FieldDescriptor
)

func init() {
	file_kyve_stakers_v1beta1_stakers_proto_init()
	md_QueueState = File_kyve_stakers_v1beta1_stakers_proto.Messages().ByName("QueueState")
	fd_QueueState_low_index = md_QueueState.Fields().ByName("low_index")
	fd_QueueState_high_index = md_QueueState.Fields().ByName("high_index")
}

var _ protoreflect.Message = (*fastReflection_QueueState)(nil)

type fastReflection_QueueState QueueState

func (x *QueueState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueueState)(x)
}

func (x *QueueState) slowProtoReflect() protoreflect.Message {
	mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueueState_messageType fastReflection_QueueState_messageType
var _ protoreflect.MessageType = fastReflection_QueueState_messageType{}

type fastReflection_QueueState_messageType struct{}

func (x fastReflection_QueueState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueueState)(nil)
}
func (x fastReflection_QueueState_messageType) New() protoreflect.Message {
	return new(fastReflection_QueueState)
}
func (x fastReflection_QueueState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueueState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueueState) Descriptor() protoreflect.MessageDescriptor {
	return md_QueueState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueueState) Type() protoreflect.MessageType {
	return _fastReflection_QueueState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueueState) New() protoreflect.Message {
	return new(fastReflection_QueueState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueueState) Interface() protoreflect.ProtoMessage {
	return (*QueueState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueueState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.LowIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LowIndex)
		if !f(fd_QueueState_low_index, value) {
			return
		}
	}
	if x.HighIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.HighIndex)
		if !f(fd_QueueState_high_index, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueueState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.QueueState.low_index":
		return x.LowIndex != uint64(0)
	case "kyve.stakers.v1beta1.QueueState.high_index":
		return x.HighIndex != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.QueueState"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.QueueState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueueState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.QueueState.low_index":
		x.LowIndex = uint64(0)
	case "kyve.stakers.v1beta1.QueueState.high_index":
		x.HighIndex = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.QueueState"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.QueueState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueueState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kyve.stakers.v1beta1.QueueState.low_index":
		value := x.LowIndex
		return protoreflect.ValueOfUint64(value)
	case "kyve.stakers.v1beta1.QueueState.high_index":
		value := x.HighIndex
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.QueueState"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.QueueState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueueState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.QueueState.low_index":
		x.LowIndex = value.Uint()
	case "kyve.stakers.v1beta1.QueueState.high_index":
		x.HighIndex = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.QueueState"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.QueueState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueueState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.QueueState.low_index":
		panic(fmt.Errorf("field low_index of message kyve.stakers.v1beta1.QueueState is not mutable"))
	case "kyve.stakers.v1beta1.QueueState.high_index":
		panic(fmt.Errorf("field high_index of message kyve.stakers.v1beta1.QueueState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.QueueState"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.QueueState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueueState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kyve.stakers.v1beta1.QueueState.low_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kyve.stakers.v1beta1.QueueState.high_index":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kyve.stakers.v1beta1.QueueState"))
		}
		panic(fmt.Errorf("message kyve.stakers.v1beta1.QueueState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueueState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kyve.stakers.v1beta1.QueueState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueueState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueueState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueueState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueueState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueueState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.LowIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.LowIndex))
		}
		if x.HighIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.HighIndex))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueueState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.HighIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.HighIndex))
			i--
			dAtA[i] = 0x10
		}
		if x.LowIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LowIndex))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueueState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueueState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueueState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LowIndex", wireType)
				}
				x.LowIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LowIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HighIndex", wireType)
				}
				x.HighIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.HighIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kyve/stakers/v1beta1/stakers.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Staker contains all metadata for a staker
// Every address can only create one staker (itself)
type Staker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// commission ...
	Commission string `protobuf:"bytes,2,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker ...
	Moniker string `protobuf:"bytes,3,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website ...
	Website string `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	// identity is the 64 bit keybase.io identity string
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// security_contact ...
	SecurityContact string `protobuf:"bytes,6,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details are some additional notes the staker finds important
	Details string `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
	// commission_rewards are the rewards in $KYVE earned through commission
	CommissionRewards uint64 `protobuf:"varint,8,opt,name=commission_rewards,json=commissionRewards,proto3" json:"commission_rewards,omitempty"`
}

func (x *Staker) Reset() {
	*x = Staker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staker) ProtoMessage() {}

// Deprecated: Use Staker.ProtoReflect.Descriptor instead.
func (*Staker) Descriptor() ([]byte, []int) {
	return file_kyve_stakers_v1beta1_stakers_proto_rawDescGZIP(), []int{0}
}

func (x *Staker) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Staker) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *Staker) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *Staker) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Staker) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Staker) GetSecurityContact() string {
	if x != nil {
		return x.SecurityContact
	}
	return ""
}

func (x *Staker) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Staker) GetCommissionRewards() uint64 {
	if x != nil {
		return x.CommissionRewards
	}
	return 0
}

// Valaccount gets authorized by a staker to
// vote in a given pool by favor of the staker.
type Valaccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pool_id defines the pool in which the address
	// is allowed to vote in.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// staker is the address the valaccount is voting for.
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// valaddress is the account stored on the protocol
	// node which votes for the staker in the given pool
	Valaddress string `protobuf:"bytes,3,opt,name=valaddress,proto3" json:"valaddress,omitempty"`
	// When a node is inactive (does not vote at all)
	// A point is added, after a certain amount of points
	// is reached the node gets kicked out.
	Points uint64 `protobuf:"varint,4,opt,name=points,proto3" json:"points,omitempty"`
	// isLeaving indicates if a staker is leaving the given pool.
	IsLeaving bool `protobuf:"varint,5,opt,name=is_leaving,json=isLeaving,proto3" json:"is_leaving,omitempty"`
}

func (x *Valaccount) Reset() {
	*x = Valaccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Valaccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Valaccount) ProtoMessage() {}

// Deprecated: Use Valaccount.ProtoReflect.Descriptor instead.
func (*Valaccount) Descriptor() ([]byte, []int) {
	return file_kyve_stakers_v1beta1_stakers_proto_rawDescGZIP(), []int{1}
}

func (x *Valaccount) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *Valaccount) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *Valaccount) GetValaddress() string {
	if x != nil {
		return x.Valaddress
	}
	return ""
}

func (x *Valaccount) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Valaccount) GetIsLeaving() bool {
	if x != nil {
		return x.IsLeaving
	}
	return false
}

// CommissionChangeEntry stores the information for an
// upcoming commission change. A commission change is never
// instant, so delegators have time to redelegate in case
// they don't agree with the new commission.
type CommissionChangeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index is needed for the queue-algorithm which
	// processes the commission changes
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// staker is the address of the affected staker
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// commission is the new commission which will
	// be applied after the waiting time is over.
	Commission string `protobuf:"bytes,3,opt,name=commission,proto3" json:"commission,omitempty"`
	// creation_date is the UNIX-timestamp in seconds
	// when the entry was created.
	CreationDate int64 `protobuf:"varint,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *CommissionChangeEntry) Reset() {
	*x = CommissionChangeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommissionChangeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionChangeEntry) ProtoMessage() {}

// Deprecated: Use CommissionChangeEntry.ProtoReflect.Descriptor instead.
func (*CommissionChangeEntry) Descriptor() ([]byte, []int) {
	return file_kyve_stakers_v1beta1_stakers_proto_rawDescGZIP(), []int{2}
}

func (x *CommissionChangeEntry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CommissionChangeEntry) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *CommissionChangeEntry) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *CommissionChangeEntry) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

// LeavePoolEntry stores the information for an upcoming
// pool leave. A staker can't leave a pool instantly.
// Instead a the `LeaveTime` needs to be awaited.
// If a staker start to leave a pool, it will be shown
// in the UI to the delegators.
type LeavePoolEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index is needed for the queue-algorithm which
	// processes the commission changes
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// staker is the address of the affected staker
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// pool_id indicates the pool the staker wants to leave
	PoolId uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// creation_date is the UNIX-timestamp in seconds
	// when the entry was created.
	CreationDate int64 `protobuf:"varint,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *LeavePoolEntry) Reset() {
	*x = LeavePoolEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeavePoolEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeavePoolEntry) ProtoMessage() {}

// Deprecated: Use LeavePoolEntry.ProtoReflect.Descriptor instead.
func (*LeavePoolEntry) Descriptor() ([]byte, []int) {
	return file_kyve_stakers_v1beta1_stakers_proto_rawDescGZIP(), []int{3}
}

func (x *LeavePoolEntry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LeavePoolEntry) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *LeavePoolEntry) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *LeavePoolEntry) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

// UnbondingState stores the state for the unbonding of stakes and delegations.
type QueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// low_index is the tail of the queue. It is the
	// oldest entry in the queue. If this entry isn't
	// due, non of the other entries is.
	LowIndex uint64 `protobuf:"varint,1,opt,name=low_index,json=lowIndex,proto3" json:"low_index,omitempty"`
	// high_index is the head of the queue. New entries
	// are added to the top.
	HighIndex uint64 `protobuf:"varint,2,opt,name=high_index,json=highIndex,proto3" json:"high_index,omitempty"`
}

func (x *QueueState) Reset() {
	*x = QueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kyve_stakers_v1beta1_stakers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueState) ProtoMessage() {}

// Deprecated: Use QueueState.ProtoReflect.Descriptor instead.
func (*QueueState) Descriptor() ([]byte, []int) {
	return file_kyve_stakers_v1beta1_stakers_proto_rawDescGZIP(), []int{4}
}

func (x *QueueState) GetLowIndex() uint64 {
	if x != nil {
		return x.LowIndex
	}
	return 0
}

func (x *QueueState) GetHighIndex() uint64 {
	if x != nil {
		return x.HighIndex
	}
	return 0
}

var File_kyve_stakers_v1beta1_stakers_proto protoreflect.FileDescriptor

var file_kyve_stakers_v1beta1_stakers_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b, 0x79, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb6, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x56, 0x61,
	0x6c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x61, 0x6c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x22, 0xba, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a,
	0x0e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0xe3, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x79,
	0x76, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x42, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b,
	0x59, 0x56, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2f, 0x6b, 0x79, 0x76, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4b, 0x53,
	0x58, 0xaa, 0x02, 0x14, 0x4b, 0x79, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x14, 0x4b, 0x79, 0x76, 0x65, 0x5c,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2,
	0x02, 0x20, 0x4b, 0x79, 0x76, 0x65, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x16, 0x4b, 0x79, 0x76, 0x65, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_kyve_stakers_v1beta1_stakers_proto_rawDescOnce sync.Once
	file_kyve_stakers_v1beta1_stakers_proto_rawDescData = file_kyve_stakers_v1beta1_stakers_proto_rawDesc
)

func file_kyve_stakers_v1beta1_stakers_proto_rawDescGZIP() []byte {
	file_kyve_stakers_v1beta1_stakers_proto_rawDescOnce.Do(func() {
		file_kyve_stakers_v1beta1_stakers_proto_rawDescData = protoimpl.X.CompressGZIP(file_kyve_stakers_v1beta1_stakers_proto_rawDescData)
	})
	return file_kyve_stakers_v1beta1_stakers_proto_rawDescData
}

var file_kyve_stakers_v1beta1_stakers_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kyve_stakers_v1beta1_stakers_proto_goTypes = []interface{}{
	(*Staker)(nil),                // 0: kyve.stakers.v1beta1.Staker
	(*Valaccount)(nil),            // 1: kyve.stakers.v1beta1.Valaccount
	(*CommissionChangeEntry)(nil), // 2: kyve.stakers.v1beta1.CommissionChangeEntry
	(*LeavePoolEntry)(nil),        // 3: kyve.stakers.v1beta1.LeavePoolEntry
	(*QueueState)(nil),            // 4: kyve.stakers.v1beta1.QueueState
}
var file_kyve_stakers_v1beta1_stakers_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_kyve_stakers_v1beta1_stakers_proto_init() }
func file_kyve_stakers_v1beta1_stakers_proto_init() {
	if File_kyve_stakers_v1beta1_stakers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kyve_stakers_v1beta1_stakers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_stakers_v1beta1_stakers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Valaccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_stakers_v1beta1_stakers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommissionChangeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_stakers_v1beta1_stakers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeavePoolEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kyve_stakers_v1beta1_stakers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kyve_stakers_v1beta1_stakers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kyve_stakers_v1beta1_stakers_proto_goTypes,
		DependencyIndexes: file_kyve_stakers_v1beta1_stakers_proto_depIdxs,
		MessageInfos:      file_kyve_stakers_v1beta1_stakers_proto_msgTypes,
	}.Build()
	File_kyve_stakers_v1beta1_stakers_proto = out.File
	file_kyve_stakers_v1beta1_stakers_proto_rawDesc = nil
	file_kyve_stakers_v1beta1_stakers_proto_goTypes = nil
	file_kyve_stakers_v1beta1_stakers_proto_depIdxs = nil
}
